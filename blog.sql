/*
 Navicat Premium Data Transfer

 Source Server         : XXD
 Source Server Type    : MySQL
 Source Server Version : 50724
 Source Host           : 119.23.224.98:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50724
 File Encoding         : 65001

 Date: 10/08/2020 22:21:59
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for bg_article
-- ----------------------------
DROP TABLE IF EXISTS `bg_article`;
CREATE TABLE `bg_article`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `uuid` char(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `keyword` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `md_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `gmt_create` datetime(0) NULL DEFAULT NULL,
  `gmt_update` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `views` int(11) NOT NULL DEFAULT 0,
  `status` tinyint(4) NOT NULL DEFAULT 0 COMMENT '-1.删除 0.下线 1.上线',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `idx_uuid`(`uuid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 52 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '博客文章' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bg_article
-- ----------------------------
INSERT INTO `bg_article` VALUES (13, '大丰收了肯德基正常序偶个再重新考虑将【测试】', '1548080218', '阿十大科技护肤按实际打款发货阿斯加德开户费，打开撒金凤凰收到卡积分酒店合肥个查看最新计划名单及回复！就的撒发货阿四大皆空花粉选择沉默，女 现场展开聚会和个持续展开客户进行操作v', '啥地方', 'https://upload-images.jianshu.io/upload_images/15531212-9d2f6612cf8ccd9c.jpg?imageMogr2/auto-orient/strip|imageView2/1/w/360/h/240', '<p>自行车考虑将啊是的覅局自行车个空间撒地方</p>\n<ol>\n<li><p>杀得快解放和撒打飞机客户</p>\n</li><li><p>手机的客服哈刷卡机大富豪</p>\n</li><li><p>kj卡就是烦得很卡萨绝代风华<br>啥地方</p>\n</li></ol>\n', '自行车考虑将啊是的覅局自行车个空间撒地方\n\n1. 杀得快解放和撒打飞机客户\n\n2. 手机的客服哈刷卡机大富豪\n\n3. kj卡就是烦得很卡萨绝代风华\n啥地方', '2019-01-21 22:16:58', '2019-07-01 16:58:37', 82, 0);
INSERT INTO `bg_article` VALUES (18, '写在博客上线之前！', '1533046192', '写在博客上线之前，记录下上线的准备工作以及其他关于博客的事情！', '个人博客，博客，上线之前，关于博客', '', '<blockquote>\n<p>写在上线之初</p>\n</blockquote>\n<p>现在是18年7月31日22点整，距离8月1日也就两个小时的时间了，这个博客打算在8月1号上线，也就还剩两个小时，在上线之初写一写这篇文章。第一篇正式的博客文章不知道什么时候可以写，这一篇我不算他是正式博文哦，哈哈！</p>\n<p>因为是首次使用MarkDown编辑器来写博客，所以排版什么的还需要后期多学学，把样子做好一点啦。</p>\n<p>其实在16年6月后面点的时间已经有一个博客了，只是由于种种原因导致服务器过期了，而且也没有去备份服务器上的数据，可能就是17年停止的服务吧。</p>\n<p>当时的域名也没有继续续费，还记得那个域名是大学时候买的，域名过期了也没有时间去管，后面想到去续费的时候看了一下结果要花好几大百大洋才可以，这也就导致了我不去续费它了，而是直接申请一个新的域名，然后又重新去备案！域名就是现在这个博客的域名啦：<a href=\"http://www.iuxiao.com\" title=\"www.iuixao.com\">www.iuxiao.com</a> ，服务器则是使用阿里搞活动买的，比较便宜，挂我的博客也足够用了！</p>\n<p>想维护个自己的博客想法已经挺久的了，但是一直没有付出实际行动，这也是让我比较感慨的，做这个博客在功能上也比较纠结，一直在想这个要不要，那个要不要，选个界面模板也找了很久很久，最后只留下了最基本的功能，就是博客文章，小工具，搜索等功能，前期的博客不想让她有太多的功能了，够用就好！而且后台管理也是简单的不行，就一个文章管理，但是这完全就够我自己管理博客啦！以后需要什么功能在加上就好了！</p>\n<p>最后希望博客能够能够取得一个好成绩！让我自己满意就好 ^_^</p>\n', '> 写在上线之初\n\n现在是18年7月31日22点整，距离8月1日也就两个小时的时间了，这个博客打算在8月1号上线，也就还剩两个小时，在上线之初写一写这篇文章。第一篇正式的博客文章不知道什么时候可以写，这一篇我不算他是正式博文哦，哈哈！\n\n因为是首次使用MarkDown编辑器来写博客，所以排版什么的还需要后期多学学，把样子做好一点啦。\n\n其实在16年6月后面点的时间已经有一个博客了，只是由于种种原因导致服务器过期了，而且也没有去备份服务器上的数据，可能就是17年停止的服务吧。\n\n当时的域名也没有继续续费，还记得那个域名是大学时候买的，域名过期了也没有时间去管，后面想到去续费的时候看了一下结果要花好几大百大洋才可以，这也就导致了我不去续费它了，而是直接申请一个新的域名，然后又重新去备案！域名就是现在这个博客的域名啦：[www.iuxiao.com](http://www.iuxiao.com \"www.iuixao.com\") ，服务器则是使用阿里搞活动买的，比较便宜，挂我的博客也足够用了！\n\n想维护个自己的博客想法已经挺久的了，但是一直没有付出实际行动，这也是让我比较感慨的，做这个博客在功能上也比较纠结，一直在想这个要不要，那个要不要，选个界面模板也找了很久很久，最后只留下了最基本的功能，就是博客文章，小工具，搜索等功能，前期的博客不想让她有太多的功能了，够用就好！而且后台管理也是简单的不行，就一个文章管理，但是这完全就够我自己管理博客啦！以后需要什么功能在加上就好了！\n\n最后希望博客能够能够取得一个好成绩！让我自己满意就好 ^_^', '2018-07-31 22:09:50', '2020-07-30 05:38:09', 665, 1);
INSERT INTO `bg_article` VALUES (19, '[转] 同步和异步，阻塞和非阻塞的理解！及网络IO的模型介绍', '1533217668', '阻塞和非阻塞是指进程访问的数据如果尚未就绪，进程是否需要等待，简单说这相当于函数内部的实现区别，也就是未就绪时是直接返回还是等待就绪。而同步和异步是指访问数据的机制。', '同步,异步,阻塞,非阻塞,IO,网络IO,网络IO模型', '', '<p>同步和异步，阻塞和非阻塞是两组很容易混淆的概念，那么如何方便的理解他们，先看下面的例子说明。</p>\n<h1 id=\"h1-u4F8Bu5B50\"><a name=\"例子\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>例子</h1><p><strong>故事：老王烧开水</strong><br>出场人物：老王，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</p>\n<p>1.老王用水壶煮水，并且站在那里，不管水开没开，每隔一定时间看看水开了没。－同步阻塞</p>\n<p>2.老王还是用水壶煮水，不再傻傻的站在那里看水开，跑去寝室上网，但是还是会每隔一段时间过来看看水开了没有，水没有开就走人。－同步非阻塞</p>\n<p>3.老王这次使用高大上的响水壶来煮水，站在那里，但是不会再每隔一段时间去看水开，而是等水开了，水壶会自动的通知他。－异步阻塞</p>\n<p>4.老王还是使用响水壶煮水，跑到客厅上网去，等着响水壶自己把水煮熟了以后通知他。－异步非阻塞</p>\n<h2 id=\"h2-u540Cu6B65u548Cu5F02u6B65\"><a name=\"同步和异步\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>同步和异步</h2><p>同步就是烧开水，需要自己去轮询（每隔一段时间去看看水开了没），异步就是水开了，然后水壶会通知你水已经开了，你可以回来处理这些开水了。<br>同步和异步是相对于操作结果来说，会不会等待结果返回。</p>\n<h2 id=\"h2-u963Bu585Eu548Cu975Eu963Bu585E\"><a name=\"阻塞和非阻塞\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>阻塞和非阻塞</h2><p>阻塞就是说在煮水的过程中，你不可以去干其他的事情，非阻塞就是在同样的情况下，可以同时去干其他的事情。阻塞和非阻塞是相对于线程是否被阻塞。</p>\n<h2 id=\"h2-u8BF4u660E\"><a name=\"说明\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>说明</h2><p>其实，这两者存在本质的区别，它们的修饰对象是不同的。阻塞和非阻塞是指进程访问的数据如果尚未就绪，进程是否需要等待，简单说这相当于函数内部的实现区别，也就是未就绪时是直接返回还是等待就绪。<br>而同步和异步是指访问数据的机制,同步一般指主动请求并等待I/O操作完毕的方式,当数据就绪后在读写的时候必须阻塞,异步则指主动请求数据后便可以继续处理其它任务,随后等待I/O,操作完毕的通知,这可以使进程在数据读写时也不阻塞。</p>\n<h1 id=\"h1--io-\"><a name=\"网络IO的模型\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>网络IO的模型</h1><p>网络IO的模型大致包括下面几种</p>\n<ul>\n<li>同步模型（synchronous IO）<ul>\n<li>阻塞IO（bloking IO）</li><li>非阻塞IO（non-blocking IO）</li><li>多路复用IO（multiplexing IO）</li><li>信号驱动式IO（signal-driven IO）</li></ul>\n</li><li>异步IO（asynchronous IO）</li></ul>\n<p>网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。对于一次IO访问，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间，所以一般会经历两个阶段：</p>\n<p>1.等待所有数据都准备好或者一直在等待数据，有数据的时候将数据拷贝到系统内核；<br>2.将内核缓存中数据拷贝到用户进程中；</p>\n<p>对于socket流而言：<br>1.等待网络上的数据分组到达，然后被复制到内核的某个缓冲区；<br>2.把数据从内核缓冲区复制到应用进程缓冲区中；</p>\n<h2 id=\"h2-u540Cu6B65u6A21u578B\"><a name=\"同步模型\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>同步模型</h2><h3 id=\"h3-1-io\"><a name=\"1.阻塞IO\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.阻塞IO</h3><h4 id=\"h4-1-1-\"><a name=\"1.1 介绍\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.1 介绍</h4><p>这也是最常用的模型，默认情况下所有的套接字都是 阻塞 的；<br><img src=\"http://static.iuxiao.com/image/2018/08/02/bfc39b2e360cb0ab585d00d68b539ad7.png\" alt=\"阻塞IO\" title=\"阻塞IO\"><br>我们把recvfrom函数视为系统调用，因为我们正区分进程和内核，系统调用一般都会从在应用进程空间中运行切换到内核空间中运行，一段时间后又再切换回来；</p>\n<p>我们可以从图中看到，应用进程从 进行系统调用 到 复制数据报到应用进程的缓冲区完成 的整段时间内是被阻塞的；在这个过程中，要么正确到达，要么系统调用被信号打断；直到数据报被复制到用户进程完成后，用户进程才解除阻塞的状态，当然，这是用户进程自己进行的阻塞；</p>\n<h4 id=\"h4-1-2-\"><a name=\"1.2 优点和缺点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2 优点和缺点</h4><ul>\n<li>优点：能够及时返回数据，无延迟；方便调试；</li><li>缺点：需要付出等待的代价；</li></ul>\n<h3 id=\"h3-2-io\"><a name=\"2.非阻塞IO\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.非阻塞IO</h3><h4 id=\"h4-2-1-\"><a name=\"2.1 介绍\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.1 介绍</h4><p>非阻塞，当所请求的I/O操作非得把当前进程设置成睡眠才能完成时，不要把当前进程设置成睡眠，而是返回一个错误信息（数据报没有准备好的情况下），此时当前进程可以做其它的事情，不用阻塞；<br><img src=\"http://static.iuxiao.com/image/2018/08/02/084f38ad3dd8e39a7acc29c13d624969.png\" alt=\"非阻塞IO\" title=\"非阻塞IO\"><br>从图中可以得知，前三次系统调用时都没有数据可以返回，内核均返回一个 EWOULDBLOCK，并且不会阻塞当前进程，直到第四次询问内核缓冲区是否有数据的时候，此时内核缓冲区中已经有一个准备好的数据，因此将内核数据复制到用户空间，此时系统调用则返回成功；</p>\n<p><em>当一个应用进程像这样对一个非阻塞socket循环调用 recv/recvfrom 时，则称为轮询；应用进程持续轮询内核，以查看某个操作是否就绪，这么做往往消耗大量的CPU时间。</em></p>\n<h4 id=\"h4-2-2-\"><a name=\"2.2 优点和缺点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.2 优点和缺点</h4><ul>\n<li><p>优点：相较于阻塞模型，非阻塞不用再等待任务，而是把时间花费到其它任务上，也就是这个当前线程同时处理多个任务；</p>\n</li><li><p>缺点：导致任务完成的响应延迟增大了，因为每隔一段时间才去执行询问的动作，但是任务可能在两个询问动作的时间间隔内完成，这会导致整体数据吞吐量的降低。</p>\n</li></ul>\n<h3 id=\"h3-3-io-\"><a name=\"3.IO多路复用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.IO多路复用</h3><h4 id=\"h4-3-1-\"><a name=\"3.1 介绍\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.1 介绍</h4><p>有了I/O复用，我们就可以调用 select或poll，让其阻塞在两个系统调用（1.询问数据是否准备好并且直到数据准备好才返回；2.内核是否把数据全部复制完成到用户进程）中的某一个之上<br><img src=\"http://static.iuxiao.com/image/2018/08/02/68b3e85c1bd5d6fe94b23c872d6c73e2.png\" alt=\"IO多路复用\" title=\"IO多路复用\"><br>图中阻塞于 select 调用，等待数据报套接字变为可读。当select返回套接字可读这一条件的时候，则调用 recvfrom 把所读数据报复制到应用进程缓冲区；</p>\n<p>之前的同步非阻塞方式需要用户进程不停的轮询，但是IO多路复用不需要不停的轮询，而是派别人去帮忙循环查询多个任务的完成状态，UNIX/Linux 下的 select、poll、epoll 就是干这个的；select调用是内核级别的，select轮询相对非阻塞的轮询的区别在于—-前者可以等待多个socket，能实现同时对多个IO端口进行监听，当其中任何一个socket的数据准好了，就能返回进行可读，然后进程再进行recvform系统调用，将数据由内核拷贝到用户进程，当然这个过程是阻塞的。select或poll调用之后，会阻塞进程，与blocking IO阻塞不同在于，此时的select不是等到socket数据全部到达再处理, 而是有了一部分数据（网络上的数据是分组到达的）就会调用用户进程来处理。如何知道有一部分数据到达了呢？监视的事情交给了内核，内核负责数据到达的处理。</p>\n<p>我认为上面那句话中存在两个重要点：1.对多个socket进行监听，只要任何一个socket数据准备好就返回可读；2.不等一个socket数据全部到达再处理，而是一部分socket的数据到达了就通知用户进程；</p>\n<p>其实 select、poll、epoll 的原理就是不断的遍历所负责的所有的socket完成状态，当某个socket有数据到达了，就返回可读并通知用户进程来处理；</p>\n<h4 id=\"h4-3-2-\"><a name=\"3.2 优点和缺点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.2 优点和缺点</h4><ul>\n<li>优点：能够同时处理多个连接，系统开销小，系统不需要创建新的额外进程或者线程，也不需要维护这些进程和线程的运行，降低了系统的维护工作量，节省了系统资源。</li><li>缺点：如果处理的连结数目不高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。（因为阻塞可以保证没有延迟，但是多路复用是处理先存在的数据，所以数据的顺序则不管，导致处理一个完整的任务的时间上有延迟）</li></ul>\n<h4 id=\"h4-3-3-\"><a name=\"3.3 同步非阻塞和多线程＋同步阻塞\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.3 同步非阻塞和多线程＋同步阻塞</h4><p>高并发的程序一般使用同步非阻塞方式而非多线程 + 同步阻塞方式。要理解这一点，首先要扯到并发和并行的区别。比如去某部门办事需要依次去几个窗口，办事大厅里的人数就是并发数，而窗口个数就是并行度。也就是说并发数是指同时进行的任务数（如同时服务的 HTTP 请求），而并行数是可以同时工作的物理资源数量（如 CPU 核数）。通过合理调度任务的不同阶段，并发数可以远远大于并行度，这就是区区几个 CPU 可以支持上万个用户并发请求的奥秘。在这种高并发的情况下，为每个任务（用户请求）创建一个进程或线程的开销非常大。而同步非阻塞方式可以把多个 IO 请求丢到后台去，这就可以在一个进程里服务大量的并发 IO 请求。</p>\n<h3 id=\"h3-4-i-o-\"><a name=\"4.信号驱动式I/O模型\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.信号驱动式I/O模型</h3><h4 id=\"h4-4-1-\"><a name=\"4.1 介绍\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.1 介绍</h4><p><img src=\"http://static.iuxiao.com/image/2018/08/02/c073edd7203afa079f52dc45d718ae22.png\" alt=\"信号驱动式I/O模型\" title=\"信号驱动式I/O模型\"><br>首先开启套接字的信号驱动式IO功能，并且通过 sigaction 系统调用安装一个信号处理函数，该函数调用将立即返回，当前进程没有被阻塞，继续工作；当数据报准备好的时候，内核则为该进程产生 SIGIO 的信号，随后既可以在信号处理函数中调用 recvfrom 读取数据报，并且通知主循环数据已经准备好等待处理，也可以通知主循环让它读取数据报；（其实就是一个待读取的通知和待处理的通知）；</p>\n<h2 id=\"h2--io\"><a name=\"异步IO\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>异步IO</h2><p><img src=\"http://static.iuxiao.com/image/2018/08/02/4fd143aa98c65c9bb7a562cd6428baa0.png\" alt=\"异步IO\" title=\"异步IO\"><br>我们调用 aio_read 函数，给内核传递描述符、缓冲区指针、缓冲区大小和文件偏移，并且告诉内核当整个操作完成时如何通知我们。该函数调用后立即返回，不被阻塞；<br><img src=\"http://static.iuxiao.com/image/2018/08/02/31293c114d4fcc62c6207ae6f6d0ff15.png\" alt=\"异步IO\" title=\"异步IO\"></p>\n<h1 id=\"h1-u6BD4u8F83\"><a name=\"比较\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>比较</h1><p><img src=\"http://static.iuxiao.com/image/2018/08/02/06efe125accec108f530d36605bf4352.png\" alt=\"同步异步，阻塞非阻塞比较\" title=\"同步异步，阻塞非阻塞比较\"></p>\n<p>原文地址：<a href=\"https://www.cnblogs.com/George1994/p/6702084.html\">https://www.cnblogs.com/George1994/p/6702084.html</a></p>\n', '同步和异步，阻塞和非阻塞是两组很容易混淆的概念，那么如何方便的理解他们，先看下面的例子说明。\n#例子\n**故事：老王烧开水**\n出场人物：老王，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。\n\n1.老王用水壶煮水，并且站在那里，不管水开没开，每隔一定时间看看水开了没。－同步阻塞\n\n2.老王还是用水壶煮水，不再傻傻的站在那里看水开，跑去寝室上网，但是还是会每隔一段时间过来看看水开了没有，水没有开就走人。－同步非阻塞\n\n3.老王这次使用高大上的响水壶来煮水，站在那里，但是不会再每隔一段时间去看水开，而是等水开了，水壶会自动的通知他。－异步阻塞\n\n4.老王还是使用响水壶煮水，跑到客厅上网去，等着响水壶自己把水煮熟了以后通知他。－异步非阻塞\n\n##同步和异步\n同步就是烧开水，需要自己去轮询（每隔一段时间去看看水开了没），异步就是水开了，然后水壶会通知你水已经开了，你可以回来处理这些开水了。\n同步和异步是相对于操作结果来说，会不会等待结果返回。\n##阻塞和非阻塞\n阻塞就是说在煮水的过程中，你不可以去干其他的事情，非阻塞就是在同样的情况下，可以同时去干其他的事情。阻塞和非阻塞是相对于线程是否被阻塞。\n## 说明\n其实，这两者存在本质的区别，它们的修饰对象是不同的。阻塞和非阻塞是指进程访问的数据如果尚未就绪，进程是否需要等待，简单说这相当于函数内部的实现区别，也就是未就绪时是直接返回还是等待就绪。\n而同步和异步是指访问数据的机制,同步一般指主动请求并等待I/O操作完毕的方式,当数据就绪后在读写的时候必须阻塞,异步则指主动请求数据后便可以继续处理其它任务,随后等待I/O,操作完毕的通知,这可以使进程在数据读写时也不阻塞。\n\n#网络IO的模型\n网络IO的模型大致包括下面几种\n+ 同步模型（synchronous IO）\n	* 阻塞IO（bloking IO）\n	* 非阻塞IO（non-blocking IO）\n	* 多路复用IO（multiplexing IO）\n	* 信号驱动式IO（signal-driven IO）\n+ 异步IO（asynchronous IO）\n\n网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。对于一次IO访问，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间，所以一般会经历两个阶段：\n\n1.等待所有数据都准备好或者一直在等待数据，有数据的时候将数据拷贝到系统内核；\n2.将内核缓存中数据拷贝到用户进程中；\n\n对于socket流而言：\n1.等待网络上的数据分组到达，然后被复制到内核的某个缓冲区；\n2.把数据从内核缓冲区复制到应用进程缓冲区中；\n\n##同步模型\n###1.阻塞IO\n####1.1 介绍\n这也是最常用的模型，默认情况下所有的套接字都是 阻塞 的；\n![阻塞IO](http://static.iuxiao.com/image/2018/08/02/bfc39b2e360cb0ab585d00d68b539ad7.png \"阻塞IO\")\n我们把recvfrom函数视为系统调用，因为我们正区分进程和内核，系统调用一般都会从在应用进程空间中运行切换到内核空间中运行，一段时间后又再切换回来；\n\n我们可以从图中看到，应用进程从 进行系统调用 到 复制数据报到应用进程的缓冲区完成 的整段时间内是被阻塞的；在这个过程中，要么正确到达，要么系统调用被信号打断；直到数据报被复制到用户进程完成后，用户进程才解除阻塞的状态，当然，这是用户进程自己进行的阻塞；\n\n####1.2 优点和缺点\n- 优点：能够及时返回数据，无延迟；方便调试；\n- 缺点：需要付出等待的代价；\n\n###2.非阻塞IO\n####2.1 介绍\n非阻塞，当所请求的I/O操作非得把当前进程设置成睡眠才能完成时，不要把当前进程设置成睡眠，而是返回一个错误信息（数据报没有准备好的情况下），此时当前进程可以做其它的事情，不用阻塞；\n![非阻塞IO](http://static.iuxiao.com/image/2018/08/02/084f38ad3dd8e39a7acc29c13d624969.png \"非阻塞IO\")\n从图中可以得知，前三次系统调用时都没有数据可以返回，内核均返回一个 EWOULDBLOCK，并且不会阻塞当前进程，直到第四次询问内核缓冲区是否有数据的时候，此时内核缓冲区中已经有一个准备好的数据，因此将内核数据复制到用户空间，此时系统调用则返回成功；\n\n*当一个应用进程像这样对一个非阻塞socket循环调用 recv/recvfrom 时，则称为轮询；应用进程持续轮询内核，以查看某个操作是否就绪，这么做往往消耗大量的CPU时间。*\n\n####2.2 优点和缺点\n- 优点：相较于阻塞模型，非阻塞不用再等待任务，而是把时间花费到其它任务上，也就是这个当前线程同时处理多个任务；\n\n- 缺点：导致任务完成的响应延迟增大了，因为每隔一段时间才去执行询问的动作，但是任务可能在两个询问动作的时间间隔内完成，这会导致整体数据吞吐量的降低。\n\n###3.IO多路复用\n####3.1 介绍\n有了I/O复用，我们就可以调用 select或poll，让其阻塞在两个系统调用（1.询问数据是否准备好并且直到数据准备好才返回；2.内核是否把数据全部复制完成到用户进程）中的某一个之上\n![IO多路复用](http://static.iuxiao.com/image/2018/08/02/68b3e85c1bd5d6fe94b23c872d6c73e2.png \"IO多路复用\")\n图中阻塞于 select 调用，等待数据报套接字变为可读。当select返回套接字可读这一条件的时候，则调用 recvfrom 把所读数据报复制到应用进程缓冲区；\n\n之前的同步非阻塞方式需要用户进程不停的轮询，但是IO多路复用不需要不停的轮询，而是派别人去帮忙循环查询多个任务的完成状态，UNIX/Linux 下的 select、poll、epoll 就是干这个的；select调用是内核级别的，select轮询相对非阻塞的轮询的区别在于---前者可以等待多个socket，能实现同时对多个IO端口进行监听，当其中任何一个socket的数据准好了，就能返回进行可读，然后进程再进行recvform系统调用，将数据由内核拷贝到用户进程，当然这个过程是阻塞的。select或poll调用之后，会阻塞进程，与blocking IO阻塞不同在于，此时的select不是等到socket数据全部到达再处理, 而是有了一部分数据（网络上的数据是分组到达的）就会调用用户进程来处理。如何知道有一部分数据到达了呢？监视的事情交给了内核，内核负责数据到达的处理。\n\n我认为上面那句话中存在两个重要点：1.对多个socket进行监听，只要任何一个socket数据准备好就返回可读；2.不等一个socket数据全部到达再处理，而是一部分socket的数据到达了就通知用户进程；\n\n其实 select、poll、epoll 的原理就是不断的遍历所负责的所有的socket完成状态，当某个socket有数据到达了，就返回可读并通知用户进程来处理；\n\n####3.2 优点和缺点\n- 优点：能够同时处理多个连接，系统开销小，系统不需要创建新的额外进程或者线程，也不需要维护这些进程和线程的运行，降低了系统的维护工作量，节省了系统资源。\n- 缺点：如果处理的连结数目不高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。（因为阻塞可以保证没有延迟，但是多路复用是处理先存在的数据，所以数据的顺序则不管，导致处理一个完整的任务的时间上有延迟）\n\n####3.3 同步非阻塞和多线程＋同步阻塞\n高并发的程序一般使用同步非阻塞方式而非多线程 + 同步阻塞方式。要理解这一点，首先要扯到并发和并行的区别。比如去某部门办事需要依次去几个窗口，办事大厅里的人数就是并发数，而窗口个数就是并行度。也就是说并发数是指同时进行的任务数（如同时服务的 HTTP 请求），而并行数是可以同时工作的物理资源数量（如 CPU 核数）。通过合理调度任务的不同阶段，并发数可以远远大于并行度，这就是区区几个 CPU 可以支持上万个用户并发请求的奥秘。在这种高并发的情况下，为每个任务（用户请求）创建一个进程或线程的开销非常大。而同步非阻塞方式可以把多个 IO 请求丢到后台去，这就可以在一个进程里服务大量的并发 IO 请求。\n\n###4.信号驱动式I/O模型\n####4.1 介绍\n![信号驱动式I/O模型](http://static.iuxiao.com/image/2018/08/02/c073edd7203afa079f52dc45d718ae22.png \"信号驱动式I/O模型\")\n首先开启套接字的信号驱动式IO功能，并且通过 sigaction 系统调用安装一个信号处理函数，该函数调用将立即返回，当前进程没有被阻塞，继续工作；当数据报准备好的时候，内核则为该进程产生 SIGIO 的信号，随后既可以在信号处理函数中调用 recvfrom 读取数据报，并且通知主循环数据已经准备好等待处理，也可以通知主循环让它读取数据报；（其实就是一个待读取的通知和待处理的通知）；\n\n##异步IO\n![异步IO](http://static.iuxiao.com/image/2018/08/02/4fd143aa98c65c9bb7a562cd6428baa0.png \"异步IO\")\n我们调用 aio_read 函数，给内核传递描述符、缓冲区指针、缓冲区大小和文件偏移，并且告诉内核当整个操作完成时如何通知我们。该函数调用后立即返回，不被阻塞；\n![异步IO](http://static.iuxiao.com/image/2018/08/02/31293c114d4fcc62c6207ae6f6d0ff15.png \"异步IO\")\n\n#比较\n![同步异步，阻塞非阻塞比较](http://static.iuxiao.com/image/2018/08/02/06efe125accec108f530d36605bf4352.png \"同步异步，阻塞非阻塞比较\")\n\n原文地址：[https://www.cnblogs.com/George1994/p/6702084.html](https://www.cnblogs.com/George1994/p/6702084.html)\n', '2018-07-31 22:09:50', '2020-08-09 10:21:43', 825, 1);
INSERT INTO `bg_article` VALUES (20, 'xx', '1552899461', 'xxx', 'xx', '', '<p><img src=\"http://static.iuxiao.com/image/2019/03/18/ec7bc4aa8fb2fd2d0b5a6a0c5737a4466bc88187.png\" alt=\"\"></p>\n', '![](http://static.iuxiao.com/image/2019/03/18/ec7bc4aa8fb2fd2d0b5a6a0c5737a4466bc88187.png)', '2019-03-18 16:57:41', '2019-04-24 14:21:25', 5, -1);
INSERT INTO `bg_article` VALUES (21, '记服务器迁移，由阿里云全面转移至腾讯云', '1553006649', '记服务器迁移，由阿里云全面转移至腾讯云', '服务器迁移,OSS,阿里云,腾讯云', '', '<p>记服务器迁移，由阿里云全面转移至腾讯云</p>\n', '记服务器迁移，由阿里云全面转移至腾讯云', '2019-03-19 22:44:09', '2019-03-19 22:46:10', 1, 0);
INSERT INTO `bg_article` VALUES (22, '微信APP支付，Java服务端开发及遇到的坑', '1553006729', '微信APP支付，Java服务端开发及遇到的坑', '微信,微信支付,APP支付,JAVA', '', '<p>微信APP支付，Java服务端开发及遇到的坑</p>\n<p>支付流程</p>\n<p>相关key</p>\n<p>建立预订单</p>\n<p>签名数据后返回APP【各种坑】</p>\n<p>回调完成业务</p>\n', '微信APP支付，Java服务端开发及遇到的坑\n\n支付流程\n\n相关key\n\n建立预订单\n\n签名数据后返回APP【各种坑】\n\n回调完成业务\n\n', '2019-03-19 22:45:29', '2019-07-19 16:00:13', 118, 0);
INSERT INTO `bg_article` VALUES (23, '三方APP登录之QQ授权登录，IOS和android的openid不一致导致同一QQ用户出现两个账号的坑', '1553071937', '三方APP登录之QQ授权登录，IOS和android的openid不一致导致同一QQ用户出现两个账号的坑，让同一QQ用户使用苹果和安卓机登录会在系统中只有一个账号，即保证两端的openID一致', '三方APP登录之QQ授权登录，IOS和android的openid不一致导致同一QQ用户出现两个账号的坑', '', '<h1 id=\"h1-u95EEu9898\"><a name=\"问题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>问题</h1><p>在开发APP三方授权登录时，遇到了一个奇怪的问题，微博和微信三方登录是没有任何问题的，在同一个开放平台下的IOS和Andorid应用使用的是相同的APPID和appSecret。</p>\n<p>但是在QQ授权登录时就遇到了两个APP系统获得的opendid不一致，导致同一QQ用户使用苹果和安卓机登录会在系统中出现两个账号，而业务的需要的是只有一个账号</p>\n<h1 id=\"h1-u76EEu7684\"><a name=\"目的\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>目的</h1><p>让同一QQ用户使用苹果和安卓机登录会在系统中只有一个账号，即保证两端的openID一致</p>\n<p>注：此方法只适用于未上线应用</p>\n<h1 id=\"h1-u539Fu56E0\"><a name=\"原因\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>原因</h1><p>在腾讯开放平台中，安卓同学创建了一个安卓应用，然后，重点来了，IOS同学直接点击左侧的IOS菜单然后创建了一个IOS应用，这里就导致两个应用的APPID是不一致的，造成最终的授权登录获取到的openid不一致。</p>\n<h1 id=\"h1-u89E3u51B3u65B9u6CD5\"><a name=\"解决方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>解决方法</h1><p><img src=\"http://static.iuxiao.com/image/2019/03/20/4fe76d7fb1dcfbc8c20013a0252312fb2984d398.png\" alt=\"\"></p>\n<p>首先创建安卓应用，然后进入该安卓应用，填写相关信息就不展示了，按照规则填写即可。</p>\n<p><img src=\"http://static.iuxiao.com/image/2019/03/20/dac991b070ef48bed13873663567627a15d750f7.png\" alt=\"\"></p>\n<p>这里就是重点了，鼠标移动到右侧的平台信息上，会显示一个下拉框，这里应为我已经建立了IOS应用（在安卓应用下创建），所以会显示已获得登录能力，未创建时提示点击创建，点击过后就进入IOS应用创建界面。</p>\n<p><img src=\"http://static.iuxiao.com/image/2019/03/20/bf41113c79472e4d0572c9072e7c9ce75677cf95.png\" alt=\"\"></p>\n<p>这里可以明显的看到APPID 和 APPKEY 已经和安卓应用的保持一致了，提交审核即可，这里审核比较快，我这里10分钟左右就通过了审核。</p>\n<p>对于已经上线的应用可以向腾讯客服进行申请，具体没有操作过，参考网上同学的帖子就行</p>\n<p><a href=\"https://segmentfault.com/q/1010000009351513/a-1020000009351629?tdsourcetag=s_pctim_aiomsg\">https://segmentfault.com/q/1010000009351513/a-1020000009351629?tdsourcetag=s_pctim_aiomsg</a></p>\n', '\n#问题\n\n在开发APP三方授权登录时，遇到了一个奇怪的问题，微博和微信三方登录是没有任何问题的，在同一个开放平台下的IOS和Andorid应用使用的是相同的APPID和appSecret。\n\n但是在QQ授权登录时就遇到了两个APP系统获得的opendid不一致，导致同一QQ用户使用苹果和安卓机登录会在系统中出现两个账号，而业务的需要的是只有一个账号\n#目的\n\n让同一QQ用户使用苹果和安卓机登录会在系统中只有一个账号，即保证两端的openID一致\n\n注：此方法只适用于未上线应用\n\n#原因\n\n在腾讯开放平台中，安卓同学创建了一个安卓应用，然后，重点来了，IOS同学直接点击左侧的IOS菜单然后创建了一个IOS应用，这里就导致两个应用的APPID是不一致的，造成最终的授权登录获取到的openid不一致。\n\n#解决方法\n\n![](http://static.iuxiao.com/image/2019/03/20/4fe76d7fb1dcfbc8c20013a0252312fb2984d398.png)\n\n首先创建安卓应用，然后进入该安卓应用，填写相关信息就不展示了，按照规则填写即可。\n\n![](http://static.iuxiao.com/image/2019/03/20/dac991b070ef48bed13873663567627a15d750f7.png)\n\n这里就是重点了，鼠标移动到右侧的平台信息上，会显示一个下拉框，这里应为我已经建立了IOS应用（在安卓应用下创建），所以会显示已获得登录能力，未创建时提示点击创建，点击过后就进入IOS应用创建界面。\n\n![](http://static.iuxiao.com/image/2019/03/20/bf41113c79472e4d0572c9072e7c9ce75677cf95.png)\n\n这里可以明显的看到APPID 和 APPKEY 已经和安卓应用的保持一致了，提交审核即可，这里审核比较快，我这里10分钟左右就通过了审核。\n\n对于已经上线的应用可以向腾讯客服进行申请，具体没有操作过，参考网上同学的帖子就行\n\nhttps://segmentfault.com/q/1010000009351513/a-1020000009351629?tdsourcetag=s_pctim_aiomsg\n\n', '2019-03-20 16:52:17', '2020-08-10 19:07:11', 1339, 1);
INSERT INTO `bg_article` VALUES (24, 'PayPal web(PC)  sandbox 支付开发，PHP语言', '1556010735', 'paypal web php sandbox 开发', 'paypal,web,php,sandbox', '', '<blockquote>\n<p>这是一个悲伤的故事，项目需要拓展海外业务，使用paypal进行支付，虽然说流程和支付宝等类似，但是，里面一大堆的坑，踩的人太酸爽了。在这里记录下来</p>\n</blockquote>\n<h1 id=\"h1-u8D26u53F7u76F8u5173\"><a name=\"账号相关\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>账号相关</h1><p>首先在官网上进行注册，流程很简单，我这里注册的是个人用户，使用其自带的沙盒环境进行开发测试，企业用户没有尝试过。</p>\n<p>官网地址：<a href=\"https://www.paypal.com\">https://www.paypal.com</a></p>\n<p>开发平台地址：<a href=\"https://developer.paypal.com/\">https://developer.paypal.com/</a></p>\n<p>注册完成后登陆开发平台。进入my account页面：</p>\n<p><img src=\"http://static.iuxiao.com/image/2019/04/23/33a7e45582d2776f1a929baf005c40f2b03ac2f7.png\" alt=\"\"></p>\n<p>账号里面自动在沙盒中给你创建了两个账号，一个测试商户，一个测试买家。点击左侧SANDBOX菜单下的Accounts即可看到。里面的第一个账号是我自己建的，忽略即可，第二个是商家号，第三个是买家号。</p>\n<p><img src=\"http://static.iuxiao.com/image/2019/04/23/2da39e0ddd81f4467574a668a1cbf57e2fe8facb.png\" alt=\"\"></p>\n<p>如需登录商家号和买家号，需要在沙盒地址登录：<a href=\"https://www.sandbox.paypal.com\">https://www.sandbox.paypal.com</a> ，密码可以展开账号信息，点击profile进行设置，里面还有很多其他的设置，其他设置保持初始状态即可。买家号里面初始9999美刀，随便花！</p>\n<h1 id=\"h1-u5F00u53D1u76F8u5173\"><a name=\"开发相关\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>开发相关</h1><p>流程：</p>\n<ol>\n<li>创建商户订单</li><li>执行支付</li><li>完成支付（前端页面跳转，后台异步通知）</li></ol>\n<h4 id=\"h4--\"><a name=\"商户订单由用户自己建立就可，这里不做记录\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>商户订单由用户自己建立就可，这里不做记录</h4><h4 id=\"h4--html-\"><a name=\"创建一个html文件，进行订单支付操作:\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>创建一个html文件，进行订单支付操作:</h4><pre><code class=\"lang-html\">&lt;form name=&quot;paypal&quot; action=&quot;https://www.sandbox.paypal.com/cgi-bin/webscr&quot; method=&quot;post&quot;&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;cmd&quot; value=&quot;_xclick&quot;&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;business&quot; value=&quot;hexxx-facilitator@163.com&quot;&gt; &lt;!-- 商户账号 --&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;notify_url&quot; value=&quot;https://xxx.com/notify_url&quot;&gt; &lt;!-- 异步回调地址 --&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;return&quot; value=&quot;https://xxx.com/return_url&quot;&gt; &lt;!-- 浏览器跳转地址 --&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;cancel_return&quot; value=&quot;https://xxx.com/cancel_url?&quot;&gt; &lt;!-- 取消跳转地址 --&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;amount&quot; value=&quot;0.01&quot;&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;currency_code&quot; value=&quot;USD&quot;&gt; &lt;!-- 这里是美元 --&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;item_name&quot; value=&quot;订单名&quot;&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;item_number&quot; value=&quot;商户订单号&quot;&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;on0&quot; value=&quot;附加参数on0&quot;&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;os0&quot; value=&quot;附加参数os0&quot;&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;on1&quot; value=&quot;附加参数on1&quot;&gt;\n   &lt;input type=&quot;hidden&quot; name=&quot;os1&quot; value=&quot;附加参数os1&quot;&gt;\n  &lt;/form&gt;\n&lt;script&gt;paypal.submit()&lt;/script&gt;\n</code></pre>\n<p>提交请求过后这里会跳转到沙盒支付环境，登录买家号进行支付即可。然后确认支付即可。这里是直接前端拼的页面，保险的做法是放到服务器段进行拼接后，然后echo出来就行。</p>\n<p><img src=\"http://static.iuxiao.com/image/2019/04/23/8bf1a5f11e41fd57dfb0fe9a0464624b8d68632e.png\" alt=\"\"></p>\n<h4 id=\"h4-u5F00u53D1u5F02u6B65u901Au77E5u63A5u53E3\"><a name=\"开发异步通知接口\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>开发异步通知接口</h4><p>paypal异步回调你的接口，你需要把它的数据拼上 cmd=_notify-validate 后原样请求回去即可查询当前订单是否合法。之前在网上找的 fsockopen之类的完全没法用，各种错误，比如302、400、conn close、空白响应等等。</p>\n<p>最后终于找到了一个老哥的代码，下面贴出来，一系列操作弄得脑壳疼。paypal会根据你的HTTP码判断是否还要继续通知你，所以下面处理失败我就返回400错误，保证后面还会有异步通知。</p>\n<p>卖家号登录沙盒环境设置及时付款通知（踩坑里面有相关设置项图片），设置上自己的异步通知地址：https：//xxx/notify_url</p>\n<pre><code class=\"lang-php\">public function notify()\n{\n    $req = &#39;cmd=_notify-validate&#39;;\n    if (function_exists(&#39;get_magic_quotes_gpc&#39;)) $get_magic_quotes_exists = true;\n    foreach ($_POST as $key =&gt; $value) {\n        if ($get_magic_quotes_exists == true &amp;&amp; get_magic_quotes_gpc() == 1) {\n            $value = urlencode(stripslashes($value));\n        } else {\n            $value = urlencode($value);\n        }\n        $req .= &quot;&amp;$key=$value&quot;;\n    }\n    $ch = curl_init(&#39;https://www.sandbox.paypal.com/cgi-bin/webscr&#39;);\n    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $req);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(&#39;Connection: Close&#39;));\n    $res = curl_exec($ch);\n    $this-&gt;notifyLog-&gt;addLog(&#39;查询返回&#39;, $res);\n    if (strcmp($res, &quot;VERIFIED&quot;) == 0) {\n        // 检查付款状态\n        // 检查receiver_email是否是您的PayPal账户中的EMAIL地址\n        // 检查付款金额和货币单位是否正确\n        // 检查商户订单业务是否已处理\n        // 处理业务逻辑\n        return true;\n    } else if (strcmp($res, &quot;INVALID&quot;) == 0) {\n        http_response_code(400);\n        return false;\n    }\n}\n</code></pre>\n<h1 id=\"h1-u8E29u5751u603Bu7ED3\"><a name=\"踩坑总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>踩坑总结</h1><p>1、在异步通知时总是返回INVALID状态：这里是通知的数据里面payment_status一直是Pedding状态，这里需要的是Completed状态。因为我之前在开发者中心设置了卖家号的Payment Review为ON状态，设置为OFF搞定。</p>\n<p><img src=\"http://static.iuxiao.com/image/2019/04/23/5d9c3133c2b6ccbb3ed4a76d26e20fbe5136593c.png\" alt=\"\"></p>\n<p>2、在异步通知时总是返回INVALID状态：我这里遇到的是编码问题，使用卖家号登陆进行编码设置即可。我设置为UTF-8，点击齿轮设置按钮，销售工具栏，最下面有个 “PayPal按钮语言编码” 进入设置即可。</p>\n<p><img src=\"http://static.iuxiao.com/image/2019/04/23/d2511292c70d194697ffa2bc2a2f4488ad86df3a.png\" alt=\"\"></p>\n', '> 这是一个悲伤的故事，项目需要拓展海外业务，使用paypal进行支付，虽然说流程和支付宝等类似，但是，里面一大堆的坑，踩的人太酸爽了。在这里记录下来\n\n#账号相关\n\n首先在官网上进行注册，流程很简单，我这里注册的是个人用户，使用其自带的沙盒环境进行开发测试，企业用户没有尝试过。\n\n官网地址：[https://www.paypal.com](https://www.paypal.com)\n\n开发平台地址：[https://developer.paypal.com/](https://developer.paypal.com/)\n\n注册完成后登陆开发平台。进入my account页面：\n\n![](http://static.iuxiao.com/image/2019/04/23/33a7e45582d2776f1a929baf005c40f2b03ac2f7.png)\n\n\n账号里面自动在沙盒中给你创建了两个账号，一个测试商户，一个测试买家。点击左侧SANDBOX菜单下的Accounts即可看到。里面的第一个账号是我自己建的，忽略即可，第二个是商家号，第三个是买家号。\n\n![](http://static.iuxiao.com/image/2019/04/23/2da39e0ddd81f4467574a668a1cbf57e2fe8facb.png)\n\n如需登录商家号和买家号，需要在沙盒地址登录：[https://www.sandbox.paypal.com](https://www.sandbox.paypal.com) ，密码可以展开账号信息，点击profile进行设置，里面还有很多其他的设置，其他设置保持初始状态即可。买家号里面初始9999美刀，随便花！\n\n#开发相关\n\n流程：\n1. 创建商户订单\n2. 执行支付\n3. 完成支付（前端页面跳转，后台异步通知）\n\n####商户订单由用户自己建立就可，这里不做记录\n\n####创建一个html文件，进行订单支付操作:\n\n```html\n<form name=\"paypal\" action=\"https://www.sandbox.paypal.com/cgi-bin/webscr\" method=\"post\">\n   <input type=\"hidden\" name=\"cmd\" value=\"_xclick\">\n   <input type=\"hidden\" name=\"business\" value=\"hexxx-facilitator@163.com\"> <!-- 商户账号 -->\n   <input type=\"hidden\" name=\"notify_url\" value=\"https://xxx.com/notify_url\"> <!-- 异步回调地址 -->\n   <input type=\"hidden\" name=\"return\" value=\"https://xxx.com/return_url\"> <!-- 浏览器跳转地址 -->\n   <input type=\"hidden\" name=\"cancel_return\" value=\"https://xxx.com/cancel_url?\"> <!-- 取消跳转地址 -->\n   <input type=\"hidden\" name=\"amount\" value=\"0.01\">\n   <input type=\"hidden\" name=\"currency_code\" value=\"USD\"> <!-- 这里是美元 -->\n   <input type=\"hidden\" name=\"item_name\" value=\"订单名\">\n   <input type=\"hidden\" name=\"item_number\" value=\"商户订单号\">\n   <input type=\"hidden\" name=\"on0\" value=\"附加参数on0\">\n   <input type=\"hidden\" name=\"os0\" value=\"附加参数os0\">\n   <input type=\"hidden\" name=\"on1\" value=\"附加参数on1\">\n   <input type=\"hidden\" name=\"os1\" value=\"附加参数os1\">\n  </form>\n<script>paypal.submit()</script>\n```\n\n提交请求过后这里会跳转到沙盒支付环境，登录买家号进行支付即可。然后确认支付即可。这里是直接前端拼的页面，保险的做法是放到服务器段进行拼接后，然后echo出来就行。\n\n![](http://static.iuxiao.com/image/2019/04/23/8bf1a5f11e41fd57dfb0fe9a0464624b8d68632e.png)\n\n#### 开发异步通知接口\n\npaypal异步回调你的接口，你需要把它的数据拼上 cmd=_notify-validate 后原样请求回去即可查询当前订单是否合法。之前在网上找的 fsockopen之类的完全没法用，各种错误，比如302、400、conn close、空白响应等等。\n\n最后终于找到了一个老哥的代码，下面贴出来，一系列操作弄得脑壳疼。paypal会根据你的HTTP码判断是否还要继续通知你，所以下面处理失败我就返回400错误，保证后面还会有异步通知。\n\n卖家号登录沙盒环境设置及时付款通知（踩坑里面有相关设置项图片），设置上自己的异步通知地址：https：//xxx/notify_url\n\n```php\npublic function notify()\n{\n    $req = \'cmd=_notify-validate\';\n    if (function_exists(\'get_magic_quotes_gpc\')) $get_magic_quotes_exists = true;\n    foreach ($_POST as $key => $value) {\n        if ($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1) {\n            $value = urlencode(stripslashes($value));\n        } else {\n            $value = urlencode($value);\n        }\n        $req .= \"&$key=$value\";\n    }\n    $ch = curl_init(\'https://www.sandbox.paypal.com/cgi-bin/webscr\');\n    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);\n    curl_setopt($ch, CURLOPT_POST, 1);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $req);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n    curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);\n    curl_setopt($ch, CURLOPT_HTTPHEADER, array(\'Connection: Close\'));\n    $res = curl_exec($ch);\n    $this->notifyLog->addLog(\'查询返回\', $res);\n    if (strcmp($res, \"VERIFIED\") == 0) {\n        // 检查付款状态\n        // 检查receiver_email是否是您的PayPal账户中的EMAIL地址\n        // 检查付款金额和货币单位是否正确\n        // 检查商户订单业务是否已处理\n        // 处理业务逻辑\n        return true;\n    } else if (strcmp($res, \"INVALID\") == 0) {\n    	http_response_code(400);\n        return false;\n    }\n}\n```\n\n#踩坑总结\n\n1、在异步通知时总是返回INVALID状态：这里是通知的数据里面payment_status一直是Pedding状态，这里需要的是Completed状态。因为我之前在开发者中心设置了卖家号的Payment Review为ON状态，设置为OFF搞定。\n\n![](http://static.iuxiao.com/image/2019/04/23/5d9c3133c2b6ccbb3ed4a76d26e20fbe5136593c.png)\n\n2、在异步通知时总是返回INVALID状态：我这里遇到的是编码问题，使用卖家号登陆进行编码设置即可。我设置为UTF-8，点击齿轮设置按钮，销售工具栏，最下面有个 “PayPal按钮语言编码” 进入设置即可。\n\n![](http://static.iuxiao.com/image/2019/04/23/d2511292c70d194697ffa2bc2a2f4488ad86df3a.png)\n\n\n\n\n', '2019-04-23 17:12:15', '2020-08-08 19:01:04', 1203, 1);
INSERT INTO `bg_article` VALUES (25, 'Nginx 配置Https 443，同时启用http/https，强制http跳转https', '1556077580', 'https逐步进入主流，而且最近测试代码需要域名地址也是https的，所以在这里记录下配置nginx：Nginx 配置Https 443，同时启用http/https，强制http跳转https', 'Nginx,Https,443', '', '<h1 id=\"h1-nginx-https\"><a name=\"NGINX 配置 HTTPS\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>NGINX 配置 HTTPS</h1><p>由于服务器使用的是阿里云的服务器，域名也是阿里云的，所以在阿里云上面免费申请了个https证书，如何申请这里不做详解。</p>\n<p>首先上传证书，我是上传到 /user/local/nginx/conf/ssl 下面的。<br>相关配置,该配置支持http和https访问：</p>\n<pre><code>server {\n\n    listen 80;\n    listen 443 ssl;\n    #ssl on; #注释掉，否则80端口不生效\n    ssl_certificate      /usr/local/nginx/conf/ssl/www.iuxiao.com.pem;\n    ssl_certificate_key  /usr/local/nginx/conf/ssl/www.iuxiao.com.key;\n    ssl_session_timeout  5m;\n    ssl_protocols  SSLv3 TLSv1;\n    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n    ssl_prefer_server_ciphers  on;\n\n    server_name  www.ixxxuxiao.com iuxiao.com;\n    root /xxx/public/;\n    index  index.html index.htm index.php;\n    access_log  /data/log/api.access.log;\n\n    location / {\n        if ( -f $request_filename) {\n            break;\n        }\n        #隐藏index.php\n        if ( !-e $request_filename) {\n            rewrite ^(.*)$ /index.php/$1 last;\n            break;\n        }\n     }\n\n     location ~ \\.php {\n        fastcgi_pass                  unix:/dev/shm/php-fpm.sock; #socket方式\n        fastcgi_split_path_info       ^((?U).+.php)(/?.+)$;\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n     }\n}\n</code></pre><h1 id=\"h1--hppt-https\"><a name=\"配置HPPT强制跳转HTTPS\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置HPPT强制跳转HTTPS</h1><p>在上面配置中加入如下代码即可：</p>\n<pre><code>if ( $scheme = http ) {\n        rewrite ^(.*)$  https://$host$1 permanent;\n}\n</code></pre><p>这里因为80、443在同一个server里面故使用上面一个判断进行强制跳转，若是80/443在不同的server里面则在80的server里面去掉if判断即可。</p>\n', '# NGINX 配置 HTTPS\n\n由于服务器使用的是阿里云的服务器，域名也是阿里云的，所以在阿里云上面免费申请了个https证书，如何申请这里不做详解。\n\n首先上传证书，我是上传到 /user/local/nginx/conf/ssl 下面的。\n相关配置,该配置支持http和https访问：\n\n```\nserver {\n\n    listen 80;\n    listen 443 ssl;\n    #ssl on; #注释掉，否则80端口不生效\n    ssl_certificate      /usr/local/nginx/conf/ssl/www.iuxiao.com.pem;\n    ssl_certificate_key  /usr/local/nginx/conf/ssl/www.iuxiao.com.key;\n    ssl_session_timeout  5m;\n    ssl_protocols  SSLv3 TLSv1;\n    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n    ssl_prefer_server_ciphers  on;\n\n    server_name  www.ixxxuxiao.com iuxiao.com;\n    root /xxx/public/;\n    index  index.html index.htm index.php;\n    access_log  /data/log/api.access.log;\n\n    location / {\n        if ( -f $request_filename) {\n            break;\n        }\n		#隐藏index.php\n        if ( !-e $request_filename) {\n            rewrite ^(.*)$ /index.php/$1 last;\n            break;\n        }\n     }\n\n     location ~ \\.php {\n        fastcgi_pass                  unix:/dev/shm/php-fpm.sock; #socket方式\n        fastcgi_split_path_info       ^((?U).+.php)(/?.+)$;\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n     }\n}\n```\n\n# 配置HPPT强制跳转HTTPS\n\n在上面配置中加入如下代码即可：\n\n```\nif ( $scheme = http ) {\n        rewrite ^(.*)$  https://$host$1 permanent;\n}\n```\n\n这里因为80、443在同一个server里面故使用上面一个判断进行强制跳转，若是80/443在不同的server里面则在80的server里面去掉if判断即可。\n\n', '2019-04-24 11:46:20', '2020-08-03 06:09:25', 888, 1);
INSERT INTO `bg_article` VALUES (26, 'NGINX 常用内置变量', '1556087918', 'NGINX 常用内置变量说明，记录下来便于自己查阅！', 'NGINX,常用,内置变量,记录', '', '<blockquote>\n<p>官网变量说明：<a href=\"http://nginx.org/en/docs/varindex.html\">http://nginx.org/en/docs/varindex.html</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>KEY</th>\n<th>NOTE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$args</td>\n<td>请求中的参数值</td>\n</tr>\n<tr>\n<td>$query_string</td>\n<td>同$args</td>\n</tr>\n<tr>\n<td>$arg_NAME</td>\n<td>GET请求中NAME的值</td>\n</tr>\n<tr>\n<td>$is_args</td>\n<td>如果请求中有参数，值为”?”，否则为空字符串</td>\n</tr>\n<tr>\n<td>$uri</td>\n<td>请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</td>\n</tr>\n<tr>\n<td>$document_uri</td>\n<td>同$uri</td>\n</tr>\n<tr>\n<td>$document_root</td>\n<td>当前请求的文档根目录或别名</td>\n</tr>\n<tr>\n<td>$host</td>\n<td>优先级：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名</td>\n</tr>\n<tr>\n<td>$hostname</td>\n<td>主机名</td>\n</tr>\n<tr>\n<td>$https</td>\n<td>如果开启了SSL安全模式，值为”on”，否则为空字符串。</td>\n</tr>\n<tr>\n<td>$binary_remote_addr</td>\n<td>客户端地址的二进制形式，固定长度为4个字节</td>\n</tr>\n<tr>\n<td>$body_bytes_sent</td>\n<td>传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的”%B”参数保持兼容</td>\n</tr>\n<tr>\n<td>$bytes_sent</td>\n<td>传输给客户端的字节数</td>\n</tr>\n<tr>\n<td>$connection</td>\n<td>TCP连接的序列号</td>\n</tr>\n<tr>\n<td>$connection_requests</td>\n<td>TCP连接当前的请求数量</td>\n</tr>\n<tr>\n<td>$content_length</td>\n<td>“Content-Length” 请求头字段</td>\n</tr>\n<tr>\n<td>$content_type</td>\n<td>“Content-Type” 请求头字段</td>\n</tr>\n<tr>\n<td>$cookie_name</td>\n<td>cookie名称</td>\n</tr>\n<tr>\n<td>$limit_rate</td>\n<td>用于设置响应的速度限制</td>\n</tr>\n<tr>\n<td>$msec</td>\n<td>当前的Unix时间戳</td>\n</tr>\n<tr>\n<td>$nginx_version</td>\n<td>nginx版本</td>\n</tr>\n<tr>\n<td>$pid</td>\n<td>工作进程的PID</td>\n</tr>\n<tr>\n<td>$pipe</td>\n<td>如果请求来自管道通信，值为”p”，否则为”.”</td>\n</tr>\n<tr>\n<td>$proxy_protocol_addr</td>\n<td>获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</td>\n</tr>\n<tr>\n<td>$realpath_root</td>\n<td>当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</td>\n</tr>\n<tr>\n<td>$remote_addr</td>\n<td>客户端地址</td>\n</tr>\n<tr>\n<td>$remote_port</td>\n<td>客户端端口</td>\n</tr>\n<tr>\n<td>$remote_user</td>\n<td>用于HTTP基础认证服务的用户名</td>\n</tr>\n<tr>\n<td>$request</td>\n<td>代表客户端的请求地址</td>\n</tr>\n<tr>\n<td>$request_body</td>\n<td>客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</td>\n</tr>\n<tr>\n<td>$request_body_file</td>\n<td>将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</td>\n</tr>\n<tr>\n<td>$request_completion</td>\n<td>如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</td>\n</tr>\n<tr>\n<td>$request_filename</td>\n<td>当前连接请求的文件路径，由root或alias指令与URI请求生成</td>\n</tr>\n<tr>\n<td>$request_length</td>\n<td>请求的长度 (包括请求的地址，http请求头和请求主体)</td>\n</tr>\n<tr>\n<td>$request_method</td>\n<td>HTTP请求方法，通常为”GET”或”POST”</td>\n</tr>\n<tr>\n<td>$request_time</td>\n<td>处理客户端请求使用的时间; 从读取客户端的第一个字节开始计时</td>\n</tr>\n<tr>\n<td>$request_uri</td>\n<td>这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”</td>\n</tr>\n<tr>\n<td>$scheme</td>\n<td>请求使用的Web协议，”http” 或 “https”</td>\n</tr>\n<tr>\n<td>$server_addr</td>\n<td>服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</td>\n</tr>\n<tr>\n<td>$server_name</td>\n<td>服务器名</td>\n</tr>\n<tr>\n<td>$server_port</td>\n<td>服务器端口</td>\n</tr>\n<tr>\n<td>$server_protocol</td>\n<td>服务器的HTTP版本，通常为 “HTTP/1.0” 或 “HTTP/1.1”</td>\n</tr>\n<tr>\n<td>$status</td>\n<td>HTTP响应代码</td>\n</tr>\n<tr>\n<td>$time_iso8601</td>\n<td>服务器时间的ISO 8610格式</td>\n</tr>\n<tr>\n<td>$time_local</td>\n<td>服务器时间（LOG Format 格式）</td>\n</tr>\n<tr>\n<td>$cookie_NAME</td>\n<td>客户端请求Header头中的cookie变量，前缀”$cookie_”加上cookie名称的变量，该变量的值即为cookie名称的值</td>\n</tr>\n<tr>\n<td>$http_NAME</td>\n<td>匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：”Accept-Language”，$http_accept_language即可</td>\n</tr>\n<tr>\n<td>$http_cookie</td>\n<td></td>\n</tr>\n<tr>\n<td>$http_post</td>\n<td></td>\n</tr>\n<tr>\n<td>$http_referer</td>\n<td></td>\n</tr>\n<tr>\n<td>$http_user_agent</td>\n<td></td>\n</tr>\n<tr>\n<td>$http_x_forwarded_for</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_NAME</td>\n<td>可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</td>\n</tr>\n<tr>\n<td>$sent_http_cache_control</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_connection</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_content_type</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_keep_alive</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_last_modified</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_location</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_transfer_encoding</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n', '> 官网变量说明：[http://nginx.org/en/docs/varindex.html](http://nginx.org/en/docs/varindex.html)\n\n| KEY | NOTE |\n| ------ | ------ |\n|$args|请求中的参数值|\n|$query_string|同$args|\n|$arg_NAME|GET请求中NAME的值|\n|$is_args|如果请求中有参数，值为\"?\"，否则为空字符串|\n|$uri|请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如\"/foo/bar.html\"。|\n|$document_uri|同$uri|\n|$document_root|当前请求的文档根目录或别名|\n|$host|优先级：HTTP请求行的主机名>\"HOST\"请求头字段>符合请求的服务器名|\n|$hostname|主机名|\n|$https|如果开启了SSL安全模式，值为\"on\"，否则为空字符串。|\n|$binary_remote_addr|客户端地址的二进制形式，固定长度为4个字节|\n|$body_bytes_sent|传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的\"%B\"参数保持兼容|\n|$bytes_sent|传输给客户端的字节数|\n|$connection|TCP连接的序列号|\n|$connection_requests|TCP连接当前的请求数量|\n|$content_length|\"Content-Length\" 请求头字段|\n|$content_type|\"Content-Type\" 请求头字段|\n|$cookie_name|cookie名称|\n|$limit_rate|用于设置响应的速度限制|\n|$msec|当前的Unix时间戳|\n|$nginx_version|nginx版本|\n|$pid|工作进程的PID|\n|$pipe|如果请求来自管道通信，值为\"p\"，否则为\".\"|\n|$proxy_protocol_addr|获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串|\n|$realpath_root|当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径|\n|$remote_addr|客户端地址|\n|$remote_port|客户端端口|\n|$remote_user|用于HTTP基础认证服务的用户名|\n|$request|代表客户端的请求地址|\n|$request_body|客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器|\n|$request_body_file|将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off|\n|$request_completion|如果请求成功，值为\"OK\"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空|\n|$request_filename|当前连接请求的文件路径，由root或alias指令与URI请求生成|\n|$request_length|请求的长度 (包括请求的地址，http请求头和请求主体)|\n|$request_method|HTTP请求方法，通常为\"GET\"或\"POST\"|\n|$request_time|处理客户端请求使用的时间; 从读取客户端的第一个字节开始计时|\n|$request_uri|这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：\"/cnphp/test.php?arg=freemouse\"|\n|$scheme|请求使用的Web协议，\"http\" 或 \"https\"|\n|$server_addr|服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中|\n|$server_name|服务器名|\n|$server_port|服务器端口|\n|$server_protocol|服务器的HTTP版本，通常为 \"HTTP/1.0\" 或 \"HTTP/1.1\"|\n|$status|HTTP响应代码|\n|$time_iso8601|服务器时间的ISO 8610格式|\n|$time_local|服务器时间（LOG Format 格式）|\n|$cookie_NAME|客户端请求Header头中的cookie变量，前缀\"$cookie_\"加上cookie名称的变量，该变量的值即为cookie名称的值|\n|$http_NAME|匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：\"Accept-Language\"，$http_accept_language即可|\n|$http_cookie||\n|$http_post||\n|$http_referer||\n|$http_user_agent||\n|$http_x_forwarded_for||\n|$sent_http_NAME|可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可|\n|$sent_http_cache_control||\n|$sent_http_connection||\n|$sent_http_content_type||\n|$sent_http_keep_alive||\n|$sent_http_last_modified||\n|$sent_http_location||\n|$sent_http_transfer_encoding| &nbsp; |\n\n\n', '2019-04-24 14:38:38', '2020-08-03 03:12:13', 868, 1);
INSERT INTO `bg_article` VALUES (27, 'LINUX 常用命令记录', '1556089447', 'linux 常用命令记录，记录一些常用的命令，时间久了不去用就会渐渐忘记掉，这里记录下来方便查阅，就不用到处搜索了', 'linux,常用命令,记录', '', '<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ls -l</td>\n<td style=\"text-align:left\">列出当前文件夹文件，显示总文件数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">df -h</td>\n<td style=\"text-align:left\">硬盘使用情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n', '|命令|说明|\n|:-|:-|\n|ls -l|列出当前文件夹文件，显示总文件数|\n|df -h|硬盘使用情况|\n|||\n|||\n|||', '2019-04-24 15:04:07', '2020-08-03 10:16:38', 161, 1);
INSERT INTO `bg_article` VALUES (28, 'NGINX mod_zip 扩展实现边打包边下载 zip 文件，PHP 实现以及途中踩过的坑', '1556260291', 'NGINX mod_zip 扩展实现边打包边下载 zip 文件，PHP 实现', 'NGINX,mod_zip,打包下载,zip,文件,PHP ', '', '<p>由于需求，故需要开发一个边打包边下载 ZIP 的功能，目前主流的技术就是利用 NINGX 的三方扩展包 mod_zip来实现。在网上找到几个帖子说的操作过程，一遍遍下来居然不行，下载的 ZIP 提示损坏，坑了我两天，当然是什么原因后面会说明。</p>\n<h2 id=\"h2-mod_zip\"><a name=\"MOD_ZIP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>MOD_ZIP</h2><p>mod_zip能够动态的构建zip包，这种动态体现在当Nginx作为反向代理服务器的时候，该模块能够根据上游服务器返回的文件列表来打包文件。</p>\n<p>mod_zip实际上是利用Nginx的subrequest功能，将zip流发送到客户端的，而且它实际上只打包不压缩，所以借助Nginx本身作为文件服务器的能力，该模块的内存占用十分少，对于上G的大文件也没有问题。</p>\n<p>zip文件本身是结构化的，可以自定义目录结构，所以对于mod_zip而言，要做的只是添加zip的头部尾部和zip内部的目录结构元数据而已，文件数据本身依靠Nginx自身的机制发送。</p>\n<p>除此之外，还有如下两点：</p>\n<ul>\n<li>由于使用subrequest机制，文件甚至可以不在Nginx的服务器本身，可以是上游服务器，甚至是互联网的远程服务器上。</li><li>在添加crc校验后，mod_zip还能够支持HTTP的Range，支持断点续传。</li></ul>\n<h2 id=\"h2-nginx-mod_zip\"><a name=\"NGINX 安装 MOD_ZIP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>NGINX 安装 MOD_ZIP</h2><p>操作基于linux系统</p>\n<h4 id=\"h4--mod_zip-\"><a name=\"下载 mod_zip：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载 mod_zip：</h4><pre><code>git clone https://github.com/evanmiller/mod_zip.git\n</code></pre><p>这里我将文件位于 /data/temp/mod_zip</p>\n<h4 id=\"h4-u7F16u8BD1u5B89u88C5\"><a name=\"编译安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>编译安装</h4><p>编译安装最新版 NGINX 1.16.0，这里我是最小化安装，需要其他功能自行启用即可。</p>\n<pre><code class=\"lang-shell\">./configure --prefix=/usr/local/nginx --add-module=/data/temp/mod_zip/ --with-http_ssl_module\n</code></pre>\n<pre><code class=\"lang-shell\">make &amp; make install\n</code></pre>\n<p>注意这里是全新安装哦，非全新安装看下面即可。</p>\n<p>非全新其实还是需要重新编译才行，记得使用 sbin/nginx -V 查看你已安装 NGINX 编译参数，勿要漏掉，在加上编译参数 —add-module=/data/temp/mod_zip/ 即可，然后在 make</p>\n<blockquote>\n<p>不要 make install !!! 不然就会被覆盖安装了，结果你懂的。</p>\n</blockquote>\n<p>将生成的二进制文件覆盖现有的二进制文件。通常编译出来的二进制文件位于源码目录的objs/nginx 覆盖 /usr/local/nginx/sbin/nginx</p>\n<p>启动 NGINX即可。</p>\n<h2 id=\"h2-u5982u4F55u4F7Fu7528\"><a name=\"如何使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>如何使用</h2><h4 id=\"h4-u8BF4u660E\"><a name=\"说明\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>说明</h4><p>该模块不需要在nginx.conf中配置任何东西，一切的行为取决于上游服务器的响应内容。mod_zip规定当响应头中包含X-Archive-Files的时候，将启用mod_zip的功能：’X-Archive-Files: zip’</p>\n<p>同时，响应的body中需要包含一个欲打包的文件的列表，如：</p>\n<pre><code class=\"lang-other\">1034ab38 428    /down/b.png   b.png\n83e8110b 100339 /down/a.png   a.png\n</code></pre>\n<p>每一行表示一个文件描述，行与行之间有一个换行符(最后也有个换行)。每行从左向右以空格分隔，依次是文件的crc-32校验，文件大小(Byte)，文件的uri，文件名。其中crc-32可以忽略，并用-代替，文件名可以包含目录，会体现在最后的压缩包中的目录结构中。</p>\n<p>重点是文件的uri怎么理解。这里的 /down/b.png 并非指向文件系统的路径，而是一个子请求的地址。比如上面的 /down/b.png 实际上会产生一个Nginx自身的请求：<a href=\"http://www.iuxiao.com/a.png\">http://www.iuxiao.com/a.png</a> 至于这个请求得到什么又要根据 nginx.conf 中的配置决定了。这样的设计十分灵活。</p>\n<h4 id=\"h4-php-\"><a name=\"PHP 使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>PHP 使用</h4><h5 id=\"h5--\"><a name=\"最简单的测试代码：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>最简单的测试代码：</h5><pre><code class=\"lang-php\">&lt;?php\nheader(&#39;X-Accel-Chareset: utf-8&#39;);\nheader(&#39;Content-Type: application/octet-stream&#39;);\nheader(&#39;Content-Disposition: attachment; filename=test.zip&#39;);\nheader(&#39;X-Archive-Files: zip&#39;);\n$crc32 = &quot;-&quot;;\nprintf(&quot;%s %d %s %s\\n&quot;, $crc32, 171144, &#39;/down/a.log&#39;, &#39;a.log&#39;);\n</code></pre>\n<p>上传代码然后访问，之后会下载到 test.zip 文件，里面包含一个文件 a.log 不过里面没有实际内容，一个空文件而已，这里只是测试是否生效。</p>\n<h5 id=\"h5--\"><a name=\"实际使用，打包网络文件：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>实际使用，打包网络文件：</h5><p>PHP 伪代码：</p>\n<pre><code class=\"lang-php\">&lt;?php\nheader(&#39;X-Accel-Chareset: utf-8&#39;);\nheader(&#39;Content-Type: application/octet-stream&#39;);\nheader(&#39;Content-Disposition: attachment; filename=test.zip&#39;);\nheader(&#39;X-Archive-Files: zip&#39;);\n$crc32 = &quot;-&quot;;\n$file = &quot;http:www.iuxiao.com/a.png&quot;\n$size = 12345; // 这里可以自己实现获取文件大小即可 byte\n$path = &quot;/down/a.png&quot;;\n$name = &quot;a.png&quot;; // ZIP 包里文件名\n\nprintf(&quot;%s %d %s %s\\n&quot;, $crc32, $size, $path, $name);\n</code></pre>\n<p>NGINX 配置：</p>\n<pre><code class=\"lang-other\">location ~ &quot;^/(down)/(?&lt;file&gt;.*)&quot; {\n    set $domain www.iuxiao.com;\n    proxy_pass http://$domain/$file;\n}\n</code></pre>\n<p>NGINX 会自动将 PHP 代码中的 $path=”/down/a.png” 代理到 http:www.iuxiao.com/a.png 然后实现下载</p>\n<h2 id=\"h2-u8E29u5751u603Bu7ED3\"><a name=\"踩坑总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>踩坑总结</h2><p>之前一直按照这个流程来，下在下来的 ZIP 一直提示文件损坏啥的，各种找中英文资料也无效。</p>\n<p>结果就是我的服务器使用的是淘宝团队开发的 Tengine 2.2.3 版本，结果一直导致上述问题。各种折腾，最后尝试使用 NGINX 官方最新版尝试才成功，而后又去尝试 Tengine 2.3.0 也是可以的。最终把服务器的 NGINX 升级到 Tengine 2.3.0 。</p>\n', '由于需求，故需要开发一个边打包边下载 ZIP 的功能，目前主流的技术就是利用 NINGX 的三方扩展包 mod_zip来实现。在网上找到几个帖子说的操作过程，一遍遍下来居然不行，下载的 ZIP 提示损坏，坑了我两天，当然是什么原因后面会说明。\n\n## MOD_ZIP\nmod_zip能够动态的构建zip包，这种动态体现在当Nginx作为反向代理服务器的时候，该模块能够根据上游服务器返回的文件列表来打包文件。\n\nmod_zip实际上是利用Nginx的subrequest功能，将zip流发送到客户端的，而且它实际上只打包不压缩，所以借助Nginx本身作为文件服务器的能力，该模块的内存占用十分少，对于上G的大文件也没有问题。\n\nzip文件本身是结构化的，可以自定义目录结构，所以对于mod_zip而言，要做的只是添加zip的头部尾部和zip内部的目录结构元数据而已，文件数据本身依靠Nginx自身的机制发送。\n\n除此之外，还有如下两点：\n\n+ 由于使用subrequest机制，文件甚至可以不在Nginx的服务器本身，可以是上游服务器，甚至是互联网的远程服务器上。\n+ 在添加crc校验后，mod_zip还能够支持HTTP的Range，支持断点续传。\n\n## NGINX 安装 MOD_ZIP\n操作基于linux系统\n\n#### 下载 mod_zip：\n\n```\ngit clone https://github.com/evanmiller/mod_zip.git\n```\n这里我将文件位于 /data/temp/mod_zip\n#### 编译安装\n\n编译安装最新版 NGINX 1.16.0，这里我是最小化安装，需要其他功能自行启用即可。\n\n```shell\n./configure --prefix=/usr/local/nginx --add-module=/data/temp/mod_zip/ --with-http_ssl_module\n```\n\n```shell\nmake & make install\n```\n\n注意这里是全新安装哦，非全新安装看下面即可。\n\n非全新其实还是需要重新编译才行，记得使用 sbin/nginx -V 查看你已安装 NGINX 编译参数，勿要漏掉，在加上编译参数 --add-module=/data/temp/mod_zip/ 即可，然后在 make\n\n> 不要 make install !!! 不然就会被覆盖安装了，结果你懂的。\n\n将生成的二进制文件覆盖现有的二进制文件。通常编译出来的二进制文件位于源码目录的objs/nginx 覆盖 /usr/local/nginx/sbin/nginx\n\n启动 NGINX即可。\n\n## 如何使用\n\n#### 说明\n该模块不需要在nginx.conf中配置任何东西，一切的行为取决于上游服务器的响应内容。mod_zip规定当响应头中包含X-Archive-Files的时候，将启用mod_zip的功能：\'X-Archive-Files: zip\'\n\n同时，响应的body中需要包含一个欲打包的文件的列表，如：\n\n``` other\n1034ab38 428    /down/b.png   b.png\n83e8110b 100339 /down/a.png   a.png\n```\n\n每一行表示一个文件描述，行与行之间有一个换行符(最后也有个换行)。每行从左向右以空格分隔，依次是文件的crc-32校验，文件大小(Byte)，文件的uri，文件名。其中crc-32可以忽略，并用-代替，文件名可以包含目录，会体现在最后的压缩包中的目录结构中。\n\n重点是文件的uri怎么理解。这里的 /down/b.png 并非指向文件系统的路径，而是一个子请求的地址。比如上面的 /down/b.png 实际上会产生一个Nginx自身的请求：http://www.iuxiao.com/a.png 至于这个请求得到什么又要根据 nginx.conf 中的配置决定了。这样的设计十分灵活。\n\n#### PHP 使用\n\n##### 最简单的测试代码：\n\n``` php\n<?php\nheader(\'X-Accel-Chareset: utf-8\');\nheader(\'Content-Type: application/octet-stream\');\nheader(\'Content-Disposition: attachment; filename=test.zip\');\nheader(\'X-Archive-Files: zip\');\n$crc32 = \"-\";\nprintf(\"%s %d %s %s\\n\", $crc32, 171144, \'/down/a.log\', \'a.log\');\n```\n上传代码然后访问，之后会下载到 test.zip 文件，里面包含一个文件 a.log 不过里面没有实际内容，一个空文件而已，这里只是测试是否生效。\n\n##### 实际使用，打包网络文件：\n\nPHP 伪代码：\n``` php\n<?php\nheader(\'X-Accel-Chareset: utf-8\');\nheader(\'Content-Type: application/octet-stream\');\nheader(\'Content-Disposition: attachment; filename=test.zip\');\nheader(\'X-Archive-Files: zip\');\n$crc32 = \"-\";\n$file = \"http:www.iuxiao.com/a.png\"\n$size = 12345; // 这里可以自己实现获取文件大小即可 byte\n$path = \"/down/a.png\";\n$name = \"a.png\"; // ZIP 包里文件名\n\nprintf(\"%s %d %s %s\\n\", $crc32, $size, $path, $name);\n```\nNGINX 配置：\n``` other\nlocation ~ \"^/(down)/(?<file>.*)\" {\n    set $domain www.iuxiao.com;\n    proxy_pass http://$domain/$file;\n}\n```\nNGINX 会自动将 PHP 代码中的 $path=\"/down/a.png\" 代理到 http:www.iuxiao.com/a.png 然后实现下载\n\n## 踩坑总结\n\n之前一直按照这个流程来，下在下来的 ZIP 一直提示文件损坏啥的，各种找中英文资料也无效。\n\n结果就是我的服务器使用的是淘宝团队开发的 Tengine 2.2.3 版本，结果一直导致上述问题。各种折腾，最后尝试使用 NGINX 官方最新版尝试才成功，而后又去尝试 Tengine 2.3.0 也是可以的。最终把服务器的 NGINX 升级到 Tengine 2.3.0 。\n\n', '2019-04-26 14:31:31', '2020-08-10 18:36:45', 1437, 1);
INSERT INTO `bg_article` VALUES (29, 'centos7服务器被挖矿入侵，sshd文件被串改，导致无法使用SFTP远程链接上传文件', '1563520755', '在阿里买的个人服务器惨遭挖矿入侵，CPU被调戏到100%，接到阿里入侵通知后，紧急清除了挖矿程序，个人站点也可正常访问。但是，N天过后，当我修改了文件准备上传是发现SFTP居然无法连接..', '挖矿,centos7,sshd,SFTP', '', '<blockquote>\n<p>在阿里买的个人服务器惨遭挖矿入侵，CPU被调戏到100%，接到阿里入侵通知后，紧急清除了挖矿程序，个人站点也可正常访问。但是，N天过后，当我修改了文件准备上传是发现SFTP居然无法连接，导致无法更新我的站点。</p>\n</blockquote>\n<p>本来打算直接重装了事，但是晚上太晚了就没有重装，打算白天看看能不能进行一番抢救。</p>\n<h1 id=\"h1-u62A2u6551u8FC7u7A0B\"><a name=\"抢救过程\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>抢救过程</h1><h2 id=\"h2-u7B2Cu4E00u6B21u62A2u6551\"><a name=\"第一次抢救\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>第一次抢救</h2><p>百度到说是ssh的配置有问题，于是去修改配置文件/etc/ssh/sshd_config，开启sftp相关配置，去掉Subsystem前面的#号，然后重启服务 systemctl restart sshd.service</p>\n<pre><code># override default of no subsystems\nSubsystem   sftp    /usr/libexec/openssh/sftp-server\n</code></pre><p>抢救到半途一看，我擦，这和我目前的配置一模一样啊，第一次抢救宣布失败。</p>\n<h2 id=\"h2-u7B2Cu4E8Cu6B21u62A2u6551\"><a name=\"第二次抢救\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>第二次抢救</h2><p>查看了一下/usr/sbin/sshd 的时间是被入侵那会的时间，这个文件很可能被偷梁换柱了。于是<br>我就突然想到是不是可以把其他正常机器上的sshd文件复制过来。</p>\n<p>然后就开始拿上手术刀就开干。</p>\n<p>第一次替换成功，尝试连接SFTP… 我啥也不说</p>\n<p>第二次又换了一台，尝试连接SFTP… 这… 难道是…，我尝试把xshell断开了，然后重连xshell ,接着我就懵了，我擦这病人连心跳都快停了。我居然连接不上去xshell了。<br>没得法，接着只有试试使用阿里的网页版远程链接登录试试。嘿，居然还可以，病人心跳恢复了，可以不用送去太平间了。</p>\n<h2 id=\"h2-u7B2Cu4E09u6B21u62A2u6551\"><a name=\"第三次抢救\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>第三次抢救</h2><p>经过两次抢救均已失败告终，然后我就想，既然病人的肾不行了，我也修不好，换别人的肾也不行，那我就只有摘掉老的然后找个原厂的肾来操作。</p>\n<p>之前动过他的肾，我看下他身体里还有没有：<br><img src=\"http://static.iuxiao.com/image/2019/07/19/a63d522f65ab1b047f4739f0e6cd09c23c3f4b85.png\" alt=\"\"><br>嘿，居然还在，赶快把它割掉：</p>\n<pre><code>yum remove openssh*\n</code></pre><p>然后重新装上原厂的肾：</p>\n<pre><code>yum install -y openssh-server\n</code></pre><p>换肾过程很顺利，激活一下肾 /usr/sbin/sshd reload<br>再尝试连接SFTP一哈，一脸懵，难道这个reload不行,我没试过systemctl restart sshd.service,以后可以尝试一下。</p>\n<p>然后我就直接按了重启键了 shutdown -r now</p>\n<p>—-&gt; 启动成功</p>\n<p>在WEB嘿框框中正常连接，然后使用xshell 连接一下，嘿居然可以了。最后在连接一下xftp,得出结论，嗯这个病人可以出院了，连调养都不用了，这就是个医学奇迹啊，我简直是个医学大牛。嘿嘿嘿</p>\n', '>在阿里买的个人服务器惨遭挖矿入侵，CPU被调戏到100%，接到阿里入侵通知后，紧急清除了挖矿程序，个人站点也可正常访问。但是，N天过后，当我修改了文件准备上传是发现SFTP居然无法连接，导致无法更新我的站点。\n\n本来打算直接重装了事，但是晚上太晚了就没有重装，打算白天看看能不能进行一番抢救。\n\n#抢救过程\n\n## 第一次抢救\n百度到说是ssh的配置有问题，于是去修改配置文件/etc/ssh/sshd_config，开启sftp相关配置，去掉Subsystem前面的#号，然后重启服务 systemctl restart sshd.service\n```\n# override default of no subsystems\nSubsystem   sftp    /usr/libexec/openssh/sftp-server\n```\n抢救到半途一看，我擦，这和我目前的配置一模一样啊，第一次抢救宣布失败。\n\n## 第二次抢救\n查看了一下/usr/sbin/sshd 的时间是被入侵那会的时间，这个文件很可能被偷梁换柱了。于是\n我就突然想到是不是可以把其他正常机器上的sshd文件复制过来。\n\n然后就开始拿上手术刀就开干。\n\n第一次替换成功，尝试连接SFTP... 我啥也不说\n\n第二次又换了一台，尝试连接SFTP... 这... 难道是...，我尝试把xshell断开了，然后重连xshell ,接着我就懵了，我擦这病人连心跳都快停了。我居然连接不上去xshell了。\n没得法，接着只有试试使用阿里的网页版远程链接登录试试。嘿，居然还可以，病人心跳恢复了，可以不用送去太平间了。\n\n##第三次抢救\n经过两次抢救均已失败告终，然后我就想，既然病人的肾不行了，我也修不好，换别人的肾也不行，那我就只有摘掉老的然后找个原厂的肾来操作。\n\n之前动过他的肾，我看下他身体里还有没有：\n![](http://static.iuxiao.com/image/2019/07/19/a63d522f65ab1b047f4739f0e6cd09c23c3f4b85.png)\n嘿，居然还在，赶快把它割掉：\n```\nyum remove openssh*\n```\n\n然后重新装上原厂的肾：\n```\nyum install -y openssh-server\n```\n\n换肾过程很顺利，激活一下肾 /usr/sbin/sshd reload\n再尝试连接SFTP一哈，一脸懵，难道这个reload不行,我没试过systemctl restart sshd.service,以后可以尝试一下。\n\n然后我就直接按了重启键了 shutdown -r now\n\n---> 启动成功\n\n在WEB嘿框框中正常连接，然后使用xshell 连接一下，嘿居然可以了。最后在连接一下xftp,得出结论，嗯这个病人可以出院了，连调养都不用了，这就是个医学奇迹啊，我简直是个医学大牛。嘿嘿嘿', '2019-07-19 15:19:15', '2020-08-06 06:12:42', 875, 1);
INSERT INTO `bg_article` VALUES (30, 'Centos7 最小化安装，后续必备操作 （CentOS-7-x86_64-Minimal-1810）', '1567047727', 'centos7最小化安装后并不能像云主机那样可以直接进行各种操作，需要安装和配置一些东西才可以正常使用。', 'Centos7,最小化安装,后续,必备操作', '', '<blockquote>\n<p>centos镜像：CentOS-7-x86_64-Minimal-1810.iso<br>国内下载地址：<a href=\"https://mirrors.aliyun.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-Minimal-1810.iso\" title=\"阿里镜像\">阿里镜像</a></p>\n</blockquote>\n<h3 id=\"h3-1-\"><a name=\"1.配置网络\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.配置网络</h3><p>首先要配置网络，不然不能进行联网，我在hyper-v虚拟机中安装的镜像，之前一直不能联网，找不到问题，还以为hyper-v出了问题，各种搞，结果是没有配置网络。<br><img src=\"http://static.iuxiao.com/image/2019/08/29/6c3dae1fa7d778b00afb5b90d5ef73aea3d7d5b3.png\" alt=\"\"></p>\n<p>编辑ifcfg-eth0 里面的ONBOOT=no改成yes</p>\n<pre><code class=\"lang-shell\">vi /etc/sysconfig/network-scripts/ifcfg-eth0\n</code></pre>\n<p><img src=\"http://static.iuxiao.com/image/2019/08/29/dda0f0a5f9d0a213c58141d338414e460a2692a7.png\" alt=\"\"></p>\n<p>然后重启网卡与ping测试</p>\n<pre><code class=\"lang-shell\">service network restart\nping baidu.com\n</code></pre>\n<h3 id=\"h3-2-\"><a name=\"2.安装必备工具\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.安装必备工具</h3><pre><code class=\"lang-shell\">yum -y install net-tools\nyum -y install vim\nyum -y install wget\n</code></pre>\n<h3 id=\"h3-3-\"><a name=\"3.关闭自带防火墙\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.关闭自带防火墙</h3><pre><code class=\"lang-shell\">systemctl disable firewalld.service\n</code></pre>\n<h3 id=\"h3-4-iptables\"><a name=\"4.安装iptables\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.安装iptables</h3><p>因本机虚拟机测试环境，故没有安装</p>\n<h3 id=\"h3-5-selinux\"><a name=\"5.关闭SELINUX\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.关闭SELINUX</h3><pre><code class=\"lang-shell\">vi /etc/selinux/config\n#注释掉下面两行 \n#SELINUX=enforcing \n#SELINUXTYPE=targeted \n#增加一行 \nSELINUX=disabled\n\n#保存关闭后\nsetenforce 0 \n#使设置启用，在这里最好重启一下系统，也可以稍后重启\n</code></pre>\n<h3 id=\"h3-6-yum-\"><a name=\"6.yum切换为国内阿里源\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.yum切换为国内阿里源</h3><pre><code class=\"lang-shell\">cd /etc/yum.repos.d/\n#备份自带源文件\nmv Centos-Base.repo Centos-Base.repo.bak\n#下载阿里源文件\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \n#重建源数据缓存 \nyum makecache\n</code></pre>\n<h3 id=\"h3-7-xshell-centos\"><a name=\"7.xshell链接centos\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7.xshell链接centos</h3><p>hyper-v自带界面操作起来不够友好，故使用xshell链接.使用ifconfig获取到内网IP地址，然后配置好xshell的用户名和密码即可。</p>\n<h3 id=\"h3-8-\"><a name=\"8.其他基础软件安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>8.其他基础软件安装</h3><pre><code class=\"lang-shell\">yum -y update\n\n# autoconf工具是帮助我们快捷规范的生成Makefile的\nyum -y install autoconf\n# bzip2命令是.bz2文件的压缩程序\nyum -y install bzip2\nyum -y install bzip2-devel\n# curl是一个利用URL规则在命令行下工作的文件传输工具\nyum -y install curl\nyum -y install curl-devel\n# CMake是一个跨平台的编译自动配置工具\nyum -y install cmake\n# freetype来做文字处理\nyum -y install freetype\nyum -y install freetype-devel\n# 图形处理库\nyum -y install gd\nyum -y install gd-devel\nyum -y install gd2\nyum -y install gd2-devel\n# 编译器\nyum -y install gcc gcc-c++\n# glibc是GNU发布的libc库，即c运行库\nyum -y install glibc\nyum -y install glibc-devel\nyum -y install glib2\nyum -y install glib2-devel\n# git工具\nyum -y install git\n# Linux流量监控工具\nyum -y install iftop\n#  linux libjpeg对图像进行压缩\nyum -y install libjpeg\nyum -y install libjpeg-devel\n# 操作xml文件的库\nyum -y install libxml2\nyum -y install libxml2-devel\n# 上传下载工具\nyum -y install lrzsz\n# 编译工具\nyum -y install make\n# OpenSSL 是一个安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。\nyum -y install openssl\nyum -y install openssl-devel\n# PCRE(Perl Compatible Regular Expressions)是一个轻量级的Perl函数库，包括 perl 兼容的正则表达式库。它比Boost之类的正则表达式库小得多。PCRE十分易用，同时功能也很强大，性能超过了POSIX正则表达式库和一些经典的正则表达式库。\nyum -y install pcre\nyum -y install pcre-devel\n# zip压缩工具\nyum -y install unzip\n# patch命令用于修补文件\nyum -y install patch\n# zlib 适用于数据压缩的函式库，zlib被设计成一个免费的、通用的、法律上不受阻碍（即没有被任何专利覆盖） 的无损数据压缩库。zlib几乎适用于任何计算器硬件和操作系统。\nyum -y install zlib\nyum -y install zlib-devel\n</code></pre>\n', '> centos镜像：CentOS-7-x86_64-Minimal-1810.iso\n> 国内下载地址：[阿里镜像](https://mirrors.aliyun.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-Minimal-1810.iso \"阿里镜像\")\n\n### 1.配置网络\n首先要配置网络，不然不能进行联网，我在hyper-v虚拟机中安装的镜像，之前一直不能联网，找不到问题，还以为hyper-v出了问题，各种搞，结果是没有配置网络。\n![](http://static.iuxiao.com/image/2019/08/29/6c3dae1fa7d778b00afb5b90d5ef73aea3d7d5b3.png)\n\n编辑ifcfg-eth0 里面的ONBOOT=no改成yes\n```shell\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\n```\n![](http://static.iuxiao.com/image/2019/08/29/dda0f0a5f9d0a213c58141d338414e460a2692a7.png)\n\n然后重启网卡与ping测试\n```shell\nservice network restart\nping baidu.com\n```\n\n### 2.安装必备工具\n```shell\nyum -y install net-tools\nyum -y install vim\nyum -y install wget\n```\n\n### 3.关闭自带防火墙\n```shell\nsystemctl disable firewalld.service \n```\n\n### 4.安装iptables\n因本机虚拟机测试环境，故没有安装\n\n### 5.关闭SELINUX\n```shell\nvi /etc/selinux/config\n#注释掉下面两行 \n#SELINUX=enforcing \n#SELINUXTYPE=targeted \n#增加一行 \nSELINUX=disabled\n\n#保存关闭后\nsetenforce 0 \n#使设置启用，在这里最好重启一下系统，也可以稍后重启\n```\n\n### 6.yum切换为国内阿里源\n```shell\ncd /etc/yum.repos.d/\n#备份自带源文件\nmv Centos-Base.repo Centos-Base.repo.bak\n#下载阿里源文件\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \n#重建源数据缓存 \nyum makecache\n```\n\n### 7.xshell链接centos\nhyper-v自带界面操作起来不够友好，故使用xshell链接.使用ifconfig获取到内网IP地址，然后配置好xshell的用户名和密码即可。\n\n### 8.其他基础软件安装\n```shell\nyum -y update\n\n# autoconf工具是帮助我们快捷规范的生成Makefile的\nyum -y install autoconf\n# bzip2命令是.bz2文件的压缩程序\nyum -y install bzip2\nyum -y install bzip2-devel\n# curl是一个利用URL规则在命令行下工作的文件传输工具\nyum -y install curl\nyum -y install curl-devel\n# CMake是一个跨平台的编译自动配置工具\nyum -y install cmake\n# freetype来做文字处理\nyum -y install freetype\nyum -y install freetype-devel\n# 图形处理库\nyum -y install gd\nyum -y install gd-devel\nyum -y install gd2\nyum -y install gd2-devel\n# 编译器\nyum -y install gcc gcc-c++\n# glibc是GNU发布的libc库，即c运行库\nyum -y install glibc\nyum -y install glibc-devel\nyum -y install glib2\nyum -y install glib2-devel\n# git工具\nyum -y install git\n# Linux流量监控工具\nyum -y install iftop\n#  linux libjpeg对图像进行压缩\nyum -y install libjpeg\nyum -y install libjpeg-devel\n# 操作xml文件的库\nyum -y install libxml2\nyum -y install libxml2-devel\n# 上传下载工具\nyum -y install lrzsz\n# 编译工具\nyum -y install make\n# OpenSSL 是一个安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。\nyum -y install openssl\nyum -y install openssl-devel\n# PCRE(Perl Compatible Regular Expressions)是一个轻量级的Perl函数库，包括 perl 兼容的正则表达式库。它比Boost之类的正则表达式库小得多。PCRE十分易用，同时功能也很强大，性能超过了POSIX正则表达式库和一些经典的正则表达式库。\nyum -y install pcre\nyum -y install pcre-devel\n# zip压缩工具\nyum -y install unzip\n# patch命令用于修补文件\nyum -y install patch\n# zlib 适用于数据压缩的函式库，zlib被设计成一个免费的、通用的、法律上不受阻碍（即没有被任何专利覆盖） 的无损数据压缩库。zlib几乎适用于任何计算器硬件和操作系统。\nyum -y install zlib\nyum -y install zlib-devel\n```\n', '2019-08-29 11:02:07', '2020-08-09 11:06:35', 769, 1);
INSERT INTO `bg_article` VALUES (31, 'Nginx 编译安装，Tengine版本（淘宝团队开发）', '1567058077', 'Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。', 'nginx,编译安装,Tengine', '', '<blockquote>\n<p>安装版本：[2019-06-26] Tengine-2.3.1 开发版正式发布<br>下载地址：<a href=\"http://tengine.taobao.org/download/tengine-2.3.1.tar.gz\" title=\"官网下载地址\">官网下载地址</a><br>注意事项：安装前请先安装基本扩展，参考最小化安装centos文中第8条</p>\n</blockquote>\n<h3 id=\"h3-u7F16u8BD1u5B89u88C5\"><a name=\"编译安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>编译安装</h3><pre><code class=\"lang-shell\"># 新增用户和用户组www\ngroupadd www\nuseradd www -g www\n\n# 下载软件包\nwget http://tengine.taobao.org/download/tengine-2.3.1.tar.gz\n\n# 解压\ntar -zxvf tengine-2.3.1.tar.gz\ncd tengine-2.3.1\n\n# 编译安装\n./configure --prefix=/usr/local/nginx \\\n--user=www --group=www \\\n--with-ld-opt=-lrt \\\n--with-http_stub_status_module \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_gzip_static_module \\\n--with-pcre\n\nmake\nmake install\n</code></pre>\n<h3 id=\"h3-u57FAu672Cu914Du7F6E\"><a name=\"基本配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>基本配置</h3><p>配置启动脚本</p>\n<pre><code class=\"lang-shell\">cd /etc/init.d/\nvim nginx\n# 输入本节最下方脚本内容后保存\n\n# 设置执行权限\nchmod +x nginx\n\n# 加入开机启动\nchkconfig --add nginx\n\n# 启动nginx\nservice nginx start\n</code></pre>\n<h4 id=\"h4--php-\"><a name=\"配置PHP支持\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置PHP支持</h4><p>需先安装好PHP，修改nginx.conf</p>\n<pre><code class=\"lang-shell\">#server模块\nserver {\n        listen       80;\n        server_name  localhost;\n        root /data/html;\n        #本地环境，开启了目录浏览\n        autoindex on;\n\n        location / {\n            index  index.html index.htm index.php;\n        }\n\n        location ~ \\.php$ {\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n}\n</code></pre>\n<h4 id=\"h4-nginx-\"><a name=\"nginx启动脚本内容\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>nginx启动脚本内容</h4><pre><code class=\"lang-shell\">#! /bin/bash\n# chkconfig: - 85 15\n\n# 注意修改成自己的路径\nPATH=/usr/local/nginx\nDESC=&quot;nginx daemon&quot;\nNAME=nginx\nDAEMON=$PATH/sbin/${NAME}\nCONFIGFILE=$PATH/conf/${NAME}.conf\nPIDFILE=$PATH/logs/${NAME}.pid\nSCRIPTNAME=/etc/init.d/${NAME}\nset -e\n[ -x &quot;$DAEMON&quot; ] || exit 0\ndo_start() {\n    ${DAEMON} -c ${CONFIGFILE} || echo -n &quot;nginx already running&quot;\n}\ndo_stop() {\n    ${DAEMON} -s stop || echo -n &quot;nginx not running&quot;\n}\ndo_reload() {\n    ${DAEMON} -s reload || echo -n &quot;nginx can&#39;t reload&quot;\n}\n\ncase &quot;$1&quot; in\n    start)\n        echo -n &quot;Starting $DESC: $NAME&quot;\n        do_start\n        echo &quot;.&quot;\n    ;;\n    stop)\n        echo -n &quot;Stopping $DESC: $NAME&quot;\n        do_stop\n        echo &quot;.&quot;\n    ;;\n    reload|graceful)\n        echo -n &quot;Reloading $DESC configuration...&quot;\n        do_reload\n        echo &quot;.&quot;\n    ;;\n    restart)\n        echo -n &quot;Restarting $DESC: $NAME&quot;\n        do_stop\n        do_start\n        echo &quot;.&quot;\n    ;;\n    *)\n        echo &quot;Usage: $SCRIPTNAME {start|stop|reload|restart}&quot; &gt;&amp;2\n        exit 3\n    ;;\nesac\n\nexit 0\n</code></pre>\n', '> 安装版本：[2019-06-26] Tengine-2.3.1 开发版正式发布\n> 下载地址：[官网下载地址](http://tengine.taobao.org/download/tengine-2.3.1.tar.gz \"官网下载地址\")\n> 注意事项：安装前请先安装基本扩展，参考最小化安装centos文中第8条\n\n### 编译安装\n```shell\n# 新增用户和用户组www\ngroupadd www\nuseradd www -g www\n\n# 下载软件包\nwget http://tengine.taobao.org/download/tengine-2.3.1.tar.gz\n\n# 解压\ntar -zxvf tengine-2.3.1.tar.gz\ncd tengine-2.3.1\n\n# 编译安装\n./configure --prefix=/usr/local/nginx \\\n--user=www --group=www \\\n--with-ld-opt=-lrt \\\n--with-http_stub_status_module \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_gzip_static_module \\\n--with-pcre\n\nmake\nmake install\n```\n\n### 基本配置\n配置启动脚本\n```shell\ncd /etc/init.d/\nvim nginx\n# 输入本节最下方脚本内容后保存\n\n# 设置执行权限\nchmod +x nginx\n\n# 加入开机启动\nchkconfig --add nginx\n\n# 启动nginx\nservice nginx start\n```\n\n#### 配置PHP支持\n需先安装好PHP，修改nginx.conf\n```shell\n#server模块\nserver {\n        listen       80;\n        server_name  localhost;\n        root /data/html;\n		#本地环境，开启了目录浏览\n        autoindex on;\n\n        location / {\n            index  index.html index.htm index.php;\n        }\n\n        location ~ \\.php$ {\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n}\n```\n\n\n#### nginx启动脚本内容\n```shell\n#! /bin/bash\n# chkconfig: - 85 15\n\n# 注意修改成自己的路径\nPATH=/usr/local/nginx\nDESC=\"nginx daemon\"\nNAME=nginx\nDAEMON=$PATH/sbin/${NAME}\nCONFIGFILE=$PATH/conf/${NAME}.conf\nPIDFILE=$PATH/logs/${NAME}.pid\nSCRIPTNAME=/etc/init.d/${NAME}\nset -e\n[ -x \"$DAEMON\" ] || exit 0\ndo_start() {\n    ${DAEMON} -c ${CONFIGFILE} || echo -n \"nginx already running\"\n}\ndo_stop() {\n    ${DAEMON} -s stop || echo -n \"nginx not running\"\n}\ndo_reload() {\n    ${DAEMON} -s reload || echo -n \"nginx can\'t reload\"\n}\n\ncase \"$1\" in\n    start)\n        echo -n \"Starting $DESC: $NAME\"\n        do_start\n        echo \".\"\n    ;;\n    stop)\n        echo -n \"Stopping $DESC: $NAME\"\n        do_stop\n        echo \".\"\n    ;;\n    reload|graceful)\n        echo -n \"Reloading $DESC configuration...\"\n        do_reload\n        echo \".\"\n    ;;\n    restart)\n        echo -n \"Restarting $DESC: $NAME\"\n        do_stop\n        do_start\n        echo \".\"\n    ;;\n    *)\n        echo \"Usage: $SCRIPTNAME {start|stop|reload|restart}\" >&2\n        exit 3\n    ;;\nesac\n\nexit 0\n```', '2019-08-29 13:54:37', '2020-08-09 11:06:59', 288, 1);
INSERT INTO `bg_article` VALUES (32, 'Centos7，进行 php-7.3.9RC1 编译安装', '1567059651', 'php7 centos7下编译安装， PHP即“超文本预处理器”,是一种通用开源脚本语言。PHP是在服务器端执行的脚本语言,与C语言类似,是常用的网站编程语言。', 'Centos7,php-7.3.9RC1,编译安装', '', '<blockquote>\n<p>安装版本：php-7.3.9RC1.tar.gz<br>下载地址：<a href=\"https://downloads.php.net/~cmb/php-7.3.9RC1.tar.gz\" title=\"官网下载\">官网下载</a><br>注意事项：安装前请先安装基本扩展，参考最小化安装centos文中第8条</p>\n</blockquote>\n<h3 id=\"h3-u7F16u8BD1u5B89u88C5\"><a name=\"编译安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>编译安装</h3><pre><code class=\"lang-shell\"># 新增用户和用户组www\ngroupadd www\nuseradd www -g www\n\n# 下载软件包\nwget https://downloads.php.net/~cmb/php-7.3.9RC1.tar.gz\n\n# 解压\ntar -zxvf php-7.3.9RC1.tar.gz\ncd php-7.3.9RC1\n\n# 编译安装\n# 注：7.3已经取消mysql，mcrypt\n./configure \\\n--prefix=/usr/local/php \\\n--with-config-file-path=/usr/local/php/etc \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-iconv-dir \\\n--with-freetype-dir \\\n--with-jpeg-dir \\\n--with-png-dir \\\n--with-zlib \\\n--with-libxml-dir= \\\n--enable-xml \\\n--disable-rpath \\\n--enable-bcmath \\\n--enable-shmop \\\n--enable-sysvsem \\\n--enable-inline-optimization \\\n--with-curl \\\n--enable-mbregex \\\n--enable-fpm \\\n--enable-mbstring \\\n--with-gd \\\n--with-openssl \\\n--with-mhash \\\n--enable-pcntl \\\n--enable-sockets \\\n--with-xmlrpc \\\n--enable-zip \\\n--enable-soap \\\n--enable-opcache\n\n\nmake &amp;&amp; make install\n</code></pre>\n<h3 id=\"h3-u57FAu672Cu914Du7F6E\"><a name=\"基本配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>基本配置</h3><pre><code class=\"lang-shell\">#源码中复制配置文件\ncp php.ini-development /usr/local/php/etc/php.ini\n#复制php-fpm\ncp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\n#复制www.conf\ncp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf\n\n#编辑www.conf设置为\nuser = www\ngroup = www\n#保存退出\n\n#源码中复制启动脚本并设置执行权限\ncp /root/php-7.3.9RC1/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\nchmod +x /etc/init.d/php-fpm\n\n#加入开机启动\nchkconfig --add php-fpm\n\n#启动php\nservice php-fpm start\n</code></pre>\n<h4 id=\"h4-u5176u4ED6u914Du7F6E\"><a name=\"其他配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>其他配置</h4><p>php加入环境变量</p>\n<pre><code class=\"lang-shell\">vim /etc/profile\n#最下面加入内容 export PATH=$PATH:/usr/local/php/bin\nsource /etc/profile\n</code></pre>\n<hr>\n<h3 id=\"h3-u8E29u5751\"><a name=\"踩坑\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>踩坑</h3><h4 id=\"h4-1-configure-error-please-reinstall-the-libzip-distribution\"><a name=\"1.configure: error: Please reinstall the libzip distribution\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.configure: error: Please reinstall the libzip distribution</h4><pre><code class=\"lang-shell\">#部分错误消息：\nchecking for zip archive read/writesupport... yes\nchecking pcre install prefix... no\nchecking libzip... yes\nchecking for the location of zlib... /usr\nchecking for pkg-config... (cached) /usr/bin/pkg-config\nchecking for libzip... not found\nconfigure: error: Please reinstall the libzip distribution\n\n#解决方案：安装libzip\nyum -y install libzip\nyum -y install libzip-devel\n</code></pre>\n<h4 id=\"h4-2-checking-for-libzip-configure-error-system-libzip-must-be-upgraded-to-version-gt-0-11\"><a name=\"2.checking for libzip… configure: error: system libzip must be upgraded to version &gt;= 0.11\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.checking for libzip… configure: error: system libzip must be upgraded to version &gt;= 0.11</h4><pre><code class=\"lang-shell\"># 部分错误消息：\nchecking whether libxml build works... (cached) yes\nchecking for XSL support... no\nchecking whether to enable zend-test extension... no\nchecking for zip archive read/writesupport... yes\nchecking pcre install prefix... no\nchecking libzip... yes\nchecking for the location of zlib... /usr\nchecking for pkg-config... (cached) /usr/bin/pkg-config\nchecking for libzip... configure: error: system libzip must be upgraded to version &gt;= 0.11\n\n#解决方案：卸载libzip后安装高版本\nyum -y remove libzip\nyum -y remove libzip-devel\nwget https://libzip.org/download/libzip-1.3.2.tar.gz\ntar -zxvf libzip-1.3.2.tar.gz\ncd libzip-1.3.2\n./configure\nmake &amp;&amp; make install\n</code></pre>\n<h4 id=\"h4-3-configure-error-off_t-undefined-check-your-library-configuration\"><a name=\"3.configure: error: off_t undefined; check your library configuration\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.configure: error: off_t undefined; check your library configuration</h4><pre><code class=\"lang-shell\"># 部分错误消息：\nchecking for uint64_t... (cached) yes\nchecking for ssize_t... yes\nchecking size of short... (cached) 2\nchecking size of int... (cached) 4\nchecking size of long... (cached) 8\nchecking size of long long... (cached) 8\nchecking size of off_t... 0\nconfigure: error: off_t undefined; check your library configuration\n\n# 解决方案：\nvim /etc/ld.so.conf \n#添加如下几行\n/usr/local/lib64\n/usr/local/lib\n/usr/lib\n/usr/lib64 \n#保存退出 \n#使之生效\nldconfig -v\n</code></pre>\n', '> 安装版本：php-7.3.9RC1.tar.gz\n> 下载地址：[官网下载](https://downloads.php.net/~cmb/php-7.3.9RC1.tar.gz \"官网下载\")\n> 注意事项：安装前请先安装基本扩展，参考最小化安装centos文中第8条\n\n### 编译安装\n```shell\n# 新增用户和用户组www\ngroupadd www\nuseradd www -g www\n\n# 下载软件包\nwget https://downloads.php.net/~cmb/php-7.3.9RC1.tar.gz\n\n# 解压\ntar -zxvf php-7.3.9RC1.tar.gz\ncd php-7.3.9RC1\n\n# 编译安装\n# 注：7.3已经取消mysql，mcrypt\n./configure \\\n--prefix=/usr/local/php \\\n--with-config-file-path=/usr/local/php/etc \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-iconv-dir \\\n--with-freetype-dir \\\n--with-jpeg-dir \\\n--with-png-dir \\\n--with-zlib \\\n--with-libxml-dir= \\\n--enable-xml \\\n--disable-rpath \\\n--enable-bcmath \\\n--enable-shmop \\\n--enable-sysvsem \\\n--enable-inline-optimization \\\n--with-curl \\\n--enable-mbregex \\\n--enable-fpm \\\n--enable-mbstring \\\n--with-gd \\\n--with-openssl \\\n--with-mhash \\\n--enable-pcntl \\\n--enable-sockets \\\n--with-xmlrpc \\\n--enable-zip \\\n--enable-soap \\\n--enable-opcache\n\n\nmake && make install\n```\n\n### 基本配置\n```shell\n#源码中复制配置文件\ncp php.ini-development /usr/local/php/etc/php.ini\n#复制php-fpm\ncp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\n#复制www.conf\ncp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf\n\n#编辑www.conf设置为\nuser = www\ngroup = www\n#保存退出\n\n#源码中复制启动脚本并设置执行权限\ncp /root/php-7.3.9RC1/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\nchmod +x /etc/init.d/php-fpm\n\n#加入开机启动\nchkconfig --add php-fpm\n\n#启动php\nservice php-fpm start\n```\n\n#### 其他配置\n\nphp加入环境变量\n```shell\nvim /etc/profile\n#最下面加入内容 export PATH=$PATH:/usr/local/php/bin\nsource /etc/profile\n```\n\n------\n\n### 踩坑\n#### 1.configure: error: Please reinstall the libzip distribution\n```shell\n#部分错误消息：\nchecking for zip archive read/writesupport... yes\nchecking pcre install prefix... no\nchecking libzip... yes\nchecking for the location of zlib... /usr\nchecking for pkg-config... (cached) /usr/bin/pkg-config\nchecking for libzip... not found\nconfigure: error: Please reinstall the libzip distribution\n\n#解决方案：安装libzip\nyum -y install libzip\nyum -y install libzip-devel\n```\n\n#### 2.checking for libzip... configure: error: system libzip must be upgraded to version >= 0.11\n```shell\n# 部分错误消息：\nchecking whether libxml build works... (cached) yes\nchecking for XSL support... no\nchecking whether to enable zend-test extension... no\nchecking for zip archive read/writesupport... yes\nchecking pcre install prefix... no\nchecking libzip... yes\nchecking for the location of zlib... /usr\nchecking for pkg-config... (cached) /usr/bin/pkg-config\nchecking for libzip... configure: error: system libzip must be upgraded to version >= 0.11\n\n#解决方案：卸载libzip后安装高版本\nyum -y remove libzip\nyum -y remove libzip-devel\nwget https://libzip.org/download/libzip-1.3.2.tar.gz\ntar -zxvf libzip-1.3.2.tar.gz\ncd libzip-1.3.2\n./configure\nmake && make install\n```\n\n#### 3.configure: error: off_t undefined; check your library configuration\n```shell\n# 部分错误消息：\nchecking for uint64_t... (cached) yes\nchecking for ssize_t... yes\nchecking size of short... (cached) 2\nchecking size of int... (cached) 4\nchecking size of long... (cached) 8\nchecking size of long long... (cached) 8\nchecking size of off_t... 0\nconfigure: error: off_t undefined; check your library configuration\n\n# 解决方案：\nvim /etc/ld.so.conf \n#添加如下几行\n/usr/local/lib64\n/usr/local/lib\n/usr/lib\n/usr/lib64 \n#保存退出 \n#使之生效\nldconfig -v\n```\n', '2019-08-29 14:20:51', '2020-08-10 12:46:46', 302, 1);
INSERT INTO `bg_article` VALUES (33, 'Centos7.6安装 Mysql5.7.24', '1567066660', 'Centos 7.6安装 Mysql5.7.24，安装基础的msyql,不进行编译安装了，编译安装太慢。', 'Centos7,Mysql5.7', '', '<blockquote>\n<p>软件版本：Mysql5.7.24</p>\n</blockquote>\n<h4 id=\"h4--mariadb\"><a name=\"卸载mariadb\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>卸载mariadb</h4><pre><code class=\"lang-shell\">#搜索已安装mariadb\nrpm -qa | grep mariadb\n#卸载相关服务，我这里只有一个\nrpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64\n</code></pre>\n<h4 id=\"h4-u65B0u589Eu7528u6237u548Cu7528u6237u7EC4\"><a name=\"新增用户和用户组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>新增用户和用户组</h4><pre><code class=\"lang-shell\">groupadd mysql\nuseradd mysql -g mysql\n</code></pre>\n<h4 id=\"h4-u5B89u88C5\"><a name=\"安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装</h4><pre><code class=\"lang-shell\">#下载\nwget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz\n#解压\ntar -zxvf mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz\n#重命名\nmv mysql-5.7.27-linux-glibc2.12-x86_64 mysql\n#复制到指定目录\ncp -R mysql /usr/local\n</code></pre>\n<h4 id=\"h4-u914Du7F6E\"><a name=\"配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置</h4><p>在/usr/local/mysql下创建文件my.cnf<br>加入下列内容：</p>\n<pre><code class=\"lang-shell\">[client]\nport = 3306\ndefault-character-set=utf8\n\n[mysqld]\nbasedir = /usr/local/mysql\ndatadir = /data/mysql/data\nport = 3306\ncharacter-set-server=utf8\ndefault_storage_engine = InnoDB\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n</code></pre>\n<p>配置启动脚本</p>\n<ul>\n<li>cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</li><li>修改脚本内容如下<pre><code class=\"lang-shell\">basedir=/usr/local/mysql\ndatadir=/usr/local/mysql/data\n</code></pre>\n</li></ul>\n<p>初始化Mysql，初始化完成会有默认密码，记牢！</p>\n<pre><code class=\"lang-shell\">/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql/data\n</code></pre>\n<p><img src=\"http://static.iuxiao.com/image/2019/08/29/4feaa0ed1ecb9132bf1fd450b948bd402cc0e74f.png\" alt=\"\"></p>\n<p>启动mysql</p>\n<pre><code class=\"lang-shell\">service mysql start\n</code></pre>\n<h4 id=\"h4-u914Du7F6Eu5BC6u7801u4EE5u53CAu8FDCu7A0Bu767Bu5F55\"><a name=\"配置密码以及远程登录\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>配置密码以及远程登录</h4><pre><code class=\"lang-shell\">./mysql -uroot -p\n#输入密码\n#修改密码\nset password=password(&#39;新密码&#39;);\n#设置远端访问\nGRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;访问密码&#39;;\nflush privileges;\n</code></pre>\n<h4 id=\"h4-u5176u4ED6u914Du7F6E\"><a name=\"其他配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>其他配置</h4><pre><code class=\"lang-shell\"># 开机启动\nchkconfig --add mysql\n# 环境变量\nvim /etc/profile\n##加入下列内容\nexport MYSQL_HOME=/usr/local/mysql\nexport PATH=$PATH:$MYSQL_HOME/bin\n##保存退出\nsource /etc/profile\n</code></pre>\n<h4 id=\"h4--my-cnf-\"><a name=\"附上一份my.cnf配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>附上一份my.cnf配置</h4><pre><code class=\"lang-shell\">[client]\nsocket = /dev/shm/mysql.sock\ndefault-character-set = utf8mb4\nport = 3306\n\n[mysqld]\n#端口号 线上环境中最好不要使用默认端口号\nport = 3306\n#mysql用户\nuser = mysql\n#表默认存储引擎\ndefault-storage-engine = InnoDB\n#服务端字符集 utf8mb4 支持表情存储\ncharacter_set_server = utf8mb4\n#服务端校对字符集\ncollation-server = utf8mb4_general_ci\n#表名字是否区分大小写 1 不区分 0 区分\nlower_case_table_names = 1\n#######################################################################################\n#表示是本机的序号\nserver-id = ${serverId}\n#开启 二进制日志\nlog-bin = mysql-bin\n#每次有事物提交 都更新二进制日志  0表示 跟随系统缓冲  0的性能最好，同步的延时高 1 性能低 同步的延时低\nsync_binlog = 0\n#指定二进制索引文件的名称\nlog-bin-index = mysql-bin.index\n# 自动清理 30 天前的log文文件\nexpire_logs_days = 30\n#忽略不同步的数据库\nbinlog-ignore-db = mysql\nbinlog-ignore-db = test\nbinlog-ignore-db = information_schema\n#######################################################################################\n#服务端最大连接数（所有数据库/用户总和）\nmax_connections = ${max_connections}\n#用户最大连接数，存在多个用户的情况下 这个值必须小于 最大连接数\nmax_user_connections = ${max_user_connections}\n#服务端接收数据包的大小，不要设置过大，在导入sql的时候可以适当提高\nmax-allowed-packet = 16M\n#客户端连接出错的最大次数，超过这个次数就会被禁止连接，主要是网络出错  如  TCP握手未完成  在高并发下可以设置大一些\nmax-connect-errors = 200000\n#没建立tcp连接的请求队列放入缓存中，队列大小为back_log\nback_log = 51200\n#打开文件限制 受系统配置影响\nopen-files-limit = ${open_files_limit}\n#客户端mysql服务器建立连接时，服务器返回错误握手协议前等待客户端数据包的最大时限，这个值不要设置太高 这里出错后就会增加 connect-errors的 记录 当 连接错误&gt;=max-connect-errors 就会禁止客户端连接\nconnect-timeout = 10\n#长连接保持时间 如果存在负载均衡  注意负载均衡保持长连接的时间\nwait-timeout = 28800\n#sql语句锁的最长时间\nlock_wait_timeout = 86400\n#连接最大空闲时间（未传输数据）\ninteractive-timeout = 300\n#基本路径  其他的相对路径相对于此路径\nbasedir = /data/mysql/\n#存放数据目录，此目录必须放在挂载目录下\ndatadir = /data/mysql/data/\n#错误日志记录路径\nlog_error = /data/mysql/log/mysql_error.log\n#socket路径  这个路径最好配置在内存中\nsocket = /dev/shm/mysql.sock\n#是否记录没有使用索引查询语句 在线上环境中关闭 测试环境可以开启\nlog-queries-not-using-indexes = 0\n#是否开启慢日志  在线上环境中关闭  测试环境中看可以开启\nslow-query-log = 0\n#慢查询的时间 1 秒\nlong_query_time = 1\n#慢查询日志文件\nslow-query-log-file = /data/mysql/log/mysql-slow.log\n#缓存线程的数量 避免重复创建线程 设置规则 1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大\nthread_cache_size = 64\n#临时表的大小，如果超过该值，则结果放到磁盘中 这个值不要设置过大  可能导致内存不足  写sql时要避免产生临时表\ntmp-table-size = 64M\n#设置MEMORY (HEAP)表可以增长到的最大空间大小 和 tmp-table-size 功能一样\nmax-heap-table-size = 64M\n#查询结果缓存 0:关闭，1:打开，2:只有select中明确指定SQL_CACHE才缓存\nquery-cache-type = 1\n#查询缓存总大小 不要设置太大 这值会影响 更新和新增的速度 写为主的库应降低缓存大小或禁用 读为主的数据库 应当增大\nquery-cache-size = 512M\n#单个查询缓存大小  不要设置过大  查询的时候应当避免返回大的结果集\nquery_cache_limit = 5M\n\n# INNODB #\ndefault-storage-engine = INNODB\n#两组事物日志\ninnodb-log-files-in-group = 2\n#事物日志缓存大小\ninnodb_log_buffer_size = 8M\n#事物日志大小\ninnodb-log-file-size = 512M\n#每次commit 日志缓存中的数据刷到磁盘中\ninnodb-flush-log-at-trx-commit = 1\n# 1独立表空间  0 共享表空间  设置为 1 会好一些\ninnodb-file-per-table = 1\n#数据页、索引页、插入缓存、锁信息、自适应哈希所以、数据字典信息\ninnodb-buffer-pool-size = ${innodb_buffer_pool_size}M\n#事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的 锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置\ninnodb_lock_wait_timeout = 120\n#提交日志方式 0 每秒一次地写入buffer-&gt;flush  ，1 事务提交时 -&gt;buffer -&gt;flush, 2 -&gt;buffer 每秒 flush\ninnodb_flush_log_at_trx_commit = 2\n#事物隔离级别 未提交读：READ-UNCOMMITTED, 已提交读：READ-COMMITTED, 可重复读：REPEATABLE-READ, 可串行化：SERIALIZABLE.\ntransaction-isolation = READ-COMMITTED\n#刷新数据到磁盘的方式  O_DIRECT 通过 innodb buffer 刷新日志 不经过系统缓冲\ninnodb-flush-method = O_DIRECT\n#是否开启严格模式  线上环境测试环境都应该开启  提高sql的质量\ninnodb-strict-mode = 1\n\n# MyISAM #\nkey_buffer_size = ${key_buffer_size}M\n#排序内存 不是越大越好，connection级的参数，过大的设置+高并发可能会耗尽系统内存资源  排序的时候尽量根据索引排序\nsort_buffer_size = 4M\n#表间关联缓存大小，和sort_buffer_size一样\njoin_buffer_size = 4M\n#查询操作缓存大小，和sort_buffer_size一样\nread_buffer_size = 4M\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld_safe]\npid-file = /data/mysql/mysqld.pid\nlog-error = /data/mysql/log/mysql_error.log\n</code></pre>\n', '> 软件版本：Mysql5.7.24\n\n#### 卸载mariadb\n```shell\n#搜索已安装mariadb\nrpm -qa | grep mariadb\n#卸载相关服务，我这里只有一个\nrpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64\n```\n\n#### 新增用户和用户组\n```shell\ngroupadd mysql\nuseradd mysql -g mysql\n```\n\n#### 安装\n```shell\n#下载\nwget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz\n#解压\ntar -zxvf mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz\n#重命名\nmv mysql-5.7.27-linux-glibc2.12-x86_64 mysql\n#复制到指定目录\ncp -R mysql /usr/local\n```\n\n#### 配置\n在/usr/local/mysql下创建文件my.cnf\n加入下列内容：\n```shell\n[client]\nport = 3306\ndefault-character-set=utf8\n\n[mysqld]\nbasedir = /usr/local/mysql\ndatadir = /data/mysql/data\nport = 3306\ncharacter-set-server=utf8\ndefault_storage_engine = InnoDB\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n配置启动脚本\n- cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql\n- 修改脚本内容如下\n```shell\nbasedir=/usr/local/mysql\ndatadir=/usr/local/mysql/data\n```\n\n初始化Mysql，初始化完成会有默认密码，记牢！\n```shell\n/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql/data\n```\n![](http://static.iuxiao.com/image/2019/08/29/4feaa0ed1ecb9132bf1fd450b948bd402cc0e74f.png)\n\n启动mysql\n```shell\nservice mysql start\n```\n\n#### 配置密码以及远程登录\n```shell\n./mysql -uroot -p\n#输入密码\n#修改密码\nset password=password(\'新密码\');\n#设置远端访问\nGRANT ALL PRIVILEGES ON *.* TO \'root\'@\'%\' IDENTIFIED BY \'访问密码\';\nflush privileges;\n```\n\n#### 其他配置\n```shell\n# 开机启动\nchkconfig --add mysql\n# 环境变量\nvim /etc/profile\n##加入下列内容\nexport MYSQL_HOME=/usr/local/mysql\nexport PATH=$PATH:$MYSQL_HOME/bin\n##保存退出\nsource /etc/profile\n```\n\n#### 附上一份my.cnf配置\n```shell\n[client]\nsocket = /dev/shm/mysql.sock\ndefault-character-set = utf8mb4\nport = 3306\n\n[mysqld]\n#端口号 线上环境中最好不要使用默认端口号\nport = 3306\n#mysql用户\nuser = mysql\n#表默认存储引擎\ndefault-storage-engine = InnoDB\n#服务端字符集 utf8mb4 支持表情存储\ncharacter_set_server = utf8mb4\n#服务端校对字符集\ncollation-server = utf8mb4_general_ci\n#表名字是否区分大小写 1 不区分 0 区分\nlower_case_table_names = 1\n#######################################################################################\n#表示是本机的序号\nserver-id = ${serverId}\n#开启 二进制日志\nlog-bin = mysql-bin\n#每次有事物提交 都更新二进制日志  0表示 跟随系统缓冲  0的性能最好，同步的延时高 1 性能低 同步的延时低\nsync_binlog = 0\n#指定二进制索引文件的名称\nlog-bin-index = mysql-bin.index\n# 自动清理 30 天前的log文文件\nexpire_logs_days = 30\n#忽略不同步的数据库\nbinlog-ignore-db = mysql\nbinlog-ignore-db = test\nbinlog-ignore-db = information_schema\n#######################################################################################\n#服务端最大连接数（所有数据库/用户总和）\nmax_connections = ${max_connections}\n#用户最大连接数，存在多个用户的情况下 这个值必须小于 最大连接数\nmax_user_connections = ${max_user_connections}\n#服务端接收数据包的大小，不要设置过大，在导入sql的时候可以适当提高\nmax-allowed-packet = 16M\n#客户端连接出错的最大次数，超过这个次数就会被禁止连接，主要是网络出错  如  TCP握手未完成  在高并发下可以设置大一些\nmax-connect-errors = 200000\n#没建立tcp连接的请求队列放入缓存中，队列大小为back_log\nback_log = 51200\n#打开文件限制 受系统配置影响\nopen-files-limit = ${open_files_limit}\n#客户端mysql服务器建立连接时，服务器返回错误握手协议前等待客户端数据包的最大时限，这个值不要设置太高 这里出错后就会增加 connect-errors的 记录 当 连接错误>=max-connect-errors 就会禁止客户端连接\nconnect-timeout = 10\n#长连接保持时间 如果存在负载均衡  注意负载均衡保持长连接的时间\nwait-timeout = 28800\n#sql语句锁的最长时间\nlock_wait_timeout = 86400\n#连接最大空闲时间（未传输数据）\ninteractive-timeout = 300\n#基本路径  其他的相对路径相对于此路径\nbasedir = /data/mysql/\n#存放数据目录，此目录必须放在挂载目录下\ndatadir = /data/mysql/data/\n#错误日志记录路径\nlog_error = /data/mysql/log/mysql_error.log\n#socket路径  这个路径最好配置在内存中\nsocket = /dev/shm/mysql.sock\n#是否记录没有使用索引查询语句 在线上环境中关闭 测试环境可以开启\nlog-queries-not-using-indexes = 0\n#是否开启慢日志  在线上环境中关闭  测试环境中看可以开启\nslow-query-log = 0\n#慢查询的时间 1 秒\nlong_query_time = 1\n#慢查询日志文件\nslow-query-log-file = /data/mysql/log/mysql-slow.log\n#缓存线程的数量 避免重复创建线程 设置规则 1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大\nthread_cache_size = 64\n#临时表的大小，如果超过该值，则结果放到磁盘中 这个值不要设置过大  可能导致内存不足  写sql时要避免产生临时表\ntmp-table-size = 64M\n#设置MEMORY (HEAP)表可以增长到的最大空间大小 和 tmp-table-size 功能一样\nmax-heap-table-size = 64M\n#查询结果缓存 0:关闭，1:打开，2:只有select中明确指定SQL_CACHE才缓存\nquery-cache-type = 1\n#查询缓存总大小 不要设置太大 这值会影响 更新和新增的速度 写为主的库应降低缓存大小或禁用 读为主的数据库 应当增大\nquery-cache-size = 512M\n#单个查询缓存大小  不要设置过大  查询的时候应当避免返回大的结果集\nquery_cache_limit = 5M\n\n# INNODB #\ndefault-storage-engine = INNODB\n#两组事物日志\ninnodb-log-files-in-group = 2\n#事物日志缓存大小\ninnodb_log_buffer_size = 8M\n#事物日志大小\ninnodb-log-file-size = 512M\n#每次commit 日志缓存中的数据刷到磁盘中\ninnodb-flush-log-at-trx-commit = 1\n# 1独立表空间  0 共享表空间  设置为 1 会好一些\ninnodb-file-per-table = 1\n#数据页、索引页、插入缓存、锁信息、自适应哈希所以、数据字典信息\ninnodb-buffer-pool-size = ${innodb_buffer_pool_size}M\n#事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的 锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置\ninnodb_lock_wait_timeout = 120\n#提交日志方式 0 每秒一次地写入buffer->flush  ，1 事务提交时 ->buffer ->flush, 2 ->buffer 每秒 flush\ninnodb_flush_log_at_trx_commit = 2\n#事物隔离级别 未提交读：READ-UNCOMMITTED, 已提交读：READ-COMMITTED, 可重复读：REPEATABLE-READ, 可串行化：SERIALIZABLE.\ntransaction-isolation = READ-COMMITTED\n#刷新数据到磁盘的方式  O_DIRECT 通过 innodb buffer 刷新日志 不经过系统缓冲\ninnodb-flush-method = O_DIRECT\n#是否开启严格模式  线上环境测试环境都应该开启  提高sql的质量\ninnodb-strict-mode = 1\n\n# MyISAM #\nkey_buffer_size = ${key_buffer_size}M\n#排序内存 不是越大越好，connection级的参数，过大的设置+高并发可能会耗尽系统内存资源  排序的时候尽量根据索引排序\nsort_buffer_size = 4M\n#表间关联缓存大小，和sort_buffer_size一样\njoin_buffer_size = 4M\n#查询操作缓存大小，和sort_buffer_size一样\nread_buffer_size = 4M\n\n[mysql]\ndefault-character-set = utf8mb4\n\n[mysqld_safe]\npid-file = /data/mysql/mysqld.pid\nlog-error = /data/mysql/log/mysql_error.log\n```', '2019-08-29 16:17:40', '2020-08-09 11:07:44', 394, 1);
INSERT INTO `bg_article` VALUES (34, 'PHP实现打包ZIP并下载文件', '1569242716', '今天有一个需求，要求使用浏览器实现把文件打包zip下载到到本地的功能，这里记录一下', 'PHP,打包ZIP,下载文件', '', '<blockquote>\n<p>今天有一个需求，要求使用浏览器实现把文件打包zip下载到到本地的功能，这里记录一下</p>\n</blockquote>\n<p>使用PHP自带的压缩包扩展以及glob函数来实现功能。</p>\n<pre><code class=\"lang-php\">$path = dirname(__FILE__) . &#39;/file/&#39;;\n$datetime = date(&#39;YmdHis&#39;);\n$zipFile = $path . $datetime . &#39;.zip&#39;;\n\n// 打包ZIP文件\n$zip = new ZipArchive();\n$zip-&gt;open($zipFile, ZipArchive::CREATE); // 打开压缩包文件、不存在则创建\n$files = glob($path . &#39;*&#39;);\nforeach ($files as $file) {\n    $zip-&gt;addFile($file, basename($file));\n}\n$zip-&gt;close();\n\n// 下载文件\n$fp = fopen($zipFile, &quot;r&quot;);\n$fileSize = filesize($zipFile);\nheader(&quot;Content-type:application/octet-stream&quot;);\nheader(&quot;Accept-Ranges:bytes&quot;);\nheader(&quot;Accept-Length:&quot;.$fileSize);\nheader(&quot;Content-Disposition: attachment; filename=&quot;.$datetime.&#39;.zip&#39;);\n\n// 向浏览器返回数据\n$buffer = 2048;  //设置一次读取的字节数，每读取一次，就输出数据（即返回给浏览器）\n$fileCount = 0; //读取的总字节数\nwhile (!feof($fp) &amp;&amp; $fileCount &lt; $fileSize) {\n    $fileCon = fread($fp, $buffer);\n    $fileCount += $buffer;\n    echo $fileCon;\n}\nfclose($fp);\n\n// 下载完成后删除压缩包，临时文件\nif ($fileCount &gt;= $fileSize) {\n    unlink($zipFile);\n    // 删除所有单文件\n    // array_map(&#39;unlink&#39;,glob($path.&#39;*&#39;));\n}\n</code></pre>\n', '>今天有一个需求，要求使用浏览器实现把文件打包zip下载到到本地的功能，这里记录一下\n\n使用PHP自带的压缩包扩展以及glob函数来实现功能。\n\n```php\n$path = dirname(__FILE__) . \'/file/\';\n$datetime = date(\'YmdHis\');\n$zipFile = $path . $datetime . \'.zip\';\n\n// 打包ZIP文件\n$zip = new ZipArchive();\n$zip->open($zipFile, ZipArchive::CREATE); // 打开压缩包文件、不存在则创建\n$files = glob($path . \'*\');\nforeach ($files as $file) {\n    $zip->addFile($file, basename($file));\n}\n$zip->close();\n\n// 下载文件\n$fp = fopen($zipFile, \"r\");\n$fileSize = filesize($zipFile);\nheader(\"Content-type:application/octet-stream\");\nheader(\"Accept-Ranges:bytes\");\nheader(\"Accept-Length:\".$fileSize);\nheader(\"Content-Disposition: attachment; filename=\".$datetime.\'.zip\');\n\n// 向浏览器返回数据\n$buffer = 2048;  //设置一次读取的字节数，每读取一次，就输出数据（即返回给浏览器）\n$fileCount = 0; //读取的总字节数\nwhile (!feof($fp) && $fileCount < $fileSize) {\n    $fileCon = fread($fp, $buffer);\n    $fileCount += $buffer;\n    echo $fileCon;\n}\nfclose($fp);\n\n// 下载完成后删除压缩包，临时文件\nif ($fileCount >= $fileSize) {\n    unlink($zipFile);\n    // 删除所有单文件\n    // array_map(\'unlink\',glob($path.\'*\'));\n}\n```', '2019-09-23 20:45:16', '2020-08-09 11:07:57', 287, 1);
INSERT INTO `bg_article` VALUES (35, '关于 Linux 提示：设备上没有空间（no space left on device）', '1571146809', 'centos7 上redis、mysql、创建文件等都无法操作，系统直接提示：设备上没有空间（no space left on device）', 'Linux ,设备,空间,no space', '', '<blockquote>\n<p>centos 7 提示设备上没有空间，redis、mysql、创建文件等都无法操作。</p>\n</blockquote>\n<h2 id=\"h2-u95EEu9898u5206u6790\"><a name=\"问题分析\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>问题分析</h2><p>该提示一般有两种情况<br>1、磁盘空间满了，是用 df 命令查看磁盘使用情况，我的磁盘目前是正常的。<br><img src=\"http://static.iuxiao.com/image/2019/10/15/acc154e9545ce31ff5338cac75540ac6ef7269e7.png\" alt=\"\"></p>\n<p>2、Inodes满了，使用 df -ia 查看Inodes使用情况</p>\n<ul>\n<li>inode：即索引节点编号（记录文件的大小，佣有者，权限，区块地方等信息可以通过 stat 命令查看），每个分区中都会有固定大小的inode容量，每个inode节点也会占用硬盘空间，一般是128字节或256字节，inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。下图是正常的Inodes情况：</li></ul>\n<p><img src=\"http://static.iuxiao.com/image/2019/10/15/8115b5a7300de262ea2da83631402d0255a4f640.png\" alt=\"\"></p>\n<blockquote>\n<p>情况1直接删除掉一些不用的文件就可解决问题；情况2说明磁盘碎片文件太多，删掉些日志文件或不需要的文件即可</p>\n</blockquote>\n<h2 id=\"h2-u6211u7684u5904u7406\"><a name=\"我的处理\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>我的处理</h2><p>经查询 /var/spool/postfix/maildrop 下存在大量文件，超过400万，直接导致 Inodes 100%，删除后恢复正常。</p>\n<p>当不知道有哪些目录中存在大量碎片文件时，可通过命令：</p>\n<pre><code>#查找出超过10M的目录，再行处理\nfind / -type d -size +10M\n</code></pre><p>当找到的目录中存在上百万文件时 rm 是无法一次性删除的，可以使用rsync命令来删除：</p>\n<pre><code>#创建临时空目录\nmkdir /tmp/del_path\n#删除/val/logs/下所有文件\nrsync --delete  -a -H -v  /tmp/del_path/  /val/logs/\n</code></pre>', '> centos 7 提示设备上没有空间，redis、mysql、创建文件等都无法操作。\n\n##问题分析\n该提示一般有两种情况\n1、磁盘空间满了，是用 df 命令查看磁盘使用情况，我的磁盘目前是正常的。\n![](http://static.iuxiao.com/image/2019/10/15/acc154e9545ce31ff5338cac75540ac6ef7269e7.png)\n\n2、Inodes满了，使用 df -ia 查看Inodes使用情况\n- inode：即索引节点编号（记录文件的大小，佣有者，权限，区块地方等信息可以通过 stat 命令查看），每个分区中都会有固定大小的inode容量，每个inode节点也会占用硬盘空间，一般是128字节或256字节，inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。下图是正常的Inodes情况：\n\n![](http://static.iuxiao.com/image/2019/10/15/8115b5a7300de262ea2da83631402d0255a4f640.png)\n\n> 情况1直接删除掉一些不用的文件就可解决问题；情况2说明磁盘碎片文件太多，删掉些日志文件或不需要的文件即可\n\n##我的处理\n经查询 /var/spool/postfix/maildrop 下存在大量文件，超过400万，直接导致 Inodes 100%，删除后恢复正常。\n\n当不知道有哪些目录中存在大量碎片文件时，可通过命令：\n```\n#查找出超过10M的目录，再行处理\nfind / -type d -size +10M\n```\n\n当找到的目录中存在上百万文件时 rm 是无法一次性删除的，可以使用rsync命令来删除：\n```\n#创建临时空目录\nmkdir /tmp/del_path\n#删除/val/logs/下所有文件\nrsync --delete  -a -H -v  /tmp/del_path/  /val/logs/\n```', '2019-10-15 21:40:09', '2020-08-04 22:11:34', 289, 1);
INSERT INTO `bg_article` VALUES (36, 'TCP协议', '1584016548', '记录一些关于TCP相关的内容，如TCP是什么，TCP的作用，他的原理又是什么等等。', 'TCP协议', '', '<blockquote>\n<p>TCP是什么，有什么作用，他的原理又是什么呢？接下来将一一说明。</p>\n</blockquote>\n<h3 id=\"h3-tcp-\"><a name=\"TCP是什么和他的作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>TCP是什么和他的作用</h3><p>tcp是一种协议，传输控制协议（TCP，Transmission Control Protocol），是一种面向链接的、可靠的、基于字节流的传输层通信协议。</p>\n<p>当更上一层应用层将数据流传到TCP层时，TCP将会把数据流切割成合适长度的报文，再传给IP层，由IP层将报文通过网络传递给目标地址上的TCP层。完成数据流的传输。</p>\n<p>TCP的目的是在跨越多个网络通信时，为两个通信端点之间提供一条通信方式。</p>\n<h3 id=\"h3-tcp-\"><a name=\"TCP的特点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>TCP的特点</h3><ul>\n<li>基于流的方式</li><li>面向连接</li><li>可靠通信方式</li><li>网络情况不佳时尽量降低重传带来的带宽消耗</li><li>连接维护的是面向通信的两个端点，不考虑中间网段和节点</li></ul>\n<p>为满足TCP协议上述特点，TCP协议规定如下：</p>\n<ul>\n<li>数据分片：</li><li>到达确认：</li><li>超时重发：</li><li>滑动窗口：</li><li>失序处理：</li><li>重复处理：</li><li>数据校验：</li></ul>\n<h3 id=\"h3-tcp-\"><a name=\"TCP报文详细说明\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>TCP报文详细说明</h3><p><img src=\"http://static.iuxiao.com/image/2020/03/12/795d583bf393fdd40e047c66f157b62a957712e1.png\" alt=\"\"></p>\n<ul>\n<li>Source Port是源端口，16位。</li><li>Destination Port是目的端口，16位。</li><li>Sequence Number是发送数据包中的第一个字节的序列号，32位。</li><li>Acknowledgment Number是确认序列号，32位。</li><li>Data Offset是数据偏移，4位，该字段的值是TCP首部（包括选项）长度除以4。</li><li>标志位： 6位，URG表示Urgent Pointer字段有意义：<br>ACK：表示Acknowledgment Number字段有意义<br>PSH：表示Push功能，RST表示复位TCP连接<br>SYN：表示SYN报文（在建立TCP连接的时候使用）<br>FIN：表示没有数据需要发送了（在关闭TCP连接的时候使用）<br>Window：表示接收缓冲区的空闲空间，16位，用来告诉TCP连接对端自己能够接收的最大数据长度。</li><li>Checksum是校验和，16位。</li><li>Urgent Pointers是紧急指针，16位，只有URG标志位被设置时该字段才有意义，表示紧急数据相对序列号（Sequence Number字段的值）的偏移。</li></ul>\n<h3 id=\"h3-tcp-\"><a name=\"TCP工作方式：三次握手和四次挥手\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>TCP工作方式：三次握手和四次挥手</h3><p>tcp是因特网中的传输层协议，使用三次握手机制建立连接后，进行两端的数据传输，当数据传输完毕后，使用四次挥手断开连接。</p>\n<h4 id=\"h4-u4E09u6B21u63E1u624B\"><a name=\"三次握手\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>三次握手</h4><p><img src=\"http://static.iuxiao.com/image/2020/03/12/f9381b9b1fc52ca4126dace90a9407607f8d2df3.png\" alt=\"\"></p>\n<ul>\n<li>客户端发送服务端FIN=1,seq=x,请求建立连接；客户端进入SYN-SEND状态</li><li>服务端发送客户端ACK=1,seq=y,ack=x+1,响应客户端；服务端进入SYN-RECV状态</li><li>客户端发送服务端ACK=1,seq=x+1,ack=y+1;进入ESTAB-LISHED状态</li></ul>\n<p>服务端(S)客户端(C)<br>第一次服务端确定：C发信能力，S收信能力<br>第二次客户端确定：C发信收信能力，S发信收信能力，此时S端不知道C端收信能力<br>第三次服务端确定：C发信收信能力，S发信收信能力</p>\n<h4 id=\"h4-u56DBu6B21u6325u624B\"><a name=\"四次挥手\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>四次挥手</h4><hr>\n<h5 id=\"h5--\"><a name=\"[参考文档]\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>[参考文档]</h5><p><a href=\"https://blog.csdn.net/wwl012345/article/details/90261423\">https://blog.csdn.net/wwl012345/article/details/90261423</a></p>\n', '> TCP是什么，有什么作用，他的原理又是什么呢？接下来将一一说明。\n\n###TCP是什么和他的作用\ntcp是一种协议，传输控制协议（TCP，Transmission Control Protocol），是一种面向链接的、可靠的、基于字节流的传输层通信协议。\n\n当更上一层应用层将数据流传到TCP层时，TCP将会把数据流切割成合适长度的报文，再传给IP层，由IP层将报文通过网络传递给目标地址上的TCP层。完成数据流的传输。\n\nTCP的目的是在跨越多个网络通信时，为两个通信端点之间提供一条通信方式。\n###TCP的特点\n - 基于流的方式\n - 面向连接\n - 可靠通信方式\n - 网络情况不佳时尽量降低重传带来的带宽消耗\n - 连接维护的是面向通信的两个端点，不考虑中间网段和节点\n\n为满足TCP协议上述特点，TCP协议规定如下：\n- 数据分片：\n- 到达确认：\n- 超时重发：\n- 滑动窗口：\n- 失序处理：\n- 重复处理：\n- 数据校验：\n\n\n###TCP报文详细说明\n![](http://static.iuxiao.com/image/2020/03/12/795d583bf393fdd40e047c66f157b62a957712e1.png)\n\n- Source Port是源端口，16位。\n- Destination Port是目的端口，16位。\n- Sequence Number是发送数据包中的第一个字节的序列号，32位。\n- Acknowledgment Number是确认序列号，32位。\n- Data Offset是数据偏移，4位，该字段的值是TCP首部（包括选项）长度除以4。\n- 标志位： 6位，URG表示Urgent Pointer字段有意义：\nACK：表示Acknowledgment Number字段有意义\nPSH：表示Push功能，RST表示复位TCP连接\nSYN：表示SYN报文（在建立TCP连接的时候使用）\nFIN：表示没有数据需要发送了（在关闭TCP连接的时候使用）\nWindow：表示接收缓冲区的空闲空间，16位，用来告诉TCP连接对端自己能够接收的最大数据长度。\n- Checksum是校验和，16位。\n- Urgent Pointers是紧急指针，16位，只有URG标志位被设置时该字段才有意义，表示紧急数据相对序列号（Sequence Number字段的值）的偏移。\n\n###TCP工作方式：三次握手和四次挥手\ntcp是因特网中的传输层协议，使用三次握手机制建立连接后，进行两端的数据传输，当数据传输完毕后，使用四次挥手断开连接。\n####三次握手\n![](http://static.iuxiao.com/image/2020/03/12/f9381b9b1fc52ca4126dace90a9407607f8d2df3.png)\n- 客户端发送服务端FIN=1,seq=x,请求建立连接；客户端进入SYN-SEND状态\n- 服务端发送客户端ACK=1,seq=y,ack=x+1,响应客户端；服务端进入SYN-RECV状态\n- 客户端发送服务端ACK=1,seq=x+1,ack=y+1;进入ESTAB-LISHED状态\n\n服务端(S)客户端(C)\n第一次服务端确定：C发信能力，S收信能力\n第二次客户端确定：C发信收信能力，S发信收信能力，此时S端不知道C端收信能力\n第三次服务端确定：C发信收信能力，S发信收信能力\n\n####四次挥手\n\n----\n#####[参考文档]\nhttps://blog.csdn.net/wwl012345/article/details/90261423', '2020-03-12 20:35:48', '2020-07-30 05:38:08', 55, 1);
INSERT INTO `bg_article` VALUES (37, 'Docker 如何在容器和宿主机之间拷贝复制文件', '1584090729', 'Docker 如何在容器和宿主机之间拷贝文件，从宿主机拷贝到容器和从容器拷贝到宿主机中。', 'docker,复制,拷贝,文件,宿主机,容器', '', '<h4 id=\"h4-u5BB9u5668u5230u5BBFu4E3Bu673A\"><a name=\"容器到宿主机\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>容器到宿主机</h4><pre><code>#docker cp 容器名:路径 宿主机地址\ndocker cp nginx:/etc/nginx/nginx.conf D:/dir/\n</code></pre><h4 id=\"h4-u5BBFu4E3Bu673Au5230u5BB9u5668\"><a name=\"宿主机到容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>宿主机到容器</h4><pre><code>#docker cp 宿主机地址 容器名:路径\ndocker cp D:/dir/file.log nginx:/etc/nginx/\n</code></pre><p>我尝试过是能直接拷贝目录的。</p>\n', '####容器到宿主机\n```\n#docker cp 容器名:路径 宿主机地址\ndocker cp nginx:/etc/nginx/nginx.conf D:/dir/\n```\n\n####宿主机到容器\n```\n#docker cp 宿主机地址 容器名:路径\ndocker cp D:/dir/file.log nginx:/etc/nginx/\n```\n\n我尝试过是能直接拷贝目录的。', '2020-03-13 17:12:09', '2020-07-30 05:38:07', 45, 1);
INSERT INTO `bg_article` VALUES (38, 'Docker 中搭建LNMP过程，用于快速搭建程序运行环境', '1584091460', '在windows 10 中的Docker下搭建LNMP过程，用于快速搭建程序运行环境', 'Docker,搭建,LNMP,Nginx,php,mysql', '', '<p>如何在win10下安装Docker这里就不记录了，网上搜索一大把。<br>需要注意容器的时区问题，这里就不做相关记录了。</p>\n<blockquote>\n<p> 参数说明：<br>-d : 后台运行<br>-p : 端口映射<br>-v : 目录文件映射<br>-e : 设置环境变量<br>—name : 容器名</p>\n</blockquote>\n<h4 id=\"h4-mysql\"><a name=\"Mysql\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Mysql</h4><p>新建临时容器获取配置文件</p>\n<pre><code>#新建容器\ndocker run -d --name tmp_mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n#复制配置\ndocker cp tmp_mysql:/etc/mysql/conf.d D:/docker/mysql/conf\n#删除容器\ndocker rm -f tmp_mysql\n</code></pre><p>运行容器和挂载目录</p>\n<pre><code>docker run -d --name mysql -p 3306:3306 -v d:/docker/mysql/conf/conf.d:/etc/mysql/conf.d -v d:/docker/mysql/logs:/logs -v d:/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n</code></pre><h4 id=\"h4-php\"><a name=\"PHP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>PHP</h4><p>新建临时容器获取配置文件</p>\n<pre><code>#新建容器\ndocker run -d --name tmp_php php:7.3-fpm\n#复制配置\ndocker cp tmp_php:/usr/local/etc d:/docker/php/conf\n#删除容器\ndocker rm -f tmp_php\n</code></pre><p>运行容器和挂载目录</p>\n<pre><code>docker run -d -p 9000:9000 --name php73 -v d:/docker/php/conf/etc:/usr/local/etc -v d:/docker/php/logs:/usr/local/var/log -v e:/code/php:/var/www/html  --link mysql:mysql  php:7.3-fpm\n</code></pre><h5 id=\"h5-php-\"><a name=\"PHP扩展安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>PHP扩展安装</h5><h4 id=\"h4-nginx\"><a name=\"Nginx\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Nginx</h4><p>创建零时容器获取配置文件</p>\n<pre><code>#创建\ndocker run -d --name tmp_nginx nginx\n#复制配置文件和目录\ndocker cp nginx:/etc/nginx/nginx.conf D:/docker/nginx/conf/nginx.conf\ndocker cp nginx:/etc/nginx/conf.d D:/docker/nginx/conf\n#删除零时容器\ndocker rm -f tmp_nginx\n</code></pre><p>运行新容器</p>\n<pre><code>docker run -d --name nginx -p 80:80 -v e:/code/php:/usr/share/nginx/html -v d:/docker/nginx/logs:/var/log/nginx -v d:/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v d:/docker/nginx/conf/conf.d:/etc/nginx/conf.d --link php73:php-fpm  nginx\n</code></pre><p>ningx 配置解析PHP</p>\n<pre><code>server {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    location ~ \\.php$ {\n        root   /usr/share/nginx/html;\n        fastcgi_pass   172.17.0.3:9000;\n        fastcgi_index  index.php;\n        #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}\n</code></pre>', '如何在win10下安装Docker这里就不记录了，网上搜索一大把。\n需要注意容器的时区问题，这里就不做相关记录了。\n\n>  参数说明：\n-d : 后台运行\n-p : 端口映射\n-v : 目录文件映射\n-e : 设置环境变量\n--name : 容器名\n\n####Mysql\n新建临时容器获取配置文件\n```\n#新建容器\ndocker run -d --name tmp_mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n#复制配置\ndocker cp tmp_mysql:/etc/mysql/conf.d D:/docker/mysql/conf\n#删除容器\ndocker rm -f tmp_mysql\n```\n\n运行容器和挂载目录\n```\ndocker run -d --name mysql -p 3306:3306 -v d:/docker/mysql/conf/conf.d:/etc/mysql/conf.d -v d:/docker/mysql/logs:/logs -v d:/docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n#### PHP\n新建临时容器获取配置文件\n```\n#新建容器\ndocker run -d --name tmp_php php:7.3-fpm\n#复制配置\ndocker cp tmp_php:/usr/local/etc d:/docker/php/conf\n#删除容器\ndocker rm -f tmp_php\n```\n\n运行容器和挂载目录\n```\ndocker run -d -p 9000:9000 --name php73 -v d:/docker/php/conf/etc:/usr/local/etc -v d:/docker/php/logs:/usr/local/var/log -v e:/code/php:/var/www/html  --link mysql:mysql  php:7.3-fpm\n```\n\n#####PHP扩展安装\n\n#### Nginx\n创建零时容器获取配置文件\n```\n#创建\ndocker run -d --name tmp_nginx nginx\n#复制配置文件和目录\ndocker cp nginx:/etc/nginx/nginx.conf D:/docker/nginx/conf/nginx.conf\ndocker cp nginx:/etc/nginx/conf.d D:/docker/nginx/conf\n#删除零时容器\ndocker rm -f tmp_nginx\n```\n运行新容器\n```\ndocker run -d --name nginx -p 80:80 -v e:/code/php:/usr/share/nginx/html -v d:/docker/nginx/logs:/var/log/nginx -v d:/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v d:/docker/nginx/conf/conf.d:/etc/nginx/conf.d --link php73:php-fpm  nginx\n```\nningx 配置解析PHP\n```\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    location ~ \\.php$ {\n        root   /usr/share/nginx/html;\n        fastcgi_pass   172.17.0.3:9000;\n        fastcgi_index  index.php;\n        #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}\n```', '2020-03-13 17:24:20', '2020-07-30 05:38:07', 52, 1);
INSERT INTO `bg_article` VALUES (39, 'Docker 中搭建LNMP过程(Dockerfile模式)，用于快速搭建程序运行环境', '1584601063', 'Docker 中搭建LNMP过程，用于快速搭建程序运行环境，本文将记录使用Dockerfile 搭建的详细过程，使用dockerfile模式更方便安装拓展的额外功能。', 'docker ,lnmp,dockerfile,php,mysql,nginx', '', '<h4 id=\"h4-dockerfile-mysql\"><a name=\"Dockerfile:MySQL\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Dockerfile:MySQL</h4><pre><code>FROM mysql:5.7\n\nENV TZ=Asia/Shanghai\n</code></pre><p>后续操作：</p>\n<pre><code># 编译\ndocker build -t mysql:57 ./\n# 临时镜像\ndocker run -itd -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:57\n# 配置文件\ndocker cp mysql:/etc/mysql/conf.d e:/lnmp/mysql\n# 删除容器\ndocker rm -f mysql\n# 运行容器\ndocker run -itd -p 3306:3306 --name mysql -v e:/lnmp/mysql/conf.d:/etc/mysql/conf.d -v e:/lnmp/mysql/data:/var/lib/mysql -v e:/lnmp/mysql/log:/logs -e MYSQL_ROOT_PASSWORD=root mysql:57\n</code></pre><h4 id=\"h4-dockerfile-php\"><a name=\"Dockerfile:PHP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Dockerfile:PHP</h4><pre><code>FROM php:7.3.7-fpm\n\nENV TZ=Asia/Shanghai\n\n#更换为国内源\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak\n\nRUN echo &quot;deb http://mirrors.163.com/debian/ buster main non-free contrib\\n\\\ndeb http://mirrors.163.com/debian/ buster-updates main non-free contrib\\n\\\ndeb http://mirrors.163.com/debian/ buster-backports main non-free contrib\\n\\\ndeb-src http://mirrors.163.com/debian/ buster main non-free contrib\\n\\\ndeb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib\\n\\\ndeb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib\\n\\\ndeb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib\\n\\\ndeb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib&quot; &gt;&gt; /etc/apt/sources.list\n\nRUN apt-get clean\nRUN apt-get update\nRUN apt-get install -y wget\n\nRUN apt-get install -y --no-install-recommends \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libpng-dev \\\n        libpq-dev \\\n        g++ \\\n        libicu-dev \\\n        libxml2-dev \\\n    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \\\n    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/freetype --with-jpeg-dir=/usr/include/ \\\n    &amp;&amp; docker-php-ext-install -j$(nproc) gd \\\n    &amp;&amp; rm -r /var/lib/apt/lists/*\n\nRUN docker-php-ext-install -j$(nproc) bcmath calendar exif gettext sockets dba mysqli pcntl pdo_mysql shmop sysvmsg sysvsem sysvshm\n\n#RUN pecl install memcached-3.1.3 &amp;&amp; docker-php-ext-enable memcached\nRUN pecl install redis-5.0.0 &amp;&amp; docker-php-ext-enable redis\n#RUN pecl install swoole-4.4.0 &amp;&amp; docker-php-ext-enable swoole\nRUN pecl install xdebug-2.7.2 &amp;&amp; docker-php-ext-enable xdebug\n#RUN docker-php-ext-configure opcache --enable-opcache &amp;&amp; docker-php-ext-install opcache\nRUN rm -rf /tmp/pear\n</code></pre><p>后续操作：</p>\n<pre><code>docker build -t php:737 ./\ndocker run -itd -p 9000:9000 --name php php:737\ndocker cp php:/usr/local/etc /lnmp/php\ndocker rm -f php\ndocker run -d -p 9000:9000 --name php -v e:/lnmp/php/etc:/usr/local/etc -v e:/lnmp/php/log:/usr/local/var/log -v e:/code/php:/var/www/html --link mysql:mysql php:737\n</code></pre><h4 id=\"h4-dockerfile-nginx\"><a name=\"Dockerfile:Nginx\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Dockerfile:Nginx</h4><pre><code>FROM centos\nMAINTAINER hellcox hellcox@163.com\nENV TZ=Asia/Shanghai\nRUN yum install -y gcc gcc-c++ glibc make autoconf openssl openssl-devel\nRUN yum install -y libxslt-devel -y gd gd-devel pcre pcre-devel\n\nADD nginx-1.17.9.tar.gz /usr/local/src\nRUN useradd -M -s /sbin/nologin nginx\nWORKDIR /usr/local/src/nginx-1.17.9\nRUN ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-file-aio  --with-http_ssl_module  --with-http_realip_module    --with-http_addition_module    --with-http_xslt_module   --with-http_image_filter_module   --with-http_sub_module  --with-http_dav_module --with-http_flv_module    --with-http_mp4_module --with-http_gunzip_module  --with-http_gzip_static_module  --with-http_auth_request_module  --with-http_random_index_module   --with-http_secure_link_module   --with-http_degradation_module   --with-http_stub_status_module &amp;&amp; make &amp;&amp; make install\n\nENV PATH /usr/local/nginx/sbin:$PATH\nEXPOSE 80\nCMD /bin/sh -c &#39;nginx -g &quot;daemon off;&quot;&#39;\n</code></pre><p>后续操作</p>\n<pre><code>docker build -t nginx:1179 ./\ndocker run -d --name nginx -p 80:80 nginx:1179\ndocker cp nginx:/usr/local/nginx/conf /lnmp/nginx\ndocker rm -f nginx\ndocker run -d --name nginx -p 80:80 -v e:/code/php:/usr/local/nginx/html -v e:/lnmp/nginx/log:/usr/local/nginx/logs -v e:/lnmp/nginx/conf:/usr/local/nginx/conf --link php:php-fpm nginx:1179\n</code></pre><h4 id=\"h4-nginx-\"><a name=\"nginx配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>nginx配置</h4><pre><code>server {\n    listen       80;\n    server_name  localhost;\n    root   /usr/local/nginx/html;\n\n    #access_log  logs/host.access.log  main;\n\n    location / {\n        index  index.html index.htm index.php;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass   php:9000;\n        fastcgi_index  index.php;\n        #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}\n</code></pre>', '#### Dockerfile:MySQL \n\n```\nFROM mysql:5.7\n\nENV TZ=Asia/Shanghai\n```\n\n后续操作：\n```\n# 编译\ndocker build -t mysql:57 ./\n# 临时镜像\ndocker run -itd -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:57\n# 配置文件\ndocker cp mysql:/etc/mysql/conf.d e:/lnmp/mysql\n# 删除容器\ndocker rm -f mysql\n# 运行容器\ndocker run -itd -p 3306:3306 --name mysql -v e:/lnmp/mysql/conf.d:/etc/mysql/conf.d -v e:/lnmp/mysql/data:/var/lib/mysql -v e:/lnmp/mysql/log:/logs -e MYSQL_ROOT_PASSWORD=root mysql:57\n```\n\n#### Dockerfile:PHP\n```\nFROM php:7.3.7-fpm\n\nENV TZ=Asia/Shanghai\n\n#更换为国内源\nRUN mv /etc/apt/sources.list /etc/apt/sources.list.bak\n\nRUN echo \"deb http://mirrors.163.com/debian/ buster main non-free contrib\\n\\\ndeb http://mirrors.163.com/debian/ buster-updates main non-free contrib\\n\\\ndeb http://mirrors.163.com/debian/ buster-backports main non-free contrib\\n\\\ndeb-src http://mirrors.163.com/debian/ buster main non-free contrib\\n\\\ndeb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib\\n\\\ndeb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib\\n\\\ndeb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib\\n\\\ndeb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib\" >> /etc/apt/sources.list\n\nRUN apt-get clean\nRUN apt-get update\nRUN apt-get install -y wget\n\nRUN apt-get install -y --no-install-recommends \\\n        libfreetype6-dev \\\n        libjpeg62-turbo-dev \\\n        libpng-dev \\\n        libpq-dev \\\n        g++ \\\n        libicu-dev \\\n        libxml2-dev \\\n    && docker-php-ext-install -j$(nproc) iconv \\\n    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/freetype --with-jpeg-dir=/usr/include/ \\\n    && docker-php-ext-install -j$(nproc) gd \\\n    && rm -r /var/lib/apt/lists/*\n\nRUN docker-php-ext-install -j$(nproc) bcmath calendar exif gettext sockets dba mysqli pcntl pdo_mysql shmop sysvmsg sysvsem sysvshm\n\n#RUN pecl install memcached-3.1.3 && docker-php-ext-enable memcached\nRUN pecl install redis-5.0.0 && docker-php-ext-enable redis\n#RUN pecl install swoole-4.4.0 && docker-php-ext-enable swoole\nRUN pecl install xdebug-2.7.2 && docker-php-ext-enable xdebug\n#RUN docker-php-ext-configure opcache --enable-opcache && docker-php-ext-install opcache\nRUN rm -rf /tmp/pear\n```\n\n后续操作：\n```\ndocker build -t php:737 ./\ndocker run -itd -p 9000:9000 --name php php:737\ndocker cp php:/usr/local/etc /lnmp/php\ndocker rm -f php\ndocker run -d -p 9000:9000 --name php -v e:/lnmp/php/etc:/usr/local/etc -v e:/lnmp/php/log:/usr/local/var/log -v e:/code/php:/var/www/html --link mysql:mysql php:737\n```\n\n#### Dockerfile:Nginx\n```\nFROM centos\nMAINTAINER hellcox hellcox@163.com\nENV TZ=Asia/Shanghai\nRUN yum install -y gcc gcc-c++ glibc make autoconf openssl openssl-devel\nRUN yum install -y libxslt-devel -y gd gd-devel pcre pcre-devel\n\nADD nginx-1.17.9.tar.gz /usr/local/src\nRUN useradd -M -s /sbin/nologin nginx\nWORKDIR /usr/local/src/nginx-1.17.9\nRUN ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-file-aio  --with-http_ssl_module  --with-http_realip_module    --with-http_addition_module    --with-http_xslt_module   --with-http_image_filter_module   --with-http_sub_module  --with-http_dav_module --with-http_flv_module    --with-http_mp4_module --with-http_gunzip_module  --with-http_gzip_static_module  --with-http_auth_request_module  --with-http_random_index_module   --with-http_secure_link_module   --with-http_degradation_module   --with-http_stub_status_module && make && make install\n\nENV PATH /usr/local/nginx/sbin:$PATH\nEXPOSE 80\nCMD /bin/sh -c \'nginx -g \"daemon off;\"\'\n```\n\n后续操作\n```\ndocker build -t nginx:1179 ./\ndocker run -d --name nginx -p 80:80 nginx:1179\ndocker cp nginx:/usr/local/nginx/conf /lnmp/nginx\ndocker rm -f nginx\ndocker run -d --name nginx -p 80:80 -v e:/code/php:/usr/local/nginx/html -v e:/lnmp/nginx/log:/usr/local/nginx/logs -v e:/lnmp/nginx/conf:/usr/local/nginx/conf --link php:php-fpm nginx:1179\n```\n\n#### nginx配置\n```\nserver {\n    listen       80;\n    server_name  localhost;\n    root   /usr/local/nginx/html;\n\n    #access_log  logs/host.access.log  main;\n\n    location / {\n        index  index.html index.htm index.php;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass   php:9000;\n        fastcgi_index  index.php;\n        #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}\n```', '2020-03-19 14:57:43', '2020-08-10 06:55:31', 132, 1);
INSERT INTO `bg_article` VALUES (40, '一些实用的Docker删除命令，记录下来用于查阅', '1584671306', '一些实用的Docker删除命令，记录下来用于查阅，方便快速的管理容器和镜像等。', 'docker,删除', '', '<pre><code># 杀死所有运行种的容器\ndocker kill $(docker ps -a -q)\n\n# 删除所有已经停止的容器\ndocker rm $(docker ps -a -q)\n\n# 删除所有未打 dangling1 标签的镜像\ndocker rmi $(docker images -q -f dangling=true)\n\n# 删除所有镜像\ndocker rmi $(docker images -q)\n\n# 删除所有未运行 Docker 容器\ndocker rm $(docker ps -a -q)\n\n# 删除所有未打 tag 的镜像\ndocker rmi $(docker images -q | awk &#39;/^&lt;none&gt;/ { print $3 }&#39;)\n\n# 根据格式删除所有镜像\ndocker rm $(docker ps -qf status=exited)\n</code></pre>', '\n```\n# 杀死所有运行种的容器\ndocker kill $(docker ps -a -q)\n\n# 删除所有已经停止的容器\ndocker rm $(docker ps -a -q)\n\n# 删除所有未打 dangling1 标签的镜像\ndocker rmi $(docker images -q -f dangling=true)\n\n# 删除所有镜像\ndocker rmi $(docker images -q)\n\n# 删除所有未运行 Docker 容器\ndocker rm $(docker ps -a -q)\n\n# 删除所有未打 tag 的镜像\ndocker rmi $(docker images -q | awk \'/^<none>/ { print $3 }\')\n\n# 根据格式删除所有镜像\ndocker rm $(docker ps -qf status=exited)\n```\n', '2020-03-20 10:28:26', '2020-08-01 06:12:46', 83, 1);
INSERT INTO `bg_article` VALUES (41, 'Docker 下 nginx 配置laravel虚拟域名遇到错误404、FastCGI sent in stderr: \"Primary script unknown\"问题', '1584681068', '本地docker配置nginx下laravel虚拟域名是遇到了错误：403、404、FastCGI sent in stderr: \"Primary script unknown\"问题，记录解决过程', 'docker,nginx,laravel,403,404,FastCGI', '', '<p>使用docker搭建的LNMP环境。</p>\n<p>MySQL、nginx、php-fpm均正常，使用localhost访问静态页面和php文件均成功。</p>\n<p>localhost/laravel/public/index.php 也能正常访问laravel默认主页。</p>\n<p>但是 配置上域名如：lara.com(指向laravel/public) 访问时就提示file not found.</p>\n<p>查看nginx错误日志：</p>\n<pre><code>2019/08/20 13:04:41 [error] 6#0: *7 FastCGI sent in stderr: &quot;Primary script unknown&quot; while reading response header from upstream, client: 172.17.0.1, server: localhost, request: &quot;GET / HTTP/1.1&quot;, upstream: &quot;fastcgi://172.17.0.3:9000&quot;, host: &quot;localhost&quot;\n</code></pre><h5 id=\"h5--nginx-\"><a name=\"初始nginx配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>初始nginx配置</h5><pre><code>server {\n    listen       80;\n    server_name  lara.com; #hosts已经配置127.0.0.1\n    root   /usr/local/nginx/html/laracms/public;\n    charset utf-8;\n    index index.html index.htm index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass   php:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n</code></pre><p>经过搜索和尝试后，找到了解决方案需要修改fastcgi_param（指定解析某目录下的PHP文件-对应PHP容器目录）</p>\n<pre><code># 后半部分目录与root后半部分目录保持一致，重启nginx后再次访问，正常解析。\nfastcgi_param SCRIPT_FILENAME /var/www/html/laracms/public$fastcgi_script_name;\n</code></pre>', '使用docker搭建的LNMP环境。\n\nMySQL、nginx、php-fpm均正常，使用localhost访问静态页面和php文件均成功。\n\nlocalhost/laravel/public/index.php 也能正常访问laravel默认主页。\n\n但是 配置上域名如：lara.com(指向laravel/public) 访问时就提示file not found.\n\n查看nginx错误日志：\n```\n2019/08/20 13:04:41 [error] 6#0: *7 FastCGI sent in stderr: \"Primary script unknown\" while reading response header from upstream, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", upstream: \"fastcgi://172.17.0.3:9000\", host: \"localhost\"\n```\n\n#####初始nginx配置\n```\nserver {\n    listen       80;\n    server_name  lara.com; #hosts已经配置127.0.0.1\n    root   /usr/local/nginx/html/laracms/public;\n    charset utf-8;\n    index index.html index.htm index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass   php:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n```\n\n经过搜索和尝试后，找到了解决方案需要修改fastcgi_param（指定解析某目录下的PHP文件-对应PHP容器目录）\n\n```\n# 后半部分目录与root后半部分目录保持一致，重启nginx后再次访问，正常解析。\nfastcgi_param SCRIPT_FILENAME /var/www/html/laracms/public$fastcgi_script_name;\n```\n\n', '2020-03-20 13:11:08', '2020-08-07 00:40:59', 82, 1);
INSERT INTO `bg_article` VALUES (42, '面试经历', '1585220958', '面试经历', '面试经历', '', '<h4 id=\"h4-01-2020-03-17-10-00-\"><a name=\"01： 2020-03-17 10:00 淘容亿\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>01： 2020-03-17 10:00 淘容亿</h4><p>一家做淘宝天猫店铺转让的互联网企业，配置一个后端半个前端，属于纯网页类型应用。后端要跑路，切后续需要开发一套商标转让类型的系统（一个月，让自己预估），类似现有淘宝店铺转让。<br>笔试-&gt;HR-&gt;技术面<br>等通知后续没有下文\n<h4 id=\"h4-02-2020-03-19-10-00-\"><a name=\"02： 2020-03-19 10:00 成都萌牛科技有限公司\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>02： 2020-03-19 10:00 成都萌牛科技有限公司</h4><p>新希望国际B座1415<br>一家新成立的外包企业，各种类型的项目都接，目前1个后端，预估5个左右。<br>技术面<br>后续无通知\n<h4 id=\"h4-03-2020-03-24-14-00-\"><a name=\"03： 2020-03-24 14:00 汤沐科技\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>03： 2020-03-24 14:00 汤沐科技</h4><p>新希望国际B座705<br>一家老牌的外包公司，类似于天脉，在成都接项目，<br>技术面（非PHP）<br>后续无通知\n<h4 id=\"h4-04-2020-03-26-10-00-\"><a name=\"04： 2020-03-26 10:00 小启科技\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>04： 2020-03-26 10:00 小启科技</h4><p>软件园B6-3楼<br>一家为信贷提供解决方案的公司，技术团队人多，70左右，PHP4个。自有两个项目，待研究看看。聊下来还不错，就是迟到了30分钟，人事是大两届的学姐。<br>人事-&gt;技术<br>主要问：ES如何设计的、项目相关问题、聊了PHP&amp;GO相关<br>等通知\n<h4 id=\"h4-05-2020-03-24-14-00-\"><a name=\"05 2020-03-24 14:00 青柠影咖\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>05 2020-03-24 14:00 青柠影咖</h4><p>软件园A7-1楼<br>主要类似于家庭影院的模式，但是是可移动的，只需要一个人负责整个项目的后续维护与开发。一个大佬面试的，应该不是做PHP的。这种问法表现的太差了,全程一脸懵逼。<br>技术面<br>主要问GO：使用管道需要注意什么、数组B取数组A中部分数据，问数组B的类型、秒杀系统、数据加密、微服务、服务化、事件注册、laravel event&amp;job、linux服务打包。<br>等通知\n<h4 id=\"h4-06-2020-03-24-14-00-\"><a name=\"06：2020-03-24 14:00 义幻医疗\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>06：2020-03-24 14:00 义幻医疗</h4><p>高新区府城大道399号天府新谷10号楼18楼<br>一家为医院提供一站式解决方案的公司，办公楼是联合办公，PHP团队大概有20人（真多）,使用的技术栈不多，问的也比较基础。<br>笔试-&gt;面试<br>主要问：微服务、事物、隔离级别、索引的类型和结构（回答的唯一索引、联合索引、B+树）<br>等通知\n<h4 id=\"h4-07-2020-03-30-14-00-\"><a name=\"07：2020-03-30 14:00 墨仙互娱\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>07：2020-03-30 14:00 墨仙互娱</h4><p>高新区府城大道399号天府新谷10号楼20楼2010<br>一家游戏中间平台公司，接下来将会开发直播相关功能和直播商城。<br>yii2<br>填资料-&gt;面试<br>等通知\n', '#### 01： 2020-03-17 10:00 淘容亿\n一家做淘宝天猫店铺转让的互联网企业，配置一个后端半个前端，属于纯网页类型应用。后端要跑路，切后续需要开发一套商标转让类型的系统（一个月，让自己预估），类似现有淘宝店铺转让。\n笔试->HR->技术面\n等通知后续没有下文\n\n#### 02： 2020-03-19 10:00 成都萌牛科技有限公司\n新希望国际B座1415\n一家新成立的外包企业，各种类型的项目都接，目前1个后端，预估5个左右。\n技术面\n后续无通知\n\n#### 03： 2020-03-24 14:00 汤沐科技\n新希望国际B座705\n一家老牌的外包公司，类似于天脉，在成都接项目，\n技术面（非PHP）\n后续无通知\n#### 04： 2020-03-26 10:00 小启科技\n软件园B6-3楼\n一家为信贷提供解决方案的公司，技术团队人多，70左右，PHP4个。自有两个项目，待研究看看。聊下来还不错，就是迟到了30分钟，人事是大两届的学姐。\n人事->技术\n主要问：ES如何设计的、项目相关问题、聊了PHP&GO相关\n等通知\n\n#### 05 2020-03-24 14:00 青柠影咖\n软件园A7-1楼\n主要类似于家庭影院的模式，但是是可移动的，只需要一个人负责整个项目的后续维护与开发。一个大佬面试的，应该不是做PHP的。这种问法表现的太差了,全程一脸懵逼。\n技术面\n主要问GO：使用管道需要注意什么、数组B取数组A中部分数据，问数组B的类型、秒杀系统、数据加密、微服务、服务化、事件注册、laravel event&job、linux服务打包。\n等通知\n\n#### 06：2020-03-24 14:00 义幻医疗\n高新区府城大道399号天府新谷10号楼18楼\n一家为医院提供一站式解决方案的公司，办公楼是联合办公，PHP团队大概有20人（真多）,使用的技术栈不多，问的也比较基础。\n笔试->面试\n主要问：微服务、事物、隔离级别、索引的类型和结构（回答的唯一索引、联合索引、B+树）\n等通知\n\n#### 07：2020-03-30 14:00 墨仙互娱\n高新区府城大道399号天府新谷10号楼20楼2010\n一家游戏中间平台公司，接下来将会开发直播相关功能和直播商城。\nyii2\n填资料->面试\n等通知\n', '2020-03-26 19:09:18', '2020-03-31 16:24:20', 0, 0);
INSERT INTO `bg_article` VALUES (43, 'PHP习题整理与记录', '1585222316', '记录一下PHP相关题目，便于复习与总结，且行且珍惜！', '习题,PHP', '', '<blockquote>\n<p>空白处选中即可查看答案！</p>\n</blockquote>\n<h1 id=\"h1-php\"><a name=\"PHP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>PHP</h1><ul>\n<li><p>代码输出结果?</p>\n<pre><code>if(\'1e3\'=\'1000\') echo \'a\';\nif(\'1e3\'=1000) echo \'b\';\n</code></pre><div style=\"color:#fff\">ab</div>\n</li><li><p>代码输出结果?</p>\n<pre><code>$a = \"aabbzz\"; $a++; echo $a;\n</code></pre><div style=\"color:#fff\">aabcaa;字符串字母加一则相当于在末尾字母加一，a+1=b,z+1=a,末尾z加一会进一位为a，故的处答案aabcaa</div>\n</li><li><p>代码输出结果?</p>\n<pre><code>$a = \"aabbzz\"; $a++; echo $a;\n</code></pre><div style=\"color:#fff\">aabcaa;字符串字母加一则相当于在末尾字母加一，a+1=b,z+1=a,末尾z加一会进一位为a，故的处答案aabcaa</div>\n</li><li><p>代码输出结果?</p>\n<pre><code>$data = [\'a\',\'b\',\'c\']; \nforeach($data as $k=&gt;$v){\n  $v = &amp;$data[$k];\n}\nprint_r($data);\n</code></pre><div style=\"color:#fff\">[‘b’,’c’,’c’];这里有个考点要记得 就是&amp;是引用；修改引用变量的值，那么空间的值也会改变，第一次循环 得到$v=&amp;$data[0]=&gt;a,第二次循环$v=&amp;$data[1]=&gt;b,可见第一次引用的$data[0]的值已经被改变，所以此时的$data[0]=b,此时$v引用的$data[1],进入第三次循环 此时$v又变为 $v=&amp;$data[2]=&gt;c,$v又一次改变，引用的$data[1]的值也被改变为C，所以此时的$data[1]=c,这样循环结束 $data[0]=&gt;b，$data[1]=&gt;c，$data[2]=&gt;c</div>\n</li><li><p>代码输出结果?</p>\n<pre><code>$a= 0.1;\n$b = 0.7;\nif($a+$b ==0.8){\n  echo true;\n}else{\n  echo false;\n}\n</code></pre><div style=\"color:#fff\">空；本题考点：精度计算问题，echo true&amp;flase的值。echo true=1;echo false=空；浮点类型不能用于精确计算；首先浮点类型的数据不能用于计算，他会将浮点类型转为二进制，所以有一定的损耗，故它无限接近于0.8，也就是0.799…，</div>\n\n\n</li></ul>\n<ul>\n<li><p>写出获取客户端和服务端IP的代码?</p>\n<div style=\'color:#fff\'>echo $_SERVER[‘REMOTE_ADDR’];<br>echo $_SERVER[‘SERVER_ADDR’];\n</li><li><p>用正则写出以139开头的手机号码?</p>\n<div style=\'color:#fff\'>$str = ‘13912345678’;<br>$pattern = ‘/^139\\d{8}$/‘;<br>preg_match($pattern,$str,$res);<br>var_dump($res); //13912345678<br>\n</li><li><p>用PHP方式对目录进行遍历?</p>\n<pre><code>function read($path){\n  $handle = opendir($path);\n  while(false != ($file = readdir($handle))){\n      if($file!=\'.\' &amp;&amp; $file!=\'..\'){\n          $type = filetype($path.\'/\'.$file);\n          $filedir = $path.\'/\'.$file;\n          if($type==\'dir\'){\n              echo $filedir.\'&lt;br&gt;\';\n              read($filedir);\n          }elseif($type==\'file\'){\n              echo $filedir.\'&lt;br&gt;\';\n          }\n      }\n  }\n}\nread(\'E:/lnmp\');\n</code></pre></li><li><p>简述CGI faseCGI PHP-FPM之间的联系？</p>\n<div style=\'color:#fff\'><br><a href=\"https://blog.csdn.net/IT_10/article/details/92801153\">https://blog.csdn.net/IT_10/article/details/92801153</a><br>\n</li><li><p>PHP中传值和传引用的区别？</p>\n<div style=\'color:#fff\'><br>传值：函数范围内对值的修改不会影响到外部的值，因PHP是直接复制了该值，复制值的代价比较大，特别是对象等。<br>引用：函数范围内对值的修改会影响外部的值，这里只是传递了值的一个地址。<br>\n</li><li><p>什么是面向对象？主要特征是什么？</p>\n<div style=\'color:#fff\'><br>面向对象是一种程序设计方式，利于提高程序的可重用性，结构更加清晰。主要特性为 封装、继承、多态。<br>封装：将客观事物的属性和方法绑定在一起，并放置在一个逻辑单元内，抽象成类。<br>继承：某个类可以继承另一个类，某类将会获得继承类的内容。<br>多态：相同的函数可以作用于多个类型的对象想并获得不同的结果。<br>\n</li><li><p>session cookie的区别？</p>\n<div style=\'color:#fff\'>session位于服务器，cookie位于客户端；session比cookie更加安全；session依赖于cookie传递，禁用cookie后session还是可用，可通过URL传递等等。<br>\n</li><li><p>get post 区别？</p>\n<div style=\"color:#fff\">get是显示的，可在URL中看到，数据量小，安全性较低；post是隐式的，传递数据量更大，安全性更高。</div>\n</li><li><p>include和require的区别是什么？</p>\n<div style=\'color:#fff\'>include有返回值，文件不存在会提示错误，但程序会继续执行；<br>require无返回值，无条件包含，无论条件是否成立都会执行require，文件错误时会提示错误并终止程序；\n</li><li><p>PHP的基本变量类型？</p>\n<div style=\'color:#fff\'><br>标量（4）：string,int，float，bool<br>复合（2）：array，object<br>特殊（2）：resource，NULL<br>\n</li><li><p>单引号双引号的区别？</p>\n<div style=\'color:#fff\'><br>单引号速度更快，只能解析部分特殊字符；<br>双引号相对较慢，能解析全部特殊字符，能执行内部变量；<br>\n</li><li><p>php7新特性？</p>\n<div style=\'color:#fff\'><br>标量类型声明：函数形参可声明类型，新增了string、int、float、bool 。<br>返回值类型声明：类似于标量类型，只是位于返回值的地方。<br>use加强：从同一命名空间导入的类、函数、常量可以用单个use一次性导入。<br>NULL合并运算符：当变量存在且值不为NULL，它就会返回自身的值，否则返回它的第二个操作数。<br>匿名类：先可通过new class来实例化一个匿名类。<br>\n</li><li><p>php可以多继承么？</p>\n<div style=\'color:#fff\'><br>不支持多继承，只能单继承，extends关键词实现继承；<br>可以使用interface、trait实现多继承效果：<br>-&gt; interface声明的类不能被实例化，且属性必须是常量，方法无方法体；<br>-&gt; trait声明的类不能实例化，由use引入，会覆盖父类中的同名函数和属性，多个use按顺序下面覆盖上面，本类中的方法和属性可覆盖trait类中的属性和方法。<br>\n</li><li><p>error_reporting() 的作用？</p>\n<div style=\'color:#fff\'><br>设置PHP的报错级别，并返回当前级别；<br>\n</li><li><p>修改session的生存时间？</p>\n<div style=\'color:#fff\'><br>php.ini中配置：session.gc_maxlifetime = 1440;//默认<br>代码中配置：<br>ini_set(‘session.gc_maxlifetime’, “3600”); // 秒<br>ini_set(“session.cookie_lifetime”,”3600”); // 秒<br>\n</li><li><p>常见的 PHP 安全性攻击？</p>\n<div style=\'color:#fff\'><br>SQL注入：表单中写sql影响正常sql；mysql_real_escape_string()过滤数据、检查每项参数、参数绑定。<br>XSS：跨站点脚本攻击，注入JS等，页面可能会执行该JS；使用htmlentities()函数过滤后在输出到浏览器。<br>CRSF：跨站点请求伪造，伪造你的登录信息进行操作；使用一次性令牌嵌入表单中，提交时检测令牌。<br>代码注入：代码注入是利用计算机漏洞通过处理无效数据造成的。问题出在，当你不小心执行任意代码，通常通过文件包含。写得很糟糕的代码可以允许一个远程文件包含并执行。如许多PHP函数，如require可以包含URL或文件名。禁用包含远程文件。<br>\n</li><li><p>__FILE__ 表示什么意思？</p>\n<div style=\"color:#fff\">文件的完整路径和文件名。字符串类型：string(20) “E:\\code\\php\\test.php”</div>\n</li><li><p>写出使用header函数跳转页面的语句?</p>\n<div style=\"color:#fff\">header(‘location:index.php’);</div>\n</li><li><p>$str是一段html文本，使用正则表达式去除其中的所有js脚本?</p>\n<pre><code>$str = \"&lt;h1&gt;ssss&lt;h1&gt;&lt;script&gt;111&lt;/script&gt;\";\n$pattern = \'@&lt;script(.*?)&lt;/script&gt;@\';\n$res = preg_replace($pattern,\'\',$str);\necho $res;\n</code></pre></li><li><p>mvc是什么?相互间有什么关系?</p>\n<div style=\'color:#fff\'><br>MVC是一种开发模式，分别为模型、视图、控制器，请求到达控制器后，控制器调用模型获取数据，然后控制器将数据通过视图展示出来。<br>\n</li><li><p>smarty是什么,有什么作用?</p>\n<div style=\'color:#fff\'><br>smarty是用PHP写出来的一个模板引擎，著名的PHP模板引擎之一，分离了逻辑代码与外在显示。如TP集成了smarty模板。<br>\n</li><li><p>echo(),print(),print_r(),var_dump()的区别?</p>\n<div style=\'color:#fff\'><br>echo：是语言结构，不是函数，一次可以输出多个值，逗号隔开，无返回值。<br>print：函数打印一个值，有返回值（bool）,只能打印简单类型变量的值（如int，string）<br>print_r：简单打印复杂类型变量的值（如数组，对象）<br>var_dump：判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型。此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。<br></li></ul>\n', '> 空白处选中即可查看答案！\n\n# PHP\n\n- 代码输出结果?\n``` \nif(\'1e3\'=\'1000\') echo \'a\';\nif(\'1e3\'=1000) echo \'b\';\n```\n<div style=\'color:#fff\'>ab</div>\n\n- 代码输出结果?\n```\n$a = \"aabbzz\"; $a++; echo $a;\n```\n<div style=\'color:#fff\'>aabcaa;字符串字母加一则相当于在末尾字母加一，a+1=b,z+1=a,末尾z加一会进一位为a，故的处答案aabcaa</div>\n\n- 代码输出结果?\n``` \n$a = \"aabbzz\"; $a++; echo $a;\n```\n<div style=\'color:#fff\'>aabcaa;字符串字母加一则相当于在末尾字母加一，a+1=b,z+1=a,末尾z加一会进一位为a，故的处答案aabcaa</div>\n\n- 代码输出结果?\n```\n$data = [\'a\',\'b\',\'c\']; \nforeach($data as $k=>$v){\n    $v = &$data[$k];\n}\nprint_r($data);\n```\n<div style=\'color:#fff\'>[\'b\',\'c\',\'c\'];这里有个考点要记得 就是&是引用；修改引用变量的值，那么空间的值也会改变，第一次循环 得到$v=&$data[0]=>a,第二次循环$v=&$data[1]=>b,可见第一次引用的$data[0]的值已经被改变，所以此时的$data[0]=b,此时$v引用的$data[1],进入第三次循环 此时$v又变为 $v=&$data[2]=>c,$v又一次改变，引用的$data[1]的值也被改变为C，所以此时的$data[1]=c,这样循环结束 $data[0]=>b，$data[1]=>c，$data[2]=>c</div>\n\n- 代码输出结果?\n```\n$a= 0.1;\n$b = 0.7;\nif($a+$b ==0.8){\n	echo true;\n}else{\n	echo false;\n}\n```\n<div style=\'color:#fff\'>空；本题考点：精度计算问题，echo true&flase的值。echo true=1;echo false=空；浮点类型不能用于精确计算；首先浮点类型的数据不能用于计算，他会将浮点类型转为二进制，所以有一定的损耗，故它无限接近于0.8，也就是0.799...，</div>\n\n\n- 写出获取客户端和服务端IP的代码?\n<div style=\'color:#fff\'>echo $_SERVER[\'REMOTE_ADDR\'];<br>echo $_SERVER[\'SERVER_ADDR\'];</div>\n\n- 用正则写出以139开头的手机号码?\n<div style=\'color:#fff\'>$str = \'13912345678\';\n$pattern = \'/^139\\d{8}$/\';\npreg_match($pattern,$str,$res);\nvar_dump($res); //13912345678\n</div>\n\n- 用PHP方式对目录进行遍历?\n```\nfunction read($path){\n	$handle = opendir($path);\n	while(false != ($file = readdir($handle))){\n		if($file!=\'.\' && $file!=\'..\'){\n			$type = filetype($path.\'/\'.$file);\n			$filedir = $path.\'/\'.$file;\n			if($type==\'dir\'){\n				echo $filedir.\'<br>\';\n				read($filedir);\n			}elseif($type==\'file\'){\n				echo $filedir.\'<br>\';\n			}\n		}\n	}\n}\nread(\'E:/lnmp\');\n```\n- 简述CGI faseCGI PHP-FPM之间的联系？\n<div style=\'color:#fff\'>\nhttps://blog.csdn.net/IT_10/article/details/92801153\n</div>\n\n- PHP中传值和传引用的区别？\n<div style=\'color:#fff\'>\n传值：函数范围内对值的修改不会影响到外部的值，因PHP是直接复制了该值，复制值的代价比较大，特别是对象等。\n引用：函数范围内对值的修改会影响外部的值，这里只是传递了值的一个地址。\n</div>\n\n- 什么是面向对象？主要特征是什么？\n<div style=\'color:#fff\'>\n面向对象是一种程序设计方式，利于提高程序的可重用性，结构更加清晰。主要特性为 封装、继承、多态。\n封装：将客观事物的属性和方法绑定在一起，并放置在一个逻辑单元内，抽象成类。\n继承：某个类可以继承另一个类，某类将会获得继承类的内容。\n多态：相同的函数可以作用于多个类型的对象想并获得不同的结果。\n</div>\n\n- session cookie的区别？\n<div style=\'color:#fff\'>session位于服务器，cookie位于客户端；session比cookie更加安全；session依赖于cookie传递，禁用cookie后session还是可用，可通过URL传递等等。\n</div>\n\n- get post 区别？\n<div style=\'color:#fff\'>get是显示的，可在URL中看到，数据量小，安全性较低；post是隐式的，传递数据量更大，安全性更高。</div>\n\n- include和require的区别是什么？\n<div style=\'color:#fff\'>include有返回值，文件不存在会提示错误，但程序会继续执行；\nrequire无返回值，无条件包含，无论条件是否成立都会执行require，文件错误时会提示错误并终止程序；</div>\n\n- PHP的基本变量类型？\n<div style=\'color:#fff\'>\n标量（4）：string,int，float，bool\n复合（2）：array，object\n特殊（2）：resource，NULL\n</div>\n\n- 单引号双引号的区别？\n<div style=\'color:#fff\'>\n单引号速度更快，只能解析部分特殊字符；\n双引号相对较慢，能解析全部特殊字符，能执行内部变量；\n</div>\n\n- php7新特性？\n<div style=\'color:#fff\'>\n标量类型声明：函数形参可声明类型，新增了string、int、float、bool 。\n返回值类型声明：类似于标量类型，只是位于返回值的地方。\nuse加强：从同一命名空间导入的类、函数、常量可以用单个use一次性导入。\nNULL合并运算符：当变量存在且值不为NULL，它就会返回自身的值，否则返回它的第二个操作数。\n匿名类：先可通过new class来实例化一个匿名类。\n</div>\n\n- php可以多继承么？\n<div style=\'color:#fff\'>\n不支持多继承，只能单继承，extends关键词实现继承；\n可以使用interface、trait实现多继承效果：\n-> interface声明的类不能被实例化，且属性必须是常量，方法无方法体；\n-> trait声明的类不能实例化，由use引入，会覆盖父类中的同名函数和属性，多个use按顺序下面覆盖上面，本类中的方法和属性可覆盖trait类中的属性和方法。\n</div>\n\n- error_reporting() 的作用？\n<div style=\'color:#fff\'>\n设置PHP的报错级别，并返回当前级别；\n</div>\n\n- 修改session的生存时间？\n<div style=\'color:#fff\'>\nphp.ini中配置：session.gc_maxlifetime = 1440;//默认\n代码中配置：\nini_set(\'session.gc_maxlifetime\', \"3600\"); // 秒 \nini_set(\"session.cookie_lifetime\",\"3600\"); // 秒 \n</div>\n\n- 常见的 PHP 安全性攻击？\n<div style=\'color:#fff\'>\nSQL注入：表单中写sql影响正常sql；mysql_real_escape_string()过滤数据、检查每项参数、参数绑定。\nXSS：跨站点脚本攻击，注入JS等，页面可能会执行该JS；使用htmlentities()函数过滤后在输出到浏览器。\nCRSF：跨站点请求伪造，伪造你的登录信息进行操作；使用一次性令牌嵌入表单中，提交时检测令牌。\n代码注入：代码注入是利用计算机漏洞通过处理无效数据造成的。问题出在，当你不小心执行任意代码，通常通过文件包含。写得很糟糕的代码可以允许一个远程文件包含并执行。如许多PHP函数，如require可以包含URL或文件名。禁用包含远程文件。\n</div>\n\n- \\_\\_FILE\\_\\_ 表示什么意思？\n<div style=\'color:#fff\'>文件的完整路径和文件名。字符串类型：string(20) \"E:\\code\\php\\test.php\"</div>\n\n- 写出使用header函数跳转页面的语句?\n<div style=\'color:#fff\'>header(\'location:index.php\');</div>\n\n- $str是一段html文本，使用正则表达式去除其中的所有js脚本?\n```\n$str = \"<h1>ssss<h1><script>111</script>\";\n$pattern = \'@<script(.*?)</script>@\';\n$res = preg_replace($pattern,\'\',$str);\necho $res;\n```\n\n- mvc是什么?相互间有什么关系?\n<div style=\'color:#fff\'>\nMVC是一种开发模式，分别为模型、视图、控制器，请求到达控制器后，控制器调用模型获取数据，然后控制器将数据通过视图展示出来。\n</div>\n\n- smarty是什么,有什么作用?\n<div style=\'color:#fff\'>\nsmarty是用PHP写出来的一个模板引擎，著名的PHP模板引擎之一，分离了逻辑代码与外在显示。如TP集成了smarty模板。\n</div>\n\n- echo(),print(),print_r(),var_dump()的区别?\n<div style=\'color:#fff\'>\necho：是语言结构，不是函数，一次可以输出多个值，逗号隔开，无返回值。\nprint：函数打印一个值，有返回值（bool）,只能打印简单类型变量的值（如int，string）\nprint_r：简单打印复杂类型变量的值（如数组，对象）\nvar_dump：判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型。此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。\n</div>', '2020-03-26 19:31:56', '2020-08-08 01:42:12', 130, 1);
INSERT INTO `bg_article` VALUES (45, 'MYSQL习题整理与记录', '1585288264', 'MYSQL习题整理与记录', 'mysql,习题', '', '<h1 id=\"h1-mysql\"><a name=\"MYSQL\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>MYSQL</h1><ul>\n<li><p>mysql中char与varchar的区别？</p>\n<div style=\'color:#fff\'><br>char:长度固定，最大长度255个字符，不同编码字节数不同。<br>varchar：长度不固定，实际存储的是字符串加上一个记录字符串长度的字节。最大长度65535个字节，编码不同字符数不同。<br>若分配给char&amp;varchar的数据超过二者的最大长度，会对值进行裁剪。<br>\n</li><li><p>优化mysql的方法？</p>\n<div style=\'color:#fff\'><br>1、字段数据类型最优选择<br>2、索引优化<br>3、sql优化<br>（1）查询中使用limit，尽量避免select *<br>（2）优化长sql，拆分查询，将复杂查询简单化、切分查询、分解关联查询<br>（3）优化count()、关联查询、子查询、group by等<br>（4）避免循环查询数据<br>（5）避免索引上使用计算，导致索引失效<br>（6）提高group by效率，在分组前过滤掉大部分数据<br>（7）少使用like查询<br>（8）where字句替换having<br>4、存储引擎选择<br>（1）尽量选择innodb，它可以支持事物、外键，使用独立的表空间，锁级别是行级锁。<br>5、表结构设计优化<br>（1）分区操作：如通过特定的策略对数据进行物理拆分<br>（2）分库分表：如水平拆分（以行级进行拆分）、垂直拆分（列及拆分）<br>6、架构优化<br>（1）读写分离：数据写入主库，数据读从库。<br>（2）主从复制：一台机器作为主，一台或多台机器作为从。<br>（3）双主热备：主主复制，两台机器互为主从。<br>（4）负载均衡：通过LVS的三种模式实现的、Mycat数据库中间件实现的。<br>\n</li><li><p>mysql的读写分离？</p>\n<div style=\'color:#fff\'><br>一般使用在mysql主从架构直上，数据写入主库，数据从从库读取，在代码层面进行判断选择。<br>\n</li><li><p>mysql主从复制原理？</p>\n<div style=\'color:#fff\'><br>mysql支持单向异步复制<br>（1）主将数据变更操作记录到binlog中<br>（2）从启动一个线程读取主的binlog，将其记录到临时日志中Realy log（中继日志）<br>（3）同时从会启用一线程读取中继日志，将变更的操作在从库上再执行一次。<br>注：每个从服务器都会收到主服务器的全部日志副本；从服务器决定执行二进制中的哪些语句；每个从都会记录当前处理二进制日志的位置，断开从连后将从断点处继续执行。<br>\n</li><li><p>索引的优缺点？</p>\n<div style=\'color:#fff\'><br>优点：<br>（1）唯一索引保证数据库中数据的唯一性<br>（2）加快了数据的检索速度<br>（3）加速表与表之间的连接<br>（4）分组和排序时也将大大加快速度<br>缺点：<br>（1）创建索引耗时，随数据量的增长而增加<br>（2）占用物理空间，数据越大索引占用的空间也越大<br>（3）数据的增删改都会进行索引的维护操作，降低了表维护速度<br></li></ul>\n', '# MYSQL\n\n- mysql中char与varchar的区别？\n<div style=\'color:#fff\'>\nchar:长度固定，最大长度255个字符，不同编码字节数不同。\nvarchar：长度不固定，实际存储的是字符串加上一个记录字符串长度的字节。最大长度65535个字节，编码不同字符数不同。\n若分配给char&varchar的数据超过二者的最大长度，会对值进行裁剪。\n</div>\n\n- 优化mysql的方法？\n<div style=\'color:#fff\'>\n1、字段数据类型最优选择\n2、索引优化\n3、sql优化\n（1）查询中使用limit，尽量避免select *\n（2）优化长sql，拆分查询，将复杂查询简单化、切分查询、分解关联查询\n（3）优化count()、关联查询、子查询、group by等\n（4）避免循环查询数据\n（5）避免索引上使用计算，导致索引失效\n（6）提高group by效率，在分组前过滤掉大部分数据\n（7）少使用like查询\n（8）where字句替换having\n4、存储引擎选择\n（1）尽量选择innodb，它可以支持事物、外键，使用独立的表空间，锁级别是行级锁。\n5、表结构设计优化\n（1）分区操作：如通过特定的策略对数据进行物理拆分\n（2）分库分表：如水平拆分（以行级进行拆分）、垂直拆分（列及拆分）\n6、架构优化\n（1）读写分离：数据写入主库，数据读从库。\n（2）主从复制：一台机器作为主，一台或多台机器作为从。\n（3）双主热备：主主复制，两台机器互为主从。\n（4）负载均衡：通过LVS的三种模式实现的、Mycat数据库中间件实现的。\n</div>\n\n- mysql的读写分离？\n<div style=\'color:#fff\'>\n一般使用在mysql主从架构直上，数据写入主库，数据从从库读取，在代码层面进行判断选择。\n</div>\n\n- mysql主从复制原理？\n<div style=\'color:#fff\'>\nmysql支持单向异步复制\n（1）主将数据变更操作记录到binlog中\n（2）从启动一个线程读取主的binlog，将其记录到临时日志中Realy log（中继日志）\n（3）同时从会启用一线程读取中继日志，将变更的操作在从库上再执行一次。\n注：每个从服务器都会收到主服务器的全部日志副本；从服务器决定执行二进制中的哪些语句；每个从都会记录当前处理二进制日志的位置，断开从连后将从断点处继续执行。\n</div>\n\n- 索引的优缺点？\n<div style=\'color:#fff\'>\n优点：\n（1）唯一索引保证数据库中数据的唯一性\n（2）加快了数据的检索速度\n（3）加速表与表之间的连接\n（4）分组和排序时也将大大加快速度\n缺点：\n（1）创建索引耗时，随数据量的增长而增加\n（2）占用物理空间，数据越大索引占用的空间也越大\n（3）数据的增删改都会进行索引的维护操作，降低了表维护速度\n</div>', '2020-03-27 13:51:04', '2020-08-09 01:22:07', 69, 1);
INSERT INTO `bg_article` VALUES (46, 'PHP 之 Opcache', '1585576486', 'OPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是 省去了每次加载和解析 PHP 脚本的开销。', 'php,opcache', '', '<p>OPcache 通过将 PHP 脚本预编译的<strong>字节码</strong>存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是 省去了每次加载和解析 PHP 脚本的开销。</p>\n<p>PHP 5.5.0 及后续版本中已经绑定了 OPcache 扩展。 对于 PHP 5.2，5.3 和 5.4 版本可以使用 PECL 扩展中的 OPcache 库。</p>\n<p>函数参考：<a href=\"https://www.php.net/manual/zh/book.opcache.php\">https://www.php.net/manual/zh/book.opcache.php</a></p>\n<h4 id=\"h4-opcache-\"><a name=\"opcache函数：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>opcache函数：</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>opcache_compile_file</td>\n<td>无需运行，即可编译并缓存 PHP 脚本</td>\n<td></td>\n</tr>\n<tr>\n<td>opcache_get_configuration</td>\n<td>获取缓存的配置信息</td>\n<td></td>\n</tr>\n<tr>\n<td>opcache_get_status</td>\n<td>获取缓存的状态信息</td>\n<td></td>\n</tr>\n<tr>\n<td>opcache_invalidate</td>\n<td>废除脚本缓存</td>\n<td></td>\n</tr>\n<tr>\n<td>opcache_reset</td>\n<td>重置字节码缓存的内容</td>\n<td></td>\n</tr>\n<tr>\n<td>opcache_is_script_cached</td>\n<td>Tells whether a script is cached in OPCache</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"h5-php-\"><a name=\"PHP执行流程：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>PHP执行流程：</h5><p>request请求（nginx,apache,cli等）—&gt;Zend引擎读取.php文件—&gt;扫描其词典和表达式 —&gt;解析文件—&gt;创建要执行的计算机代码(称为Opcode)—&gt;最后执行Opcode—&gt; response 返回</p>\n<p><img src=\"http://static.iuxiao.com/image/2020/03/30/9b221bcb97aa2b39bfcfb6ae6015901415fe9f9a.png\" alt=\"\">\n<p>每一次请求PHP脚本都会执行一遍以上步骤，如果PHP源代码没有变化，那么Opcode也不会变化，显然没有必要每次都重新生成Opcode，结合在Web中无所不在的缓存机制，我们可以把Opcode缓存下来，以后直接访问缓存的Opcode岂不是更快，启用Opcode缓存之后的流程图如下所示：</p>\n<p><img src=\"http://static.iuxiao.com/image/2020/03/30/eddf3ebdca9f7f8b1da85fd9c559b65c4eabf2b7.png\" alt=\"\">\n<p>Opcode cache 的目地是避免重复编译，减少 CPU 和内存开销。</p>\n', 'OPcache 通过将 PHP 脚本预编译的**字节码**存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是 省去了每次加载和解析 PHP 脚本的开销。\n\nPHP 5.5.0 及后续版本中已经绑定了 OPcache 扩展。 对于 PHP 5.2，5.3 和 5.4 版本可以使用 PECL 扩展中的 OPcache 库。\n\n函数参考：https://www.php.net/manual/zh/book.opcache.php\n\n#### opcache函数：\n\n| 函数 | 说明 |  备注  |\n|-|-|-|\n|opcache_compile_file|无需运行，即可编译并缓存 PHP 脚本||\n|opcache_get_configuration|获取缓存的配置信息||\n|opcache_get_status|获取缓存的状态信息||\n|opcache_invalidate |废除脚本缓存||\n|opcache_reset |重置字节码缓存的内容||\n|opcache_is_script_cached| Tells whether a script is cached in OPCache||\n\n##### PHP执行流程：\n\nrequest请求（nginx,apache,cli等）-->Zend引擎读取.php文件-->扫描其词典和表达式 -->解析文件-->创建要执行的计算机代码(称为Opcode)-->最后执行Opcode--> response 返回\n\n![](http://static.iuxiao.com/image/2020/03/30/9b221bcb97aa2b39bfcfb6ae6015901415fe9f9a.png)\n\n每一次请求PHP脚本都会执行一遍以上步骤，如果PHP源代码没有变化，那么Opcode也不会变化，显然没有必要每次都重新生成Opcode，结合在Web中无所不在的缓存机制，我们可以把Opcode缓存下来，以后直接访问缓存的Opcode岂不是更快，启用Opcode缓存之后的流程图如下所示：\n\n![](http://static.iuxiao.com/image/2020/03/30/eddf3ebdca9f7f8b1da85fd9c559b65c4eabf2b7.png)\n\nOpcode cache 的目地是避免重复编译，减少 CPU 和内存开销。', '2020-03-30 21:54:46', '2020-08-05 10:52:24', 111, 1);
INSERT INTO `bg_article` VALUES (47, 'redis 之 队列（list）', '1585633050', '在这里记录下redis的队列list相关的内容。', 'redis,队列,list', '', '<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>\n<p>一个列表最多可以包含 2e32-1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>\n<h4 id=\"h4-redis-list-\"><a name=\"Redis list 相关命令：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis list 相关命令：</h4><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LPUSH key value1 [value2]</td>\n<td>将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td>BLPOP key1 [key2 ] timeout</td>\n<td>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td>BRPOP key1 [key2 ] timeout</td>\n<td>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</td>\n</tr>\n<tr>\n<td>BRPOPLPUSH source destination timeout</td>\n<td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td>LINDEX key index</td>\n<td>通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td>LINSERT key BEFORE|AFTER pivot value</td>\n<td>在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td>LLEN key</td>\n<td>获取列表长度</td>\n</tr>\n<tr>\n<td>LPOP key</td>\n<td>移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td>LPUSHX key value</td>\n<td>将一个值插入到已存在的列表头部</td>\n</tr>\n<tr>\n<td>LRANGE key start stop</td>\n<td>获取列表指定范围内的元素</td>\n</tr>\n<tr>\n<td>LREM key count value</td>\n<td>移除列表元素</td>\n</tr>\n<tr>\n<td>LSET key index value</td>\n<td>通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td>LTRIM key start stop</td>\n<td>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\n</tr>\n<tr>\n<td>RPOP key</td>\n<td>移除列表的最后一个元素，返回值为移除的元素。</td>\n</tr>\n<tr>\n<td>RPOPLPUSH source destination</td>\n<td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\n</tr>\n<tr>\n<td>RPUSH key value1 [value2]</td>\n<td>在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td>RPUSHX key value</td>\n<td>为已存在的列表添加值</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"h4-u5E38u89C1u5E94u7528u573Au666F\"><a name=\"常见应用场景\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>常见应用场景</h4><ul>\n<li>实现消息队列</li><li>排行榜（排名非变动型）</li><li>文章列表</li></ul>\n<h4 id=\"h4--amp-\"><a name=\"阻塞队列&amp;非阻塞队列\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>阻塞队列&amp;非阻塞队列</h4><p>非阻塞：不管有无找到指定键值都立即返回，LPUSH/LPOP。<br>阻塞队列：如BLPOP，当队列里没有值此时会阻塞，直到有另一个客户端对给定的这些 key 的任意一个执行 LPUSH 或 RPUSH 命令为止。\n<p>有时候，为了等待一个新元素到达数据中，需要使用轮询的方式对数据进行探查。<br>另一种更好的方式是，使用系统提供的阻塞原语，在新元素到达时立即进行处理，而新元素还没到达时，就一直阻塞住，避免轮询占用资源。BLPOP和BRPOP能很好解决这个问题。\n', 'Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）\n\n一个列表最多可以包含 2e32-1 个元素 (4294967295, 每个列表超过40亿个元素)。\n\n#### Redis list 相关命令：\n\n|命令|说明|\n|-|-|\n|LPUSH key value1 [value2]|将一个或多个值插入到列表头部|\n|BLPOP key1 [key2 ] timeout|移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。|\n|BRPOP key1 [key2 ] timeout|移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止|\n|BRPOPLPUSH source destination timeout|从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。|\n|	LINDEX key index|通过索引获取列表中的元素|\n|LINSERT key BEFORE&#124;AFTER pivot value|在列表的元素前或者后插入元素|\n|LLEN key|获取列表长度|\n|LPOP key|移出并获取列表的第一个元素|\n|LPUSHX key value|将一个值插入到已存在的列表头部|\n|LRANGE key start stop|获取列表指定范围内的元素|\n|LREM key count value|移除列表元素|\n|LSET key index value|通过索引设置列表元素的值|\n|LTRIM key start stop|对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。|\n|RPOP key|移除列表的最后一个元素，返回值为移除的元素。|\n|RPOPLPUSH source destination|移除列表的最后一个元素，并将该元素添加到另一个列表并返回|\n|	RPUSH key value1 [value2]|在列表中添加一个或多个值|\n|RPUSHX key value|为已存在的列表添加值|\n\n#### 常见应用场景\n\n- 实现消息队列\n- 排行榜（排名非变动型）\n- 文章列表\n\n#### 阻塞队列&非阻塞队列\n非阻塞：不管有无找到指定键值都立即返回，LPUSH/LPOP。\n阻塞队列：如BLPOP，当队列里没有值此时会阻塞，直到有另一个客户端对给定的这些 key 的任意一个执行 LPUSH 或 RPUSH 命令为止。\n\n有时候，为了等待一个新元素到达数据中，需要使用轮询的方式对数据进行探查。\n另一种更好的方式是，使用系统提供的阻塞原语，在新元素到达时立即进行处理，而新元素还没到达时，就一直阻塞住，避免轮询占用资源。BLPOP和BRPOP能很好解决这个问题。', '2020-03-31 13:37:30', '2020-08-03 21:46:05', 100, 1);
INSERT INTO `bg_article` VALUES (48, 'Mysql 之 慢日志', '1585640000', '慢日志是一项重要的优化参考数据日志，依据日志可以定位到代码中的查询，然后分析sql语句缓慢的原因从而进行优化。', 'mysql,慢日志', '', '<blockquote>\n<p>慢日志是一项重要的优化参考数据日志，依据日志可以定位到代码中的查询，然后分析sql语句缓慢的原因从而进行优化。</p>\n</blockquote>\n<h4 id=\"h4-mysql-\"><a name=\"mysql慢日志相关配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>mysql慢日志相关配置</h4><p>slow_query_log：是否开启慢查询日志，1表示开启，0表示关闭。</p>\n<p>log-slow-queries：旧版（5.6以下版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log</p>\n<p>slow-query-log-file：新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log</p>\n<p>long_query_time：慢查询阈值，当查询时间多于设定的阈值时，记录日志，单位秒。</p>\n<p>log_queries_not_using_indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。</p>\n<p>log_output：日志存储方式。log_output=’FILE’表示将日志存入文件，默认值是’FILE’。log_output=’TABLE’表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=’FILE,TABLE’。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件。</p>\n', '> 慢日志是一项重要的优化参考数据日志，依据日志可以定位到代码中的查询，然后分析sql语句缓慢的原因从而进行优化。\n\n#### mysql慢日志相关配置\n\nslow_query_log：是否开启慢查询日志，1表示开启，0表示关闭。\n\nlog-slow-queries：旧版（5.6以下版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log\n\nslow-query-log-file：新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log\n\nlong_query_time：慢查询阈值，当查询时间多于设定的阈值时，记录日志，单位秒。\n\nlog_queries_not_using_indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。\n\nlog_output：日志存储方式。log_output=\'FILE\'表示将日志存入文件，默认值是\'FILE\'。log_output=\'TABLE\'表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=\'FILE,TABLE\'。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件。', '2020-03-31 15:33:20', '2020-08-05 10:52:16', 92, 1);
INSERT INTO `bg_article` VALUES (49, '设计导出百万级数据然后进行下载', '1585643272', '设计导出百万级数据然后进行下载，这里大致写一下思路需要异步实现，导出时间比较长。同步的话不太现实。', '导出,下载,百万数据,mysql,php', '', '<blockquote>\n<p>设计导出百万级数据然后进行下载，这里大致写一下思路需要异步实现，导出时间比较长。同步的话不太现实。</p>\n</blockquote>\n<h4 id=\"h4-u64CDu4F5Cu903Bu8F91\"><a name=\"操作逻辑\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>操作逻辑</h4><p>点击导出任务按钮 -&gt; 等待导出进度完成 -&gt; 点击下载</p>\n<h4 id=\"h4-u601Du8DEFu8BBEu8BA1\"><a name=\"思路设计\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>思路设计</h4><p>数据量过大同步下载方式已经无法有效实现，这里将使用异步的方式进行导出任务处理。</p>\n', '>设计导出百万级数据然后进行下载，这里大致写一下思路需要异步实现，导出时间比较长。同步的话不太现实。\n\n#### 操作逻辑\n点击导出任务按钮 -> 等待导出进度完成 -> 点击下载\n\n#### 思路设计\n数据量过大同步下载方式已经无法有效实现，这里将使用异步的方式进行导出任务处理。', '2020-03-31 16:27:52', '2020-03-31 16:30:56', 0, 0);
INSERT INTO `bg_article` VALUES (50, 'mysql主从配置，在本地docker环境中实现并配置', '1585643732', '在本地docker环境中进行配置mysql的主从复制功能。记录共勉之。', 'mysql,主从,dokcer,主从复制', '', '<blockquote>\n<p>在本地docker环境中进行配置mysql的主从复制功能</p>\n</blockquote>\n<h4 id=\"h4--mm-amp-ms\"><a name=\"创建两个镜像 mm&amp;ms\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>创建两个镜像 mm&amp;ms</h4><p>这里我已经把配置文件提前拷贝到win系统上了。</p>\n<pre><code>docker run -d --name mm -p 3308:3306 -e MYSQL_ROOT_PASSWORD=root -v e:/lnmp/mm/conf.d:/etc/mysql/conf.d -v e:/lnmp/mm/data:/var/lib/mysql mysql:5.7\n\ndocker run -d --name ms -p 3309:3306 -e MYSQL_ROOT_PASSWORD=root -v e:/lnmp/ms/conf.d:/etc/mysql/conf.d -v e:/lnmp/ms/data:/var/lib/mysql mysql:5.7\n</code></pre><h4 id=\"h4--mm-\"><a name=\"对mm主库进行配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>对mm主库进行配置</h4><p>配置完成后进行重启</p>\n<pre><code>[mysqld]\nserver-id=1\nlog-bin=mysql-bin\n</code></pre><h4 id=\"h4--ms-\"><a name=\"对ms从库进行配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>对ms从库进行配置</h4><p>配置完成后进行重启</p>\n<pre><code>server-id=2\nlog-bin=mysql-slave-bin\nrelay_log=edu-mysql-relay-bin\n</code></pre><h4 id=\"h4-u5728u4E3Bu5E93u4E2Du521Bu5EFAu6570u636Eu540Cu6B65u7528u6237\"><a name=\"在主库中创建数据同步用户\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>在主库中创建数据同步用户</h4><p>主库执行SQL：</p>\n<pre><code>CREATE USER \'slave\'@\'%\' IDENTIFIED BY \'123456\';\nGRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO \'slave\'@\'%\';\nshow master status;#用于查询主库相关信息，配置从库许要用到\n</code></pre><p><img src=\"http://static.iuxiao.com/image/2020/04/01/8dc77a8f3c65fe9570c7d3cf4471e2db5bb750f7.png\" alt=\"\">\n<h4 id=\"h4--ip\"><a name=\"查看主库容器IP\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看主库容器IP</h4><pre><code>docker inspect mm\n</code></pre><p><img src=\"http://static.iuxiao.com/image/2020/04/01/51103ed4b4f4b6618707153057bcba304c2fd7be.png\" alt=\"\">\n<h4 id=\"h4--sql\"><a name=\"从库进行配置执行SQL\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>从库进行配置执行SQL</h4><p>里面的master_host填写上面查询到的，user/password填写设置的同步用户，master_log_file/master_log_pos填写show master status;查询到的状态值。</p>\n<pre><code>change master to master_host=\'172.18.0.2\', master_user=\'slave\', master_password=\'123456\', master_port=3306, master_log_file=\'mysql-bin.000001\', master_log_pos=617, master_connect_retry=30;\n\nstart slave;\n</code></pre><h4 id=\"h4-u7ED3u675F\"><a name=\"结束\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>结束</h4><p>show slave status \\G;即可查询相关状态<br><img src=\"http://static.iuxiao.com/image/2020/04/01/5d21df331d11a149a9e34bbb878a7479949d217f.png\" alt=\"\">\n', '> 在本地docker环境中进行配置mysql的主从复制功能\n\n#### 创建两个镜像 mm&ms\n\n这里我已经把配置文件提前拷贝到win系统上了。\n```\ndocker run -d --name mm -p 3308:3306 -e MYSQL_ROOT_PASSWORD=root -v e:/lnmp/mm/conf.d:/etc/mysql/conf.d -v e:/lnmp/mm/data:/var/lib/mysql mysql:5.7\n\ndocker run -d --name ms -p 3309:3306 -e MYSQL_ROOT_PASSWORD=root -v e:/lnmp/ms/conf.d:/etc/mysql/conf.d -v e:/lnmp/ms/data:/var/lib/mysql mysql:5.7\n\n```\n\n#### 对mm主库进行配置\n\n配置完成后进行重启\n\n```\n[mysqld]\nserver-id=1\nlog-bin=mysql-bin\n```\n\n#### 对ms从库进行配置\n\n配置完成后进行重启\n````\nserver-id=2\nlog-bin=mysql-slave-bin\nrelay_log=edu-mysql-relay-bin\n````\n\n#### 在主库中创建数据同步用户\n\n主库执行SQL：\n```\nCREATE USER \'slave\'@\'%\' IDENTIFIED BY \'123456\';\nGRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO \'slave\'@\'%\';\nshow master status;#用于查询主库相关信息，配置从库许要用到\n```\n![](http://static.iuxiao.com/image/2020/04/01/8dc77a8f3c65fe9570c7d3cf4471e2db5bb750f7.png)\n\n#### 查看主库容器IP\n\n````\ndocker inspect mm\n````\n![](http://static.iuxiao.com/image/2020/04/01/51103ed4b4f4b6618707153057bcba304c2fd7be.png)\n\n#### 从库进行配置执行SQL\n\n里面的master_host填写上面查询到的，user/password填写设置的同步用户，master_log_file/master_log_pos填写show master status;查询到的状态值。\n\n```\nchange master to master_host=\'172.18.0.2\', master_user=\'slave\', master_password=\'123456\', master_port=3306, master_log_file=\'mysql-bin.000001\', master_log_pos=617, master_connect_retry=30;\n\nstart slave;\n```\n\n#### 结束\n\nshow slave status \\G;即可查询相关状态\n![](http://static.iuxiao.com/image/2020/04/01/5d21df331d11a149a9e34bbb878a7479949d217f.png)', '2020-03-31 16:35:32', '2020-08-03 19:25:34', 101, 1);
INSERT INTO `bg_article` VALUES (51, 'docker 给容器设置固定的IP', '1585749586', '每次重启docker后容器的IP会发生变化，因此需要对IP进行固定处理。', 'docker,网段,ip', '', '<p>docker network —help 可查看相关操作说明，多使用工具的help很有用处</p>\n<pre><code>$ docker network ls\nNETWORK ID     NAME        DRIVER       SCOPE\n9781b1f585ae    bridge       bridge       local\n1252da701e55    host        host        local\n237ea3d5cfbf    none        null        local\n</code></pre><p>docker 自带的网段bridge是无法直接给容器设置IP的，会出一个错误；</p>\n<pre><code>docker run -d --name mt -p 3305:3306 --network bridge --ip 172.17.0.10  -e MYSQL_ROOT_PASSWORD=root mysql:5.7\ndocker: Error response from daemon: user specified IP address is supported on user defined networks only.\n</code></pre><p><img src=\"http://static.iuxiao.com/image/2020/04/01/319b5ffe18243f86ff92fc74ca706c941c0459b7.png\" alt=\"\">\n<p>因此需要自定义一个network</p>\n<pre><code>docker network create --subnet=172.18.0.0/16 mynet\n\n#固定IP\ndocker run -d --name mt -p 3305:3306 --network mynet --ip 172.18.0.10  -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n</code></pre>', 'docker network --help 可查看相关操作说明，多使用工具的help很有用处\n\n\n```\n$ docker network ls\nNETWORK ID     NAME        DRIVER       SCOPE\n9781b1f585ae    bridge       bridge       local\n1252da701e55    host        host        local\n237ea3d5cfbf    none        null        local\n```\n\ndocker 自带的网段bridge是无法直接给容器设置IP的，会出一个错误；\n```\ndocker run -d --name mt -p 3305:3306 --network bridge --ip 172.17.0.10  -e MYSQL_ROOT_PASSWORD=root mysql:5.7\ndocker: Error response from daemon: user specified IP address is supported on user defined networks only.\n```\n![](http://static.iuxiao.com/image/2020/04/01/319b5ffe18243f86ff92fc74ca706c941c0459b7.png)\n\n因此需要自定义一个network\n```\ndocker network create --subnet=172.18.0.0/16 mynet\n\n#固定IP\ndocker run -d --name mt -p 3305:3306 --network mynet --ip 172.18.0.10  -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```', '2020-04-01 21:59:46', '2020-08-05 10:52:19', 124, 1);

-- ----------------------------
-- Table structure for bg_bill
-- ----------------------------
DROP TABLE IF EXISTS `bg_bill`;
CREATE TABLE `bg_bill`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `money` float(10, 2) NOT NULL DEFAULT 0.00,
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `gmt_create` datetime(0) NULL DEFAULT NULL,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 386 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '账单' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bg_bill
-- ----------------------------
INSERT INTO `bg_bill` VALUES (6, 1.50, '早饭', '2019-04-01 09:50:13', '');
INSERT INTO `bg_bill` VALUES (7, 13.00, '午饭', '2019-04-01 12:10:19', '');
INSERT INTO `bg_bill` VALUES (8, 12.00, '晚饭', '2019-04-01 19:40:57', '');
INSERT INTO `bg_bill` VALUES (9, 1.50, '早饭', '2019-04-02 09:52:04', '');
INSERT INTO `bg_bill` VALUES (10, 10.00, '其他', '2019-04-02 09:52:11', '天府通APP');
INSERT INTO `bg_bill` VALUES (11, 13.00, '午饭', '2019-04-02 12:26:00', '');
INSERT INTO `bg_bill` VALUES (12, 11.00, '晚饭', '2019-04-02 20:03:26', '');
INSERT INTO `bg_bill` VALUES (13, 2.00, '其他', '2019-04-02 21:02:26', '七乐彩');
INSERT INTO `bg_bill` VALUES (15, 13.00, '午饭', '2019-04-03 12:18:29', '');
INSERT INTO `bg_bill` VALUES (16, 11.00, '晚饭', '2019-04-03 21:55:43', '');
INSERT INTO `bg_bill` VALUES (17, 16.20, '购物', '2019-04-04 12:54:07', '');
INSERT INTO `bg_bill` VALUES (18, 184.00, '其他', '2019-04-04 13:13:16', '项链');
INSERT INTO `bg_bill` VALUES (19, 5.00, '其他', '2019-04-04 16:14:53', '次卡');
INSERT INTO `bg_bill` VALUES (20, 4.00, '其他', '2019-04-04 17:17:45', '彩票');
INSERT INTO `bg_bill` VALUES (21, 10.00, '购物', '2019-04-04 17:17:53', '草莓');
INSERT INTO `bg_bill` VALUES (22, 4.00, '购物', '2019-04-04 17:25:58', '快乐水');
INSERT INTO `bg_bill` VALUES (23, 116.90, '购物', '2019-04-04 17:57:24', '卫生纸');
INSERT INTO `bg_bill` VALUES (24, 70.70, '购物', '2019-04-05 10:53:30', '超市');
INSERT INTO `bg_bill` VALUES (25, 81.20, '购物', '2019-04-05 20:28:33', '超市');
INSERT INTO `bg_bill` VALUES (26, 12.00, '购物', '2019-04-05 20:34:40', '烤五花肉');
INSERT INTO `bg_bill` VALUES (27, 28.00, '午饭', '2019-04-06 11:13:32', '');
INSERT INTO `bg_bill` VALUES (28, 50.00, '其他', '2019-04-06 13:22:28', '车票，往返');
INSERT INTO `bg_bill` VALUES (29, 50.00, '其他', '2019-04-06 13:47:59', '青城后山门票');
INSERT INTO `bg_bill` VALUES (30, 50.00, '其他', '2019-04-06 20:37:41', '车费，到成都');
INSERT INTO `bg_bill` VALUES (31, 10.00, '其他', '2019-04-06 21:53:41', '天府通');
INSERT INTO `bg_bill` VALUES (32, 18.00, '其他', '2019-04-06 23:12:38', '夜宵');
INSERT INTO `bg_bill` VALUES (33, 10.00, '其他', '2019-04-06 23:12:48', '河粉');
INSERT INTO `bg_bill` VALUES (34, 35.00, '午饭', '2019-04-07 12:54:18', '');
INSERT INTO `bg_bill` VALUES (35, 3.00, '其他', '2019-04-07 12:57:33', '菠萝');
INSERT INTO `bg_bill` VALUES (36, 46.40, '购物', '2019-04-07 17:16:12', '超市，买菜');
INSERT INTO `bg_bill` VALUES (37, 22.00, '晚饭', '2019-04-07 18:58:45', '');
INSERT INTO `bg_bill` VALUES (38, 2.00, '早饭', '2019-04-08 10:13:02', '');
INSERT INTO `bg_bill` VALUES (39, 13.00, '午饭', '2019-04-08 12:22:33', '');
INSERT INTO `bg_bill` VALUES (40, 2.00, '早饭', '2019-04-09 09:54:26', '');
INSERT INTO `bg_bill` VALUES (41, 0.88, '其他', '2019-04-09 10:08:27', '支护宝保障续签');
INSERT INTO `bg_bill` VALUES (42, 13.00, '午饭', '2019-04-09 12:20:05', '');
INSERT INTO `bg_bill` VALUES (43, 5.00, '其他', '2019-04-09 20:29:07', '零食');
INSERT INTO `bg_bill` VALUES (44, 2.00, '早饭', '2019-04-10 09:49:37', '');
INSERT INTO `bg_bill` VALUES (45, 13.00, '午饭', '2019-04-10 12:09:43', '');
INSERT INTO `bg_bill` VALUES (46, 2.00, '早饭', '2019-04-11 09:54:42', '');
INSERT INTO `bg_bill` VALUES (47, 124.00, '晚饭', '2019-04-11 20:48:59', '排骨汤锅');
INSERT INTO `bg_bill` VALUES (48, 2.00, '早饭', '2019-04-12 09:51:49', '');
INSERT INTO `bg_bill` VALUES (49, 13.00, '午饭', '2019-04-12 12:20:48', '');
INSERT INTO `bg_bill` VALUES (50, 10.00, '晚饭', '2019-04-12 19:58:14', '');
INSERT INTO `bg_bill` VALUES (51, 186.80, '购物', '2019-04-13 17:05:15', '烧烤');
INSERT INTO `bg_bill` VALUES (52, 7.00, '购物', '2019-04-14 11:47:59', '雪碧');
INSERT INTO `bg_bill` VALUES (53, 2.00, '早饭', '2019-04-15 09:51:54', '');
INSERT INTO `bg_bill` VALUES (54, 13.00, '午饭', '2019-04-15 12:09:20', '');
INSERT INTO `bg_bill` VALUES (55, 1.50, '早饭', '2019-04-16 09:51:13', '');
INSERT INTO `bg_bill` VALUES (56, 0.90, '购物', '2019-04-16 14:36:32', '卫生纸');
INSERT INTO `bg_bill` VALUES (57, 1.50, '早饭', '2019-04-17 09:47:33', '');
INSERT INTO `bg_bill` VALUES (58, 5.00, '其他', '2019-04-17 19:32:07', '辣条');
INSERT INTO `bg_bill` VALUES (59, 29.00, '其他', '2019-04-18 00:04:50', '膜拜');
INSERT INTO `bg_bill` VALUES (60, 4.00, '早饭', '2019-04-18 09:52:50', '');
INSERT INTO `bg_bill` VALUES (61, 13.00, '午饭', '2019-04-18 12:18:54', '');
INSERT INTO `bg_bill` VALUES (62, 106.00, '其他', '2019-04-18 23:42:36', '爱奇艺会员');
INSERT INTO `bg_bill` VALUES (63, 1.50, '早饭', '2019-04-19 09:46:21', '');
INSERT INTO `bg_bill` VALUES (64, 15.00, '午饭', '2019-04-19 12:02:32', '');
INSERT INTO `bg_bill` VALUES (65, 27.00, '晚饭', '2019-04-19 20:06:13', '');
INSERT INTO `bg_bill` VALUES (66, 3.00, '其他', '2019-04-19 20:09:38', '');
INSERT INTO `bg_bill` VALUES (67, 160.10, '购物', '2019-04-20 17:52:59', '');
INSERT INTO `bg_bill` VALUES (68, 8.80, '其他', '2019-04-20 19:42:11', '千禧果');
INSERT INTO `bg_bill` VALUES (69, 19.91, '其他', '2019-04-21 12:23:03', '话费');
INSERT INTO `bg_bill` VALUES (70, 11.00, '其他', '2019-04-21 17:01:17', '卤菜');
INSERT INTO `bg_bill` VALUES (71, 20.50, '其他', '2019-04-21 17:01:28', '樱桃');
INSERT INTO `bg_bill` VALUES (72, 8.00, '其他', '2019-04-21 17:20:45', '菠萝');
INSERT INTO `bg_bill` VALUES (73, 15.00, '午饭', '2019-04-22 12:09:44', '');
INSERT INTO `bg_bill` VALUES (74, 184.38, '其他', '2019-04-22 21:49:14', '眼膜');
INSERT INTO `bg_bill` VALUES (75, 2.00, '早饭', '2019-04-23 09:47:47', '');
INSERT INTO `bg_bill` VALUES (76, 1.50, '早饭', '2019-04-24 09:49:29', '');
INSERT INTO `bg_bill` VALUES (77, 8.00, '其他', '2019-04-24 20:39:33', '浴霸照明灯');
INSERT INTO `bg_bill` VALUES (78, 1.90, '其他', '2019-04-24 20:52:04', '');
INSERT INTO `bg_bill` VALUES (79, 1.50, '早饭', '2019-04-25 09:46:45', '');
INSERT INTO `bg_bill` VALUES (80, 22.00, '晚饭', '2019-04-25 20:12:34', '');
INSERT INTO `bg_bill` VALUES (81, 3.00, '其他', '2019-04-25 20:16:53', '菠萝');
INSERT INTO `bg_bill` VALUES (82, 13.50, '其他', '2019-04-25 20:17:01', '卤肉');
INSERT INTO `bg_bill` VALUES (83, 1.50, '早饭', '2019-04-26 09:52:47', '');
INSERT INTO `bg_bill` VALUES (84, 13.00, '午饭', '2019-04-26 12:19:09', '');
INSERT INTO `bg_bill` VALUES (85, 3.00, '其他', '2019-04-26 20:49:42', '菠萝');
INSERT INTO `bg_bill` VALUES (86, 6.00, '其他', '2019-04-26 20:54:38', '凉皮');
INSERT INTO `bg_bill` VALUES (87, 5.00, '其他', '2019-04-26 20:54:44', '鸡柳');
INSERT INTO `bg_bill` VALUES (88, 5.00, '其他', '2019-04-26 20:54:52', '魔域');
INSERT INTO `bg_bill` VALUES (89, 21.20, '购物', '2019-04-26 21:17:55', '超市');
INSERT INTO `bg_bill` VALUES (90, 28.00, '其他', '2019-04-27 10:22:59', '公交卡');
INSERT INTO `bg_bill` VALUES (91, 2.00, '其他', '2019-04-27 15:40:29', '彩票');
INSERT INTO `bg_bill` VALUES (92, 1.50, '其他', '2019-04-27 15:52:26', '');
INSERT INTO `bg_bill` VALUES (93, 3.00, '其他', '2019-04-27 21:46:32', '菠萝');
INSERT INTO `bg_bill` VALUES (94, 1.50, '早饭', '2019-04-28 09:56:50', '');
INSERT INTO `bg_bill` VALUES (95, 15.00, '午饭', '2019-04-28 12:08:17', '');
INSERT INTO `bg_bill` VALUES (96, 120.60, '其他', '2019-04-29 07:25:52', '顺风车');
INSERT INTO `bg_bill` VALUES (97, 2.00, '早饭', '2019-04-29 09:53:57', '');
INSERT INTO `bg_bill` VALUES (98, 10.00, '其他', '2019-04-29 20:01:54', '卤翅');
INSERT INTO `bg_bill` VALUES (99, 2.00, '早饭', '2019-04-30 09:15:19', '');
INSERT INTO `bg_bill` VALUES (100, 14.00, '午饭', '2019-04-30 12:19:40', '');
INSERT INTO `bg_bill` VALUES (101, 85.90, '购物', '2019-05-01 13:55:37', '榨汁机');
INSERT INTO `bg_bill` VALUES (102, 142.50, '其他', '2019-05-01 13:55:51', '超市');
INSERT INTO `bg_bill` VALUES (103, 9.00, '购物', '2019-05-01 15:48:36', '调料龙虾');
INSERT INTO `bg_bill` VALUES (104, 99.00, '购物', '2019-05-04 17:52:40', '');
INSERT INTO `bg_bill` VALUES (105, 2.00, '早饭', '2019-05-05 09:53:49', '');
INSERT INTO `bg_bill` VALUES (106, 13.00, '午饭', '2019-05-05 12:18:34', '');
INSERT INTO `bg_bill` VALUES (107, 2.00, '其他', '2019-05-05 19:55:49', '彩票');
INSERT INTO `bg_bill` VALUES (108, 19.00, '其他', '2019-05-05 19:55:55', '卤肉');
INSERT INTO `bg_bill` VALUES (109, 2.00, '早饭', '2019-05-06 09:52:37', '');
INSERT INTO `bg_bill` VALUES (110, 0.10, '其他', '2019-05-06 09:52:42', '');
INSERT INTO `bg_bill` VALUES (111, 2.50, '早饭', '2019-05-07 09:55:36', '');
INSERT INTO `bg_bill` VALUES (112, 21.50, '午饭', '2019-05-07 10:05:40', '冒菜 凳子给钱');
INSERT INTO `bg_bill` VALUES (113, 2.00, '早饭', '2019-05-08 09:54:38', '');
INSERT INTO `bg_bill` VALUES (114, 2.50, '早饭', '2019-05-09 09:49:52', '');
INSERT INTO `bg_bill` VALUES (115, 1.50, '早饭', '2019-05-10 09:47:41', '');
INSERT INTO `bg_bill` VALUES (116, 13.00, '午饭', '2019-05-10 12:17:50', '');
INSERT INTO `bg_bill` VALUES (117, 130.00, '晚饭', '2019-05-10 21:17:50', '');
INSERT INTO `bg_bill` VALUES (118, 26.00, '晚饭', '2019-05-11 20:24:50', '');
INSERT INTO `bg_bill` VALUES (119, 61.40, '购物', '2019-05-11 20:24:56', '超市');
INSERT INTO `bg_bill` VALUES (120, 25.67, '其他', '2019-05-11 20:33:55', 'DD');
INSERT INTO `bg_bill` VALUES (121, 25.52, '其他', '2019-05-12 09:44:34', '打车');
INSERT INTO `bg_bill` VALUES (122, 78.00, '午饭', '2019-05-12 09:44:47', '');
INSERT INTO `bg_bill` VALUES (123, 12.09, '其他', '2019-05-12 11:51:03', '打车');
INSERT INTO `bg_bill` VALUES (124, 10.90, '其他', '2019-05-12 12:56:48', '打车');
INSERT INTO `bg_bill` VALUES (125, 13.09, '其他', '2019-05-12 16:32:49', '打车');
INSERT INTO `bg_bill` VALUES (126, 1.50, '早饭', '2019-05-13 09:52:57', '');
INSERT INTO `bg_bill` VALUES (127, 13.00, '午饭', '2019-05-13 12:21:02', '');
INSERT INTO `bg_bill` VALUES (128, 1.50, '早饭', '2019-05-14 09:50:05', '');
INSERT INTO `bg_bill` VALUES (129, 5.00, '其他', '2019-05-14 20:03:13', '烤魔域');
INSERT INTO `bg_bill` VALUES (130, 13.00, '午饭', '2019-05-14 12:03:28', '');
INSERT INTO `bg_bill` VALUES (131, 10.00, '其他', '2019-05-15 09:24:20', '天府通');
INSERT INTO `bg_bill` VALUES (132, 2.00, '早饭', '2019-05-15 09:48:04', '');
INSERT INTO `bg_bill` VALUES (133, 1.70, '其他', '2019-05-15 18:35:35', '牙刷');
INSERT INTO `bg_bill` VALUES (134, 16.00, '其他', '2019-05-15 21:20:41', '烧烤');
INSERT INTO `bg_bill` VALUES (135, 16.00, '午饭', '2019-05-16 12:08:51', '');
INSERT INTO `bg_bill` VALUES (136, 15.00, '其他', '2019-05-16 12:08:56', '烧烤');
INSERT INTO `bg_bill` VALUES (137, 2.00, '早饭', '2019-05-17 09:51:37', '');
INSERT INTO `bg_bill` VALUES (138, 13.00, '午饭', '2019-05-17 12:17:23', '');
INSERT INTO `bg_bill` VALUES (139, 11.00, '晚饭', '2019-05-17 20:06:34', '');
INSERT INTO `bg_bill` VALUES (140, 5.50, '其他', '2019-05-17 20:53:55', '卤翅膀');
INSERT INTO `bg_bill` VALUES (141, 86.00, '其他', '2019-05-17 20:54:09', '情侣装');
INSERT INTO `bg_bill` VALUES (142, 154.84, '其他', '2019-05-17 23:08:57', '情侣装衬衣');
INSERT INTO `bg_bill` VALUES (143, 3.00, '其他', '2019-05-18 09:44:16', '');
INSERT INTO `bg_bill` VALUES (144, 8.00, '其他', '2019-05-18 09:44:24', '水 彩票');
INSERT INTO `bg_bill` VALUES (145, 12.63, '其他', '2019-05-18 20:06:54', '');
INSERT INTO `bg_bill` VALUES (146, 2.00, '早饭', '2019-05-20 09:51:53', '');
INSERT INTO `bg_bill` VALUES (147, 13.00, '午饭', '2019-05-20 12:05:14', '');
INSERT INTO `bg_bill` VALUES (148, 4.00, '其他', '2019-05-20 20:33:36', '彩票');
INSERT INTO `bg_bill` VALUES (149, 15.00, '其他', '2019-05-20 20:33:44', '花');
INSERT INTO `bg_bill` VALUES (150, 2.00, '早饭', '2019-05-21 09:50:56', '');
INSERT INTO `bg_bill` VALUES (151, 20.00, '其他', '2019-05-21 16:21:32', '话费');
INSERT INTO `bg_bill` VALUES (152, 12.00, '其他', '2019-05-21 20:43:04', '卤肉');
INSERT INTO `bg_bill` VALUES (153, 3.00, '其他', '2019-05-21 22:32:35', '水');
INSERT INTO `bg_bill` VALUES (154, 2.50, '早饭', '2019-05-22 09:48:54', '');
INSERT INTO `bg_bill` VALUES (155, 3.00, '早饭', '2019-05-23 09:50:01', '');
INSERT INTO `bg_bill` VALUES (156, 20.00, '其他', '2019-05-23 19:56:30', '话费');
INSERT INTO `bg_bill` VALUES (157, 2.00, '早饭', '2019-05-24 09:53:15', '');
INSERT INTO `bg_bill` VALUES (158, 13.00, '午饭', '2019-05-24 12:15:23', '');
INSERT INTO `bg_bill` VALUES (159, 4.00, '其他', '2019-05-24 20:05:57', '彩票');
INSERT INTO `bg_bill` VALUES (160, 11.20, '其他', '2019-05-24 20:06:08', '西瓜');
INSERT INTO `bg_bill` VALUES (161, 5.80, '其他', '2019-05-25 15:38:31', '耳机延长线');
INSERT INTO `bg_bill` VALUES (162, 19.00, '其他', '2019-05-25 18:17:00', '卤菜');
INSERT INTO `bg_bill` VALUES (163, 33.10, '购物', '2019-05-25 20:17:44', '超市');
INSERT INTO `bg_bill` VALUES (164, 11.50, '购物', '2019-05-26 17:10:27', '面');
INSERT INTO `bg_bill` VALUES (165, 2.00, '早饭', '2019-05-27 09:47:32', '');
INSERT INTO `bg_bill` VALUES (166, 4.00, '其他', '2019-05-27 20:00:28', '彩票');
INSERT INTO `bg_bill` VALUES (167, 2.00, '其他', '2019-05-27 20:09:12', '');
INSERT INTO `bg_bill` VALUES (168, 3.00, '早饭', '2019-05-28 09:49:43', '');
INSERT INTO `bg_bill` VALUES (169, 13.00, '午饭', '2019-05-28 12:18:09', '');
INSERT INTO `bg_bill` VALUES (170, 24.00, '晚饭', '2019-05-28 20:11:43', '');
INSERT INTO `bg_bill` VALUES (171, 1.00, '早饭', '2019-05-29 09:55:43', '');
INSERT INTO `bg_bill` VALUES (172, 9.00, '午饭', '2019-05-29 12:24:45', '');
INSERT INTO `bg_bill` VALUES (173, 3.60, '其他', '2019-05-29 19:45:50', '车');
INSERT INTO `bg_bill` VALUES (174, 2.00, '其他', '2019-05-29 19:46:07', '彩票');
INSERT INTO `bg_bill` VALUES (175, 3.00, '早饭', '2019-05-30 09:53:54', '');
INSERT INTO `bg_bill` VALUES (176, 3.00, '早饭', '2019-05-31 09:53:06', '');
INSERT INTO `bg_bill` VALUES (177, 10.00, '午饭', '2019-05-30 12:03:15', '');
INSERT INTO `bg_bill` VALUES (178, 15.20, '其他', '2019-05-31 21:39:32', '打车');
INSERT INTO `bg_bill` VALUES (179, 20.00, '晚饭', '2019-05-31 21:39:43', '');
INSERT INTO `bg_bill` VALUES (180, 8.00, '其他', '2019-06-01 12:33:57', '公交');
INSERT INTO `bg_bill` VALUES (181, 24.00, '午饭', '2019-06-01 12:53:24', '');
INSERT INTO `bg_bill` VALUES (182, 1.00, '其他', '2019-06-02 12:33:21', '');
INSERT INTO `bg_bill` VALUES (183, 16.00, '其他', '2019-06-02 16:49:18', '鸡脚');
INSERT INTO `bg_bill` VALUES (184, 1.00, '其他', '2019-06-02 16:49:27', '冰糕');
INSERT INTO `bg_bill` VALUES (185, 7.00, '其他', '2019-06-02 16:49:36', '西瓜');
INSERT INTO `bg_bill` VALUES (186, 12.00, '其他', '2019-06-02 16:58:58', '车厘子');
INSERT INTO `bg_bill` VALUES (187, 9.00, '其他', '2019-06-02 17:04:20', '桃子');
INSERT INTO `bg_bill` VALUES (188, 1.50, '早饭', '2019-06-03 09:53:18', '');
INSERT INTO `bg_bill` VALUES (189, 10.00, '午饭', '2019-06-03 12:22:48', '');
INSERT INTO `bg_bill` VALUES (190, 2.00, '其他', '2019-06-03 19:58:30', '彩票');
INSERT INTO `bg_bill` VALUES (191, 5.00, '其他', '2019-06-03 20:09:27', '烤魔芋');
INSERT INTO `bg_bill` VALUES (192, 2.25, '其他', '2019-06-03 20:53:37', '差价红旗');
INSERT INTO `bg_bill` VALUES (193, 2.00, '早饭', '2019-06-04 09:53:20', '');
INSERT INTO `bg_bill` VALUES (194, 7.00, '其他', '2019-06-04 19:38:58', '西瓜');
INSERT INTO `bg_bill` VALUES (195, 1.50, '早饭', '2019-06-05 09:50:54', '');
INSERT INTO `bg_bill` VALUES (196, 6.00, '其他', '2019-06-05 19:56:37', '卤菜');
INSERT INTO `bg_bill` VALUES (197, 17.20, '购物', '2019-06-05 20:07:55', '');
INSERT INTO `bg_bill` VALUES (198, 6.00, '其他', '2019-06-05 22:01:07', '土豆');
INSERT INTO `bg_bill` VALUES (199, 2.00, '早饭', '2019-06-06 09:53:43', '');
INSERT INTO `bg_bill` VALUES (200, 13.00, '午饭', '2019-06-06 09:53:47', '');
INSERT INTO `bg_bill` VALUES (201, 10.00, '其他', '2019-06-06 19:32:17', '卤菜');
INSERT INTO `bg_bill` VALUES (202, 6.00, '午饭', '2019-06-07 11:24:41', '');
INSERT INTO `bg_bill` VALUES (203, 5.80, '其他', '2019-06-07 11:24:48', '西瓜');
INSERT INTO `bg_bill` VALUES (204, 40.00, '其他', '2019-06-07 11:28:22', '公交卡充值');
INSERT INTO `bg_bill` VALUES (205, 32.50, '其他', '2019-06-07 17:30:12', '鱼');
INSERT INTO `bg_bill` VALUES (206, 22.50, '其他', '2019-06-07 17:30:19', '菜');
INSERT INTO `bg_bill` VALUES (207, 4.00, '其他', '2019-06-07 21:53:23', '零食');
INSERT INTO `bg_bill` VALUES (208, 60.00, '午饭', '2019-06-08 12:44:29', '');
INSERT INTO `bg_bill` VALUES (209, 5000.00, '买房', '2019-06-08 12:44:36', '定金1');
INSERT INTO `bg_bill` VALUES (210, 31.15, '其他', '2019-06-08 23:35:15', '打车');
INSERT INTO `bg_bill` VALUES (211, 44.50, '午饭', '2019-06-09 13:11:57', '');
INSERT INTO `bg_bill` VALUES (212, 75.00, '购物', '2019-06-09 15:00:17', '超市');
INSERT INTO `bg_bill` VALUES (213, 10.00, '其他', '2019-06-09 17:27:01', '理发');
INSERT INTO `bg_bill` VALUES (214, 15.60, '其他', '2019-06-09 18:30:28', '密封罐');
INSERT INTO `bg_bill` VALUES (215, 2.00, '早饭', '2019-06-10 09:51:40', '');
INSERT INTO `bg_bill` VALUES (216, 4.90, '午饭', '2019-06-10 13:01:30', '');
INSERT INTO `bg_bill` VALUES (217, 8.00, '其他', '2019-06-10 19:40:48', '');
INSERT INTO `bg_bill` VALUES (218, 2.00, '早饭', '2019-06-10 19:40:57', '');
INSERT INTO `bg_bill` VALUES (219, 10.00, '午饭', '2019-06-11 12:14:23', '');
INSERT INTO `bg_bill` VALUES (220, 4.00, '其他', '2019-06-12 09:48:44', '');
INSERT INTO `bg_bill` VALUES (221, 10.00, '午饭', '2019-06-12 12:18:02', '');
INSERT INTO `bg_bill` VALUES (222, 110000.00, '买房', '2019-06-12 22:48:01', '定金2');
INSERT INTO `bg_bill` VALUES (223, 25850.00, '买房', '2019-06-12 23:43:56', '中介');
INSERT INTO `bg_bill` VALUES (224, 25.36, '其他', '2019-06-12 23:44:16', '打车');
INSERT INTO `bg_bill` VALUES (225, 6.00, '其他', '2019-06-12 23:57:56', '土豆');
INSERT INTO `bg_bill` VALUES (226, 17.00, '其他', '2019-06-12 23:58:14', '铁板饭');
INSERT INTO `bg_bill` VALUES (227, 125.00, '其他', '2019-06-13 11:23:35', '打车');
INSERT INTO `bg_bill` VALUES (228, 4.00, '其他', '2019-06-13 15:15:45', '锅盔');
INSERT INTO `bg_bill` VALUES (229, 12.00, '其他', '2019-06-13 15:15:59', '烧仙草');
INSERT INTO `bg_bill` VALUES (230, 20.00, '其他', '2019-06-13 17:13:44', '公交卡');
INSERT INTO `bg_bill` VALUES (231, 4.00, '其他', '2019-06-13 20:02:41', '彩票');
INSERT INTO `bg_bill` VALUES (232, 96.00, '晚饭', '2019-06-13 20:02:47', '纸包鱼');
INSERT INTO `bg_bill` VALUES (233, 19.30, '购物', '2019-06-13 20:05:17', '');
INSERT INTO `bg_bill` VALUES (234, 1.50, '早饭', '2019-06-14 09:53:11', '');
INSERT INTO `bg_bill` VALUES (235, 14.00, '午饭', '2019-06-14 12:19:22', '');
INSERT INTO `bg_bill` VALUES (236, 1.50, '其他', '2019-06-15 15:54:07', '冰糕');
INSERT INTO `bg_bill` VALUES (237, 16.50, '其他', '2019-06-15 15:54:14', '鸡翅尖');
INSERT INTO `bg_bill` VALUES (238, 30.00, '其他', '2019-06-15 15:59:55', '肉');
INSERT INTO `bg_bill` VALUES (239, 10.00, '其他', '2019-06-15 16:08:57', '桃子');
INSERT INTO `bg_bill` VALUES (240, 6.50, '其他', '2019-06-15 16:14:05', '');
INSERT INTO `bg_bill` VALUES (241, 8.30, '其他', '2019-06-15 16:17:17', '西瓜');
INSERT INTO `bg_bill` VALUES (242, 15.00, '其他', '2019-06-15 21:07:28', '烧烤');
INSERT INTO `bg_bill` VALUES (243, 95.80, '购物', '2019-06-16 17:35:18', '');
INSERT INTO `bg_bill` VALUES (244, 11.82, '其他', '2019-06-17 12:41:21', '打车');
INSERT INTO `bg_bill` VALUES (245, 5.00, '午饭', '2019-06-17 12:41:30', '');
INSERT INTO `bg_bill` VALUES (246, 2.00, '其他', '2019-06-17 20:02:45', '彩票');
INSERT INTO `bg_bill` VALUES (247, 2.00, '其他', '2019-06-17 20:02:45', '彩票');
INSERT INTO `bg_bill` VALUES (248, 2113.00, '其他', '2019-06-17 22:37:53', '房租');
INSERT INTO `bg_bill` VALUES (249, 140.60, '其他', '2019-06-17 22:38:07', '生活费');
INSERT INTO `bg_bill` VALUES (250, 1.50, '早饭', '2019-06-18 09:53:24', '');
INSERT INTO `bg_bill` VALUES (251, 11.00, '午饭', '2019-06-18 12:17:10', '');
INSERT INTO `bg_bill` VALUES (252, 80.00, '晚饭', '2019-06-18 21:13:57', '串串');
INSERT INTO `bg_bill` VALUES (253, 1.50, '早饭', '2019-06-19 09:46:11', '');
INSERT INTO `bg_bill` VALUES (254, 13.00, '午饭', '2019-06-19 12:25:41', '');
INSERT INTO `bg_bill` VALUES (255, 8.90, '其他', '2019-06-19 19:51:58', '西瓜');
INSERT INTO `bg_bill` VALUES (256, 1.50, '早饭', '2019-06-20 09:47:05', '');
INSERT INTO `bg_bill` VALUES (257, 5.00, '其他', '2019-06-20 10:28:38', '阿里云充值');
INSERT INTO `bg_bill` VALUES (258, 16.00, '午饭', '2019-06-20 12:18:52', '');
INSERT INTO `bg_bill` VALUES (259, 2.00, '其他', '2019-06-20 19:35:51', '彩票');
INSERT INTO `bg_bill` VALUES (260, 6.00, '晚饭', '2019-06-20 19:35:59', '');
INSERT INTO `bg_bill` VALUES (261, 2.00, '早饭', '2019-06-21 09:49:07', '');
INSERT INTO `bg_bill` VALUES (262, 9.00, '午饭', '2019-06-21 09:49:12', '');
INSERT INTO `bg_bill` VALUES (263, 10.00, '其他', '2019-06-21 12:17:58', '话费');
INSERT INTO `bg_bill` VALUES (264, 13.00, '晚饭', '2019-06-21 19:49:19', '');
INSERT INTO `bg_bill` VALUES (265, 10.00, '其他', '2019-06-21 19:51:47', '李子');
INSERT INTO `bg_bill` VALUES (266, 9.00, '其他', '2019-06-21 19:51:59', '西瓜');
INSERT INTO `bg_bill` VALUES (267, 104.20, '购物', '2019-06-22 17:34:48', '菜市');
INSERT INTO `bg_bill` VALUES (268, 5.00, '其他', '2019-06-22 23:36:10', '起点');
INSERT INTO `bg_bill` VALUES (269, 2.00, '早饭', '2019-06-24 09:55:56', '');
INSERT INTO `bg_bill` VALUES (270, 20.00, '晚饭', '2019-06-24 20:10:05', '');
INSERT INTO `bg_bill` VALUES (271, 41.70, '购物', '2019-06-24 21:05:05', '');
INSERT INTO `bg_bill` VALUES (272, 10.00, '其他', '2019-06-24 21:14:13', '');
INSERT INTO `bg_bill` VALUES (273, 1.50, '早饭', '2019-06-25 09:54:59', '');
INSERT INTO `bg_bill` VALUES (274, 9.00, '午饭', '2019-06-25 12:45:48', '');
INSERT INTO `bg_bill` VALUES (275, 4.50, '其他', '2019-06-25 19:40:01', '');
INSERT INTO `bg_bill` VALUES (276, 28.00, '晚饭', '2019-06-25 20:13:57', '');
INSERT INTO `bg_bill` VALUES (277, 2.50, '早饭', '2019-06-26 09:46:42', '');
INSERT INTO `bg_bill` VALUES (278, 9.00, '午饭', '2019-06-26 09:46:50', '');
INSERT INTO `bg_bill` VALUES (279, 26.00, '晚饭', '2019-06-26 20:40:30', '');
INSERT INTO `bg_bill` VALUES (280, 12.50, '其他', '2019-06-26 20:40:38', '水果 冰糕');
INSERT INTO `bg_bill` VALUES (281, 6.00, '午饭', '2019-06-27 12:12:54', '');
INSERT INTO `bg_bill` VALUES (282, 2.50, '早饭', '2019-06-27 09:50:59', '');
INSERT INTO `bg_bill` VALUES (283, 2.00, '早饭', '2019-06-28 09:50:30', '');
INSERT INTO `bg_bill` VALUES (284, 9.00, '午饭', '2019-06-28 12:18:46', '');
INSERT INTO `bg_bill` VALUES (285, 4300.00, '其他', '2019-06-28 12:19:27', '社保');
INSERT INTO `bg_bill` VALUES (286, 4.00, '其他', '2019-06-28 19:37:05', '彩票');
INSERT INTO `bg_bill` VALUES (287, 12.80, '购物', '2019-06-29 14:03:38', '打气筒');
INSERT INTO `bg_bill` VALUES (288, 63.80, '购物', '2019-06-29 16:11:00', '');
INSERT INTO `bg_bill` VALUES (289, 11.00, '其他', '2019-06-29 20:40:08', '');
INSERT INTO `bg_bill` VALUES (290, 31.00, '其他', '2019-06-30 12:55:04', '公交卡');
INSERT INTO `bg_bill` VALUES (291, 30.00, '其他', '2019-06-30 13:18:13', '公交卡');
INSERT INTO `bg_bill` VALUES (292, 3.00, '早饭', '2019-07-01 09:50:43', '');
INSERT INTO `bg_bill` VALUES (293, 6.00, '午饭', '2019-07-01 12:23:25', '');
INSERT INTO `bg_bill` VALUES (294, 22.20, '购物', '2019-07-01 12:41:49', '牙膏');
INSERT INTO `bg_bill` VALUES (295, 10.50, '其他', '2019-07-01 19:33:55', '');
INSERT INTO `bg_bill` VALUES (296, 2.00, '其他', '2019-07-01 19:33:59', '彩票');
INSERT INTO `bg_bill` VALUES (297, 20.30, '其他', '2019-07-01 19:44:25', '水果');
INSERT INTO `bg_bill` VALUES (298, 4.50, '早饭', '2019-07-02 09:49:05', '');
INSERT INTO `bg_bill` VALUES (299, 3.60, '其他', '2019-07-02 19:25:54', '青橘');
INSERT INTO `bg_bill` VALUES (300, 3.00, '早饭', '2019-07-03 09:48:26', '');
INSERT INTO `bg_bill` VALUES (301, 5.00, '其他', '2019-07-03 20:18:45', '');
INSERT INTO `bg_bill` VALUES (302, 2.00, '其他', '2019-07-03 20:18:49', '');
INSERT INTO `bg_bill` VALUES (303, 1.50, '早饭', '2019-07-04 09:52:27', '');
INSERT INTO `bg_bill` VALUES (304, 6.80, '其他', '2019-07-04 20:07:33', '西瓜');
INSERT INTO `bg_bill` VALUES (306, 2.50, '早饭', '2019-07-05 09:45:28', '');
INSERT INTO `bg_bill` VALUES (307, 9.00, '午饭', '2019-07-05 12:16:33', '');
INSERT INTO `bg_bill` VALUES (308, 2.00, '其他', '2019-07-05 19:30:50', '彩票');
INSERT INTO `bg_bill` VALUES (309, 9.00, '其他', '2019-07-05 19:31:00', '');
INSERT INTO `bg_bill` VALUES (310, 4.00, '其他', '2019-07-05 19:41:16', '');
INSERT INTO `bg_bill` VALUES (311, 198.70, '购物', '2019-07-06 18:00:30', '小龙虾');
INSERT INTO `bg_bill` VALUES (312, 0.90, '其他', '2019-07-06 18:00:48', '鸡蛋');
INSERT INTO `bg_bill` VALUES (313, 7010.00, '其他', '2019-07-06 18:00:55', '转弟弟');
INSERT INTO `bg_bill` VALUES (314, 9.00, '购物', '2019-07-06 21:51:45', '葡萄');
INSERT INTO `bg_bill` VALUES (315, 10.30, '其他', '2019-07-06 22:12:48', '西瓜');
INSERT INTO `bg_bill` VALUES (316, 40.00, '午饭', '2019-07-07 13:31:03', '');
INSERT INTO `bg_bill` VALUES (317, 40.00, '其他', '2019-07-07 17:37:33', '');
INSERT INTO `bg_bill` VALUES (318, 2.50, '早饭', '2019-07-08 09:47:37', '');
INSERT INTO `bg_bill` VALUES (319, 9.00, '午饭', '2019-07-08 12:20:29', '');
INSERT INTO `bg_bill` VALUES (320, 2.50, '早饭', '2019-07-09 09:55:04', '');
INSERT INTO `bg_bill` VALUES (321, 10.00, '其他', '2019-07-09 10:33:28', '阿里云');
INSERT INTO `bg_bill` VALUES (322, 2.00, '其他', '2019-07-09 19:52:53', '彩票');
INSERT INTO `bg_bill` VALUES (323, 2.50, '早饭', '2019-07-10 09:56:27', '');
INSERT INTO `bg_bill` VALUES (324, 2.00, '其他', '2019-07-10 20:02:27', '彩票');
INSERT INTO `bg_bill` VALUES (325, 7.00, '其他', '2019-07-10 20:02:37', '西瓜');
INSERT INTO `bg_bill` VALUES (326, 3.00, '早饭', '2019-07-11 09:56:40', '');
INSERT INTO `bg_bill` VALUES (327, 9.00, '午饭', '2019-07-11 12:17:21', '');
INSERT INTO `bg_bill` VALUES (328, 3.00, '晚饭', '2019-07-11 19:59:15', '');
INSERT INTO `bg_bill` VALUES (329, 8.00, '其他', '2019-07-12 00:19:29', '清醒剂');
INSERT INTO `bg_bill` VALUES (330, 5.50, '早饭', '2019-07-12 07:42:43', '');
INSERT INTO `bg_bill` VALUES (331, 220000.00, '买房', '2019-07-12 12:28:11', '');
INSERT INTO `bg_bill` VALUES (332, 147.00, '买房', '2019-07-12 12:28:22', '水电结算');
INSERT INTO `bg_bill` VALUES (333, 8.50, '其他', '2019-07-12 16:19:09', '');
INSERT INTO `bg_bill` VALUES (334, 25.00, '其他', '2019-07-12 20:02:30', '公交卡');
INSERT INTO `bg_bill` VALUES (335, 39.20, '购物', '2019-07-12 20:35:31', '');
INSERT INTO `bg_bill` VALUES (336, 12.50, '购物', '2019-07-12 20:42:04', '');
INSERT INTO `bg_bill` VALUES (337, 2.50, '其他', '2019-07-13 15:27:19', '');
INSERT INTO `bg_bill` VALUES (338, 3.50, '其他', '2019-07-13 15:27:42', '');
INSERT INTO `bg_bill` VALUES (339, 10.00, '其他', '2019-07-13 20:51:41', '烧烤');
INSERT INTO `bg_bill` VALUES (340, 10.00, '其他', '2019-07-14 00:57:21', '话费');
INSERT INTO `bg_bill` VALUES (341, 118.40, '购物', '2019-07-14 10:48:39', '');
INSERT INTO `bg_bill` VALUES (342, 17.00, '其他', '2019-07-14 18:40:20', '土豆');
INSERT INTO `bg_bill` VALUES (343, 19.00, '其他', '2019-07-14 20:56:41', '烧烤');
INSERT INTO `bg_bill` VALUES (344, 3.00, '早饭', '2019-07-15 12:19:15', '');
INSERT INTO `bg_bill` VALUES (345, 10.00, '午饭', '2019-07-15 12:19:21', '');
INSERT INTO `bg_bill` VALUES (346, 6.00, '晚饭', '2019-07-15 19:47:12', '');
INSERT INTO `bg_bill` VALUES (347, 18.00, '晚饭', '2019-07-15 20:04:21', '');
INSERT INTO `bg_bill` VALUES (348, 5.39, '其他', '2019-07-15 21:54:29', '门吸');
INSERT INTO `bg_bill` VALUES (349, 98.77, '其他', '2019-07-15 21:54:41', '刮玻璃');
INSERT INTO `bg_bill` VALUES (350, 38.69, '其他', '2019-07-15 22:16:32', '脚垫');
INSERT INTO `bg_bill` VALUES (351, 19.80, '其他', '2019-07-15 23:49:11', '檀香');
INSERT INTO `bg_bill` VALUES (352, 3.00, '其他', '2019-07-16 09:52:33', '');
INSERT INTO `bg_bill` VALUES (353, 15.50, '其他', '2019-07-16 20:04:55', '馍馍');
INSERT INTO `bg_bill` VALUES (354, 3.00, '其他', '2019-07-16 20:05:06', '复印');
INSERT INTO `bg_bill` VALUES (355, 5.00, '其他', '2019-07-17 09:20:36', '公交卡');
INSERT INTO `bg_bill` VALUES (356, 1.50, '早饭', '2019-07-17 09:51:21', '');
INSERT INTO `bg_bill` VALUES (357, 26.00, '午饭', '2019-07-17 13:35:20', '');
INSERT INTO `bg_bill` VALUES (358, 2.00, '其他', '2019-07-17 15:30:14', '');
INSERT INTO `bg_bill` VALUES (359, 33.00, '其他', '2019-07-17 22:13:09', '烧烤');
INSERT INTO `bg_bill` VALUES (360, 9.00, '其他', '2019-07-17 22:13:17', '西瓜');
INSERT INTO `bg_bill` VALUES (361, 13.00, '午饭', '2019-07-18 20:04:20', '');
INSERT INTO `bg_bill` VALUES (362, 6.00, '其他', '2019-07-18 20:04:26', '土豆');
INSERT INTO `bg_bill` VALUES (363, 1.50, '早饭', '2019-07-19 09:54:50', '');
INSERT INTO `bg_bill` VALUES (364, 13.00, '其他', '2019-07-19 19:49:35', '凉菜');
INSERT INTO `bg_bill` VALUES (365, 14.00, '其他', '2019-07-19 19:57:02', '耳朵');
INSERT INTO `bg_bill` VALUES (366, 48.40, '其他', '2019-07-20 09:33:59', '补墙膏');
INSERT INTO `bg_bill` VALUES (367, 54.18, '其他', '2019-07-20 09:54:55', '刷漆工具');
INSERT INTO `bg_bill` VALUES (368, 40.00, '午饭', '2019-07-20 11:48:19', '烤鸭');
INSERT INTO `bg_bill` VALUES (369, 2.00, '早饭', '2019-07-22 09:46:55', '');
INSERT INTO `bg_bill` VALUES (370, 15.00, '午饭', '2019-07-22 12:26:18', '');
INSERT INTO `bg_bill` VALUES (371, 5.00, '其他', '2019-07-22 18:13:01', '阿里云');
INSERT INTO `bg_bill` VALUES (372, 20.00, '晚饭', '2019-07-22 20:02:55', '');
INSERT INTO `bg_bill` VALUES (373, 2.50, '早饭', '2019-07-23 09:46:19', '');
INSERT INTO `bg_bill` VALUES (374, 8.00, '午饭', '2019-07-23 12:13:45', '');
INSERT INTO `bg_bill` VALUES (375, 26.90, '其他', '2019-07-23 19:58:44', '');
INSERT INTO `bg_bill` VALUES (376, 3.00, '早饭', '2019-07-24 09:57:02', '');
INSERT INTO `bg_bill` VALUES (377, 2.00, '其他', '2019-07-24 20:16:50', '');
INSERT INTO `bg_bill` VALUES (378, 52.00, '晚饭', '2019-07-24 21:27:06', '');
INSERT INTO `bg_bill` VALUES (379, 729.00, '其他', '2019-07-24 22:57:14', '红米7');
INSERT INTO `bg_bill` VALUES (380, 20.00, '其他', '2019-07-25 09:28:26', '话费');
INSERT INTO `bg_bill` VALUES (381, 1.50, '早饭', '2019-07-25 10:01:50', '');
INSERT INTO `bg_bill` VALUES (382, 20.00, '其他', '2019-07-25 20:11:33', '卤肉李子');
INSERT INTO `bg_bill` VALUES (383, 17.70, '其他', '2019-07-25 21:38:50', '红米7钢化膜');
INSERT INTO `bg_bill` VALUES (384, 17.40, '其他', '2019-07-26 08:08:32', '福');
INSERT INTO `bg_bill` VALUES (385, 3.00, '早饭', '2019-07-26 09:52:30', '');

-- ----------------------------
-- Table structure for bg_md5
-- ----------------------------
DROP TABLE IF EXISTS `bg_md5`;
CREATE TABLE `bg_md5`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `string` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `md5_16` char(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `md5_32` char(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bg_md5
-- ----------------------------

-- ----------------------------
-- Table structure for bg_tag
-- ----------------------------
DROP TABLE IF EXISTS `bg_tag`;
CREATE TABLE `bg_tag`  (
  `tag_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '标签ID',
  `tag_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '标签名称',
  `status` tinyint(4) NOT NULL DEFAULT 0 COMMENT '0.正常 1.删除',
  PRIMARY KEY (`tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bg_tag
-- ----------------------------

-- ----------------------------
-- Table structure for bg_user
-- ----------------------------
DROP TABLE IF EXISTS `bg_user`;
CREATE TABLE `bg_user`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `third_uuid` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `nick_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `gmt_create` datetime(0) NULL DEFAULT NULL,
  `gmt_update` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = '用户' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of bg_user
-- ----------------------------
INSERT INTO `bg_user` VALUES (1, '', '', '', '', NULL, NULL);
INSERT INTO `bg_user` VALUES (2, '02CBF58677C89FB25847A3EA6FCE0870', 'qq', 'Hellcox', 'http://thirdqq.qlogo.cn/g?b=oidb&k=kE6jkr0MtZlkVCm5Vl8PEQ&s=140&t=1556510270', '2019-10-13 23:05:44', '2019-10-13 23:05:44');

SET FOREIGN_KEY_CHECKS = 1;
